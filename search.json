[{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"package performs revision analysis offers detailed summary output including generation visual report. composed selection parametric tests enable users detect potential bias (mean regression bias) sources inefficiency preliminary estimates. mean inefficiency preliminary estimates whether revisions predictable way. package uses efficient libraries JDemetra+ v3. built mostly based Eurostat’s technical reports D. Ares L. Pitton (2013). next section helps installation package. third section describes use tool give important details main functions. particular, important mention beforehand input data must first set specific format described sub-section input data. fourth section theoretical describes test performed main function revision_analysis() (also performed individually) interpret . Finally, find reference papers last section.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"installation-settings","dir":"Articles","previous_headings":"","what":"Installation settings","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"package relies Java libraries JDemetra+ v3 package rjd3toolkit rjdverse. Prior installation, must ensure Java version >= 17.0 computer. need use portable version Java fill request, can follow instructions installation manual RJDemetra. addition Java version >= 17.0, must recent version R packages rJava (>= 1.0.6) RProtobuf (>=0.4.17) can download CRAN. Depending current version R, might also need install another version Rtools. (>= 3.6). package also depends package rjd3toolkit must install GitHub prior rjd3revsions. Note depending R packages already installed computer, might also asked install re-install packages CRAN. Finally, package also suggests R packages formattable kableExtra (readxl import input data Excel) downloadable CRAN. invited install enhanced formatting output (.e., meaningful colors).","code":"remotes::install_github(\"rjdverse/rjd3toolkit@*release\") remotes::install_github(\"rjdverse/rjd3revisions@*release\", build_vignettes = TRUE)"},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"input_format","dir":"Articles","previous_headings":"Usage","what":"Input data","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"input data must specific format: long, vertical diagonal shown one table . Regarding dates, format shown examples acceptable, common date formats revision dates time periods. Note missing values can either mentioned NA (example ) included input best convenience user.","code":""},{"path":[]},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"format-3-horizontal-view","dir":"Articles","previous_headings":"Usage > Input data","what":"Format 3: horizontal view","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"Depending location input data, can use create_vintages_from_xlsx() create_vintages_from_csv(), generic function create_vintages() create vintages (see section vintages & revisions) later . plan use generic function, ’ll first need put input data data.frame R example .","code":"# Long format long_view <- data.frame(     rev_date = rep(x = c(\"2022-07-31\", \"2022-08-31\", \"2022-09-30\", \"2022-10-31\",                          \"2022-11-30\", \"2022-12-31\", \"2023-01-31\", \"2023-02-28\"),                    each = 4L),     time_period = rep(x = c(\"2022Q1\", \"2022Q2\", \"2022Q3\", \"2022Q4\"), times = 8L),     obs_values = c(         .8, .2, NA, NA, .8, .1, NA, NA,         .7, .1, NA, NA, .7, .2, .5, NA,         .7, .2, .5, NA, .7, .3, .7, NA,         .7, .2, .7, .4, .7, .3, .7, .3     ) ) print(long_view)  # Horizontal format horizontal_view <- matrix(data = c(.8, .8, .7, .7, .7, .7, .7, .7, .2, .1,                                    .1, .2, .2, .3, .2, .3, NA, NA, NA, .5, .5, .7, .7,                                    .7, NA, NA, NA, NA, NA, NA, .4, .3),                           ncol = 4) colnames(horizontal_view) <- c(\"2022Q1\", \"2022Q2\", \"2022Q3\", \"2022Q4\") rownames(horizontal_view) <- c(\"2022-07-31\", \"2022-08-31\", \"2022-09-30\", \"2022-10-31\",                                \"2022-11-30\", \"2022-12-31\", \"2023-01-31\", \"2023-02-28\") print(horizontal_view)  # Vertical format vertical_view <- matrix(data = c(.8, .2, NA, NA, .8, .1, NA, NA, .7, .1, NA,                                  NA, .7, .2, .5, NA, .7, .2, .5, NA, .7, .3, .7, NA,                                  .7, .2, .7, .4, .7, .3, .7, .3),                         nrow = 4) rownames(vertical_view) <- c(\"2022Q1\", \"2022Q2\", \"2022Q3\", \"2022Q4\") colnames(vertical_view) <- c(\"2022-07-31\", \"2022-08-31\", \"2022-09-30\", \"2022-10-31\",                              \"2022-11-30\", \"2022-12-31\", \"2023-01-31\", \"2023-02-28\") print(vertical_view)"},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"processing","dir":"Articles","previous_headings":"Usage","what":"Processing","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"input data right format, create vintages: possibly inspect revisions perform revision analysis: Finally create report get summary results, can use function revision_analysis export report pdf html format, can use function render_report","code":"library(\"rjd3revisions\") vintages <- create_vintages(long_view, type = \"long\", periodicity = 4L) # vintages <- create_vintages_from_xlsx( #     file = \"myinput.xlsx\", #     type = \"long\", #     periodicity = 4, #     \"Sheet1\" # ) # vintages <- create_vintages_from_csv( #     file = \"myinput.csv\", #     periodicity = 4, #     sep = \"\\t\", #     date_format = \"%Y-%m-%d\" # )  print(vintages) # extract of the vintages according to the different views summary(vintages) # metadata about vintages revisions <- get_revisions(vintages, gap = 1)  plot(revisions)  print(revisions) # extract of the revisions according to the different views summary(revisions) # metadata about revisions rslt <- revision_analysis(vintages, gap = 1, view = \"diagonal\", n.releases = 3)  summary(rslt) print(rslt) render_report(     rslt,     output_file = \"my_report\",     output_dir = \"C:/Users/xxx\",     output_format = \"pdf_document\" )"},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"vintages","dir":"Articles","previous_headings":"Usage > Details on the main functions","what":"Vintages & revisions","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"input data right format, must first create object class rjd3rev_vintages can run revision analysis. function create_vintages() (, alternatively, create_vintages_from_xlsx() create_vintages_from_csv()) create object input data display vintages considering three different data structures views: vertical, horizontal diagonal. vertical view shows observed values time period different vintages. approach robust changes base year data redefinition example used analyse revisions resulting benchmark revision. drawback approach comparing historical series different vintages, need look smallest common number observations consequently number observations circumstances small. Moreover, often case revision last points series number observations small test anything. Example vertical view horizontal view shows observed values different vintages period. quick analysis can performed rows order see data point (e.g. 2023Q1), figures first estimated, forecasted finally revised. main findings usually obvious: cases variance decreases, namely data converge towards ‘true value’. Horizontal tables just transpose vertical tables used tests ‘revision_analysis’. Example horizontal view diagonal view shows subsequent releases given time period, without regard date publication. advantage diagonal approach gives way analyse trade timing release accuracy published figures. particularly informative regular estimation intervals exist data study (case official statistics). However, approach requires particularly vigilant case change base year data redefinition. Example diagonal view Note argument function create_vintages(), argument vintage_selection allows limit range revision dates consider needed. See ?create_vintages details. Revisions easily calculated vintages choosing gap consider. function get_revisions() display revisions according view. just informative function need run prior revision analysis.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"revision-analysis-reporting","dir":"Articles","previous_headings":"Usage > Details on the main functions","what":"Revision analysis & reporting","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"function revision_analysis() main function package. provides descriptive statistics performs battery parametric tests enable users detect potential bias (mean regression bias) sources inefficiency preliminary estimates. conclude inefficiency preliminary estimates revisions predictable way. Parametric tests divided 5 categories: relevancy (check whether preliminary estimates even worth ), bias, efficiency, orthogonality (correlation higher lags), signalVSnoise. function robust. reasons, test fails process, just skipped warning sent users possible cause failure. tests performed usual. parametric tests, prior transformation vintage data may important avoid misleading results. default, decision differentiate vintage data performed automatically based unit root co-integration tests. specifically, focus augmented Dickey-Fuller (ADF) test test presence unit root , cointegration, proceed ADF test residuals OLS regression two vintages. results tests also made available output function (section ‘varbased’). contrast, choice log-transformation left discretion users based knowledge series diagnostics various tests. default, log-transformation considered. part arguments revision_analysis() function, can choose view gap consider, restrict number releases investigation diagonal view selected /change default setting prior transformation data (including possibility add prior log-transformation data). function render_report() applied output revision_analysis() generate enhanced HTML PDF report including formatted summary results full explanations test (also included vignette ). formatted summary results display p-value test (except Theil’s tests value statistics provided) interpretation. appreciation ‘good’, ‘uncertain’, ‘bad’ ‘severe’ indeed associated test following usual statistical interpretation p-values orientation tests. allows quick visual interpretation results similar done GUI JDemetra+. addition function revision_analysis(), user can also perform tests individually want . list functions available package (therefore finding different functions corresponding individual tests), can Use help(‘name functions’) ?‘name functions’ information examples various functions.","code":"ls(\"package:rjd3revisions\")"},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"output","dir":"Articles","previous_headings":"Usage","what":"Output","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"detailed results test part output returned function revision_analysis(). Alternatively, functions associated individual test give result specific test. addition visual report can get applying function render_report() output function revision_analysis(), can also apply usual summary() print() functions output. function summary(), particular, print formatted table report main results. print() provide unformatted information together extra ones. Finally plot() function applied output function get_revisions() provide visual revisions time.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"user-defined-thresholds","dir":"Articles","previous_headings":"Usage","what":"User-defined thresholds","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"possible user change default values thresholds considered function revision_analysis() (displayed functions summary.rjd3rev_rslts() render_report()) used make quality assessment results tests. Changing default values thresholds can done test global options. latter can set via options() queried via getOption(). Note default thresholds considered residuals diagnostics can also changed necessary. ’s customize threshold. Thresholds values defined ascending numeric vector. start -Inf element vector understood upper lower bound (depending null hypothesis) corresponding assessment. Furthermore, assessment “good” always one mentioned. Depending test, interpreted adequately. Finally, assessments ‘good’ (implicitly), ‘uncertain’, ‘bad’ ‘severe’ allowed don’t used necessary. example modify threshold values tests. list name test thresholds can modified can found list . augmented t-test, defining threshold values like , means results assessed severe p-value < 0.005, bad p-value 0.005 0.05, uncertain 0.05 0.1 good higher 0.1. far Theil U2 test concerned, given definition test (see section Theil’s Inequality Coefficient), results assessed good value test lower 0.5, uncertain, 0.5 0.75, bad 0.75 1 severe higher 1. possible options user can modified, together description default value. Finally, functions set_thresholds_to_default() set_all_thresholds_to_default() can used reset test thresholds default values.","code":"options(     augmented_t_threshold = c(severe = 0.005, bad = 0.05, uncertain = 0.1),     t_threshold = c(bad = 0.05, uncertain = 0.1),     theil_u2_threshold = c(uncertain = .5, bad = .75, severe = 1) )  rslt2 <- revision_analysis(vintages, gap = 1, view = \"diagonal\", n.releases = 3) summary(rslt2) set_thresholds_to_default(\"t_threshold\") # or to reset all threshold options set_all_thresholds_to_default()  rslt3 <- revision_analysis(vintages, gap = 1, view = \"diagonal\", n.releases = 3) summary(rslt3)"},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"tests-description-and-interpretation","dir":"Articles","previous_headings":"","what":"Tests description and interpretation","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"Recall purpose parametric tests described : check relevancy preliminary estimates detect potential mean regression bias measure efficiency preliminary estimates (.e., whether revisions somehow predictable)","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"theil","dir":"Articles","previous_headings":"Tests description and interpretation > Relevancy","what":"Theil’s Inequality Coefficient","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"context revision analysis, Theil’s inequality coefficient, also known Theil’s U, provides measure accuracy set preliminary estimates (P) compared latter version (L). exists definitions Theil’s statistics leading different interpretation results. package, two definitions considered. first statistic, U1, given $$ U_1=\\frac{\\sqrt{\\frac{1}{n}\\sum^n_{t=1}(L_t-P_t)^2}}{\\sqrt{\\frac{1}{n}\\sum^n_{t=1}L_t^2}+\\sqrt{\\frac{1}{n}\\sum^n_{t=1}P_t^2}} \\\\ \\\\ $$ U1 bounded 0 1. closer value U1 zero, better forecast method. However, classic definition Theil’s statistic suffers number limitations. particular, set near zero preliminary estimates always give value U1 statistic close 1 even though close latter estimates. second statistic, U2, given U2=∑t=1n(Pt+1−Lt+1Lt)2∑t=1n(Lt+1−LtLt)2 U_2=\\frac{\\sqrt{\\sum^n_{t=1}\\left(\\frac{P_{t + 1}-L_{t + 1}}{L_t}\\right)^2}}{\\sqrt{\\sum^n_{t=1}\\left(\\frac{L_{t + 1}-L_t}{L_t}\\right)^2}}  interpretation U2 differs U1. value 1 longer upper bound statistic threshold () preliminary estimates less () accurate naïve random walk forecast repeating last observed value (considering Pt+1=LtP_{t + 1}=L_t). Whenever can calculated (Lt≠0∀tL_t \\neq 0 ~\\forall t), U2 statistic preferred option evaluate relevancy preliminary estimates.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"bias","dir":"Articles","previous_headings":"Tests description and interpretation","what":"Bias","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"bias preliminary estimates may indicate inaccurate initial data inefficient compilation methods. However, must cautious bias shown statistically significant intend correct . Biases may change overtime, might correct errors longer apply. long interval, changes methodology definitions may also occur valid reasons expect non-zero mean revision.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"t-test-and-augmented-t-test","dir":"Articles","previous_headings":"Tests description and interpretation > Bias","what":"T-test and Augmented T-test","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"test whether mean revision statistically different zero sample n, employ conventional t-statistic t=R¯s2/n t=\\frac{\\overline{R}}{\\sqrt{s^2/n}}  null hypothesis bias equal zero rejected, may give insight whether bias exists earlier estimates. t-test equivalent fitting linear regression revisions constant (.e. mean). Assumptions gaussianity revisions implied. One can release assumption autocorrelation adding model. Hence Rt=μ+εt,t=1,...,n R_t=\\mu+\\varepsilon_t, ~~t=1,...,n  errors thought serially correlated according AR(1) model, εt=γεt+ut,|γ|<1andut∼iid \\varepsilon_t=\\gamma\\varepsilon_t+u_t, ~~~ |\\gamma|<1 ~~u_t \\sim{iid}   auto-correlation error terms reduces number independent observations (degrees freedom) factor n(1−γ)(1+γ)n\\frac{(1-\\gamma)}{(1+\\gamma)} thus, variance mean adjusted upward accordingly. Hence, Augmented t-test calculated tadj=R¯s2(1+γ̂)n(1−γ̂) t_{adj}=\\frac{\\overline{R}}{\\sqrt{\\frac{s^2(1+\\hat{\\gamma})}{n(1-\\hat{\\gamma})}}}  γ̂=∑t=1n−1(Rt−R¯)(Rt+1−R¯)∑t=1n(Rt−R¯)2 \\hat{\\gamma}=\\frac{\\sum^{n-1}_{t=1}(R_t-\\overline{R})(R_{t + 1}-\\overline{R})}{\\sum^n_{t=1}(R_t-\\overline{R})^2}","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"slope-and-drift","dir":"Articles","previous_headings":"Tests description and interpretation > Bias","what":"Slope and drift","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"assume linear regression model latter vintage (L) preliminary vintage (P) estimate intercept (drift) β0\\beta_0 slope coefficient β1\\beta_1 OLS. model Lt=β0+β1Pt+εt L_t=\\beta_0+\\beta_1P_t+\\varepsilon_t  (augmented) t-test revisions gives information mean bias, regression enables assess mean regression bias. regression bias occur, example, preliminary estimates tend low latter estimates relatively high high latter estimates relatively low. case, may result positive value intercept value β1<1\\beta_1<1. evaluate whether mean regression bias present, employ conventional t-test parameters null hypothesis β0=0\\beta_0 = 0 β1=1\\beta_1 = 1. Recall OLS regressions always come along rather strict assumptions. Users check diagnostics draw necessary conclusions .","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"efficiency","dir":"Articles","previous_headings":"Tests description and interpretation","what":"Efficiency","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"Efficiency tests evaluate whether preliminary estimates “efficient” forecast latter estimates. information used efficiently time preliminary estimate, revisions predictable therefore neither correlated preliminary estimates display relationship one vintage another. section focuses two points. Predictability revisions tested even Orthogonality SignalVSNoise sections.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"regression-of-revisions-on-previous-estimates","dir":"Articles","previous_headings":"Tests description and interpretation > Efficiency","what":"Regression of revisions on previous estimates","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"assume linear regression model revisions (R) preliminary vintage (P) estimate intercept β0\\beta_0 slope coefficient β1\\beta_1 OLS. model Rt=β0+β1Pt+εt,t=1,...,n R_t=\\beta_0+\\beta_1P_t+\\varepsilon_t, ~~t=1,...,n  revisions affected preliminary estimates, means efficient improved. employ conventional t-test parameters null hypothesis β0=0\\beta_0 = 0 β1=0\\beta_1 = 0. Diagnostics residuals verified.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"regression-of-revisions-from-latter-vintages-on-revisions-from-the-previous-vintages","dir":"Articles","previous_headings":"Tests description and interpretation > Efficiency","what":"Regression of revisions from latter vintages on revisions from the previous vintages","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"assume linear regression model revisions latter vintages (RvR_v) revisions previous vintages (Rv−1R_{v-1}) estimate intercept β0\\beta_0 slope coefficient β1\\beta_1 OLS. model Rv,t=β0+β1Rv−1,t+εt,t=1,...,n R_{v,t}=\\beta_0+\\beta_1R_{v-1,t}+\\varepsilon_t, ~~t=1,...,n  latter revisions predictable previous revisions, means preliminary estimates efficient improved. employ conventional t-test parameters null hypothesis β0=0\\beta_0 = 0 β1=0\\beta_1 = 0. Diagnostics residuals verified.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"orthogonality","dir":"Articles","previous_headings":"Tests description and interpretation","what":"Orthogonality","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"Orthogonality tests evaluate whether revisions older vintages affect latter revisions. section also includes autocorrelation seasonality tests given set revisions. significant correlation revisions subsequent periods, may witness degree predictability revision process.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"regression-of-latter-revisions-rv-on-previous-revisions-rv_1-rv_2rv_p","dir":"Articles","previous_headings":"Tests description and interpretation > Orthogonality","what":"Regression of latter revisions (Rv) on previous revisions (Rv_1, Rv_2,…Rv_p)","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"assume linear regression model revisions latter vintages (RvR_v) revisions p previous vintages (Rv−1,...,Rv−pR_{v-1}, ..., R_{v-p}) estimate intercept β0\\beta_0 slope coefficients β1,...,βp\\beta_1, ..., \\beta_p OLS. model Rv,t=β0+∑=1pβiRv−,t+εt,t=1,...,n R_{v,t}=\\beta_0+\\sum^p_{=1}\\beta_{}R_{v-,t}+\\varepsilon_t, ~~t=1,...,n  latter revisions predictable previous revisions, means preliminary estimates efficient improved. employ conventional t-test intercept parameter null hypothesis β0=0\\beta_0 = 0 F-test check null hypothesis β1=β2=...=βp=0\\beta_1 = \\beta_2=...=\\beta_p=0. Diagnostics residuals verified","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"regression-of-latter-revisions-rv-on-revisions-from-a-specific-vintage-rv_k","dir":"Articles","previous_headings":"Tests description and interpretation > Orthogonality","what":"Regression of latter revisions (Rv) on revisions from a specific vintage (Rv_k)","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"assume linear regression model revisions latter vintages (RvR_v) revisions specific vintage (Rv−kR_{v-k}) estimate intercept β0\\beta_0 slope coefficient β1\\beta_1 OLS. model Rv,t=β0+β1Rv−k,t+εt,t=1,...,n R_{v,t}=\\beta_0+\\beta_1R_{v-k,t}+\\varepsilon_t, ~~t=1,...,n  latter revisions predictable previous revisions, means preliminary estimates efficient improved. employ conventional t-test parameters null hypothesis β0=0\\beta_0 = 0 β1=0\\beta_1 = 0. Diagnostics residuals verified.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"test-of-autocorrelations-in-revisions","dir":"Articles","previous_headings":"Tests description and interpretation > Orthogonality","what":"Test of autocorrelations in revisions","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"test whether autocorrelation present revisions, employ Ljung-Box test. Ljung-Box test considers together group autocorrelation coefficients certain lag k therefore sometimes referred portmanteau test. purpose revision analysis, expect relatively small number observations, decided restrict number lags considered k=2k=2. Hence, users can also make distinction autocorrelation seasonal lags (see seasonality tests ). null hypothesis autocorrelation. test statistic given Q=n(n+2)∑=1kρ̂i2n−Q=n(n+2)\\sum^k_{=1}\\frac{\\hat{\\rho}_i^2}{n-}  n sample size, ρ̂i2\\hat{\\rho}_i^2 sample autocorrelation lag k=2k=2 number lags tested. null hypothesis, Q∼χ2(k)Q\\sim\\chi^2(k). Q statistically different zero, revision process may locally biased sense latter revisions related previous ones.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"test-of-seasonality-in-revisions","dir":"Articles","previous_headings":"Tests description and interpretation > Orthogonality","what":"Test of seasonality in revisions","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"test whether seasonality present revisions, employ two tests: parametric QS test non-parametric Friedman test. Note seasonality tests always performed first-differentiated series avoid misleading results. QS test variant Ljung-Box test computed seasonal lags, consider positive auto-correlations QS=n(n+2)∑=1k[max(0,γ̂.l)]2n−.l QS=n(n+2)\\sum^k_{=1}\\frac{\\left[max(0,\\hat{\\gamma}_{.l})\\right]^2}{n-.l}  k=2k=2, first second seasonal lags considered. Thus, test checks correlation actual observation observations lagged one two years. Note l=12l=12 dealing monthly observations, consider auto-covariances γ̂12\\hat{\\gamma}_{12} γ̂24\\hat{\\gamma}_{24} alone. turn k=4k=4 case quarterly data. null hypothesis autocorrelation seasonal lags, QS∼χmodified2(k)QS\\sim \\chi_{modified}^2(k). elimination negative correlations calls indeed modified χ2\\chi^2 distribution. done using simulation techniques. Friedman test requires distributional assumptions. uses rankings observations. constructed follows. Consider first matrix data {xij}nxk\\{x_{ij}\\}_{nxk} n rows (blocks, .e. number years sample), k columns (treatments, .e., either 12 months 4 quarters, depending frequency data). data matrix needs replaced new matrix {rij}nxk\\{r_{ij}\\}_{nxk}, entry rijr_{ij} rank xijx_{ij} within block . test statistic given Q=n∑j=1k(r̃.j−r̃)21n(k−1)∑=1n∑j=1k(rij−r̃)2 Q=\\frac{n\\sum^k_{j=1}(\\tilde{r}_{.j}-\\tilde{r})^2}{\\frac{1}{n(k-1)}\\sum^n_{=1}\\sum^k_{j=1}(r_{ij}-\\tilde{r})^2}  denominator represents variance average ranking across treatments j relative total. null hypothesis (stable) seasonality, Q∼χ2(k−1)Q\\sim \\chi^2(k-1). non-seasonal autocorrelation tests lower lags, QS Q significantly different zero, revision process may locally biased sense latter revisions related previous ones.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"signal-vs-noise","dir":"Articles","previous_headings":"Tests description and interpretation","what":"Signal vs Noise","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"Regression techniques can also used determine whether revisions classified ‘news’ ‘noise’. also closely related notion efficiency developed earlier. correlation revisions preliminary estimates significantly different zero, implies fully utilize information available time preliminary estimates. sense, conclude preliminary estimates better revisions embody noise. model test whether revisions “noise” similar first model established earlier test efficiency: Rt=β0+β1Pt+εt,t=1,...,n R_t=\\beta_0+\\beta_1P_t+\\varepsilon_t, ~~t=1,...,n  employ F-test parameters test jointly β0=0\\beta_0 = 0 β1=0\\beta_1 = 0. null hypothesis rejected, suggest revisions likely include noise. Diagnostics residuals verified. hand, revisions correlated latter estimates. case, means information becomes available compilation preliminary latter estimates captured estimation process latter estimates. sense, revision process warranted conclude revisions embody news. model test whether revisions “news” Rt=β0+β1Lt+εt,t=1,...,n R_t=\\beta_0+\\beta_1L_t+\\varepsilon_t, ~~t=1,...,n  employ F-test parameters test jointly β0=0\\beta_0 = 0 β1=0\\beta_1 = 0. null hypothesis rejected, good thing suggests revisions incorporate news. Note even reject null hypothesis conclude revisions incorporate news, necessarily mean revisions efficient might still predicted variables included estimation process.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"Ares, David. 2013. “Tool Revision Analysis : Technical Report.” DI/06769. DG ESTAT. Cook, Steve. 2019. “Forecast Evaluation Using Theil’s Inequality Coefficients.” Swansea University; https://www.economicsnetwork.ac.uk/showcase/cook_theil. Fixler, Dennis. 2007. “Interpret Whether Revisions Economic Variables Reflect ‘News’ ‘Noise’.” OECD. McKenzie, Richard, Michela Gamba. 2007. “Interpreting Results Revision Analyses: Recommended Summary Statistics.” OECD. Pitton, Laurent, David Ares. 2013a. “Tool Revision Analysis : Regression Based Parametric Analysis.” DI/06769. DG ESTAT. Pitton, Laurent, David Ares. 2013b. “Tool Revision Analysis : VAR Based Models Final Equation.” DI/06769. DG ESTAT. Smyk, Anna, Tanguy Barthelemy, Karsten Webel al. 2024. “JDemetra+ Documentation.” INSEE; https://jdemetra-new-documentation.netlify.app/.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Corentin Lemasson. Author, maintainer. Tanguy Barthelemy. Author, artist.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lemasson C, Barthelemy T (2024). rjd3revisions: Revision analysis 'JDemetra+ 3.x'. R package version 1.3.2.9000, https://rjdverse.github.io/rjd3revisions/, https://github.com/rjdverse/rjd3revisions.","code":"@Manual{,   title = {rjd3revisions: Revision analysis with 'JDemetra+ 3.x'},   author = {Corentin Lemasson and Tanguy Barthelemy},   year = {2024},   note = {R package version 1.3.2.9000, https://rjdverse.github.io/rjd3revisions/},   url = {https://github.com/rjdverse/rjd3revisions}, }"},{"path":"https://rjdverse.github.io/rjd3revisions/index.html","id":"rjd3revisions-","dir":"","previous_headings":"","what":"Revision analysis with JDemetra+ 3.x","title":"Revision analysis with JDemetra+ 3.x","text":"economic indicators published several times given reporting period, entails revisions time horizon changes. rjd3revisions performs battery tests revisions generates report results. various tests enable users detect potential bias sources inefficiency preliminary estimates.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Revision analysis with JDemetra+ 3.x","text":"Running rjd3 packages requires Java 17 higher. set configuration R explained ","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/index.html","id":"latest-release","dir":"","previous_headings":"Installation","what":"Latest release","title":"Revision analysis with JDemetra+ 3.x","text":"get current stable version (latest release): GitHub: r-universe:","code":"# install.packages(\"remotes\") remotes::install_github(\"rjdverse/rjd3toolkit@*release\") remotes::install_github(\"rjdverse/rjd3revisions@*release\", build_vignettes = TRUE) install.packages(\"rjd3revisions\", repos = c(\"https://rjdverse.r-universe.dev\", \"https://cloud.r-project.org\"))"},{"path":"https://rjdverse.github.io/rjd3revisions/index.html","id":"development-version","dir":"","previous_headings":"Installation","what":"Development version","title":"Revision analysis with JDemetra+ 3.x","text":"can install development version rjd3revisions GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"rjdverse/rjd3revisions\")"},{"path":"https://rjdverse.github.io/rjd3revisions/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Revision analysis with JDemetra+ 3.x","text":"First need get input data set data.frame R specific format . Note missing values can either mentioned NA (example ) included input best convenience user.","code":""},{"path":[]},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/index.html","id":"format-3-horizontal-view","dir":"","previous_headings":"Usage","what":"Format 3: horizontal view","title":"Revision analysis with JDemetra+ 3.x","text":"Depending location input data, can use create_vintages_from_xlsx() create_vintages_from_csv(), generic function create_vintages() create vintages. can create vintages, inspect revisions (optional) make analysis Finally create report get summary results, can use","code":"# Examples  # Long format long_view <- data.frame(     rev_date = rep(x = c(\"2022-07-31\", \"2022-08-31\", \"2022-09-30\", \"2022-10-31\",                          \"2022-11-30\", \"2022-12-31\", \"2023-01-31\", \"2023-02-28\"),                    each = 4L),     time_period = rep(x = c(\"2022Q1\", \"2022Q2\", \"2022Q3\", \"2022Q4\"), times = 8L),     obs_values = c(         .8, .2, NA, NA, .8, .1, NA, NA,         .7, .1, NA, NA, .7, .2, .5, NA,         .7, .2, .5, NA, .7, .3, .7, NA,         .7, .2, .7, .4, .7, .3, .7, .3     ) )  # Horizontal format horizontal_view <- matrix(data = c(.8, .8, .7, .7, .7, .7, .7, .7, .2, .1,                             .1, .2, .2, .3, .2, .3, NA, NA, NA, .5, .5, .7, .7,                             .7, NA, NA, NA, NA, NA, NA, .4, .3),                           ncol = 4) colnames(horizontal_view) <- c(\"2022Q1\", \"2022Q2\", \"2022Q3\", \"2022Q4\") rownames(horizontal_view) <- c(\"2022-07-31\", \"2022-08-31\", \"2022-09-30\", \"2022-10-31\",                                \"2022-11-30\", \"2022-12-31\", \"2023-01-31\", \"2023-02-28\")  # Vertical format vertical_view <- matrix(data = c(.8, .2, NA, NA, .8, .1, NA, NA, .7, .1, NA,                                  NA, .7, .2, .5, NA, .7, .2, .5, NA, .7, .3, .7, NA,                                  .7, .2, .7, .4, .7, .3, .7, .3),                           nrow = 4) rownames(vertical_view) <- c(\"2022Q1\", \"2022Q2\", \"2022Q3\", \"2022Q4\") colnames(vertical_view) <- c(\"2022-07-31\", \"2022-08-31\", \"2022-09-30\", \"2022-10-31\",                                \"2022-11-30\", \"2022-12-31\", \"2023-01-31\", \"2023-02-28\") library(\"rjd3revisions\")  vintages <- create_vintages(long_view, periodicity = 4) # revisions <- get_revisions(vintages, gap = 2) # plot(revisions) rslt <- revision_analysis(vintages, gap = 1, view = \"diagonal\", n.releases = 3) #> Warning: Slope and drift could not be performed #> Warning: efficiencyModel1 could not be performed #> Warning: efficiencyModel2 could not be performed #> Warning: orthogonallyModel1 could not be performed #> Warning: orthogonallyModel2 could not be performed render_report(     rslt,     output_file = \"my_report\",     output_dir = tempdir(),     output_format = \"pdf_document\" )  summary(rslt) print(rslt)"},{"path":"https://rjdverse.github.io/rjd3revisions/index.html","id":"additional-information","dir":"","previous_headings":"","what":"Additional information","title":"Revision analysis with JDemetra+ 3.x","text":"README.md file gives quick example proceed. Consult vignette (browseVignettes(\"rjd3revisions\")) documentation function (example: ?create_vintages, ?revision_analysis) see current possibilities tool.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/index.html","id":"package-maintenance-and-contributing","dir":"","previous_headings":"","what":"Package Maintenance and contributing","title":"Revision analysis with JDemetra+ 3.x","text":"contribution welcome done pull requests /issues. pull requests include updated tests updated documentation. functionality changed, docstrings added updated.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/index.html","id":"licensing","dir":"","previous_headings":"","what":"Licensing","title":"Revision analysis with JDemetra+ 3.x","text":"code project licensed European Union Public Licence (EUPL).","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/View.html","id":null,"dir":"Reference","previous_headings":"","what":"View function for objects of class ","title":"View function for objects of class ","text":"Display different view different panel visualize data table / matrix format","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/View.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View function for objects of class ","text":"","code":"View(x, ...)  # Default S3 method View(x, ...)  # S3 method for class 'rjd3rev_vintages' View(x, type = c(\"all\", \"long\", \"horizontal\", \"vertical\", \"diagonal\"), ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/View.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View function for objects of class ","text":"x object class \"rjd3rev_vintages\". ... arguments passed View method. type type view display","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/View.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"View function for objects of class ","text":"Generate view vintages different format. type argument, can choose view display. can choose long, horizontal, vertical diagonal view.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/View.rjd3rev_rslts.html","id":null,"dir":"Reference","previous_headings":"","what":"View function for objects of class rjd3rev_rslts — View.rjd3rev_rslts","title":"View function for objects of class rjd3rev_rslts — View.rjd3rev_rslts","text":"View function objects class rjd3rev_rslts","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/View.rjd3rev_rslts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View function for objects of class rjd3rev_rslts — View.rjd3rev_rslts","text":"","code":"# S3 method for class 'rjd3rev_rslts' View(x, type = c(\"summary\", \"stats-desc\", \"revisions\", \"tests\"), ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/View.rjd3rev_rslts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View function for objects of class rjd3rev_rslts — View.rjd3rev_rslts","text":"x object class rjd3rev_rslts type type view display ... arguments passed View.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/bias.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate bias using t-test and augmented t-test — bias","title":"Estimate bias using t-test and augmented t-test — bias","text":"Estimate bias using t-test augmented t-test","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/bias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate bias using t-test and augmented t-test — bias","text":"","code":"bias(revisions.view, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/bias.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate bias using t-test and augmented t-test — bias","text":"revisions.view mts object. Vertical diagonal view get_revisions() output na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/bias.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate bias using t-test and augmented t-test — bias","text":"","code":"## Simulated data df_long <- simulate_long(     n_period = 10L * 4L,     n_revision = 5L,     periodicity = 4L,     start_period = as.Date(\"2010-01-01\") )  ## Create vintage and test vintages <- create_vintages(df_long, periodicity = 4) revisions <- get_revisions(vintages, gap = 1) bias(revisions$diagonal_view) #>                            N    estimate     stderr      tstat     pvalue #> [Release[2]]-[Release[1]] 24 -0.54510403 0.49669780 -1.0974561 0.28379928 #> [Release[3]]-[Release[2]] 16  0.23607525 0.36069152  0.6545074 0.52269481 #> [Release[4]]-[Release[3]] 14 -0.25693314 0.12186524 -2.1083381 0.05497388 #> [Release[5]]-[Release[4]]  6  0.07740432 0.06517643  1.1876121 0.28832326 #>                                ar(1) stderr.adjusted tstat.adjusted #> [Release[2]]-[Release[1]] -0.1498687      0.42708187     -1.2763455 #> [Release[3]]-[Release[2]]  0.4195115      0.56403825      0.4185448 #> [Release[4]]-[Release[3]]  0.3617668      0.17800884     -1.4433730 #> [Release[5]]-[Release[4]] -0.6275096      0.03118073      2.4824407 #>                           pvalue.adjusted #> [Release[2]]-[Release[1]]      0.21088964 #> [Release[3]]-[Release[2]]      0.68894287 #> [Release[4]]-[Release[3]]      0.19490637 #> [Release[5]]-[Release[4]]      0.01976918"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check-date.html","id":null,"dir":"Reference","previous_headings":"","what":"Check vector with date — check_date_year","title":"Check vector with date — check_date_year","text":"Useful functions check vector represent dates object","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check-date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check vector with date — check_date_year","text":"","code":"check_date_year(x)  check_date_quarter(x)  check_date_month(x)  check_format_date(x, date_format = \"%Y-%m-%d\")"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check-date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check vector with date — check_date_year","text":"x vector Date, character, integer POSIXt object representing date object date_format character string (vector string) corresponding format(s) used x","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check-date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check vector with date — check_date_year","text":"boolean","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check-date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check vector with date — check_date_year","text":"function check_date_year checks pattern AAAA recognised. , date assimilated first January year AAAA. function check_date_quarter checks quarterly formats. accepted formats (example  third quarter 2000) : 2000 T3 2000 Q3 2000t3 2000q3 2000T3 2000Q3 2000 t3 2000 q3 one previous formats recognised, date assimilated first day quarter year (example 2000 Q3 assimilated 2000-07-01). function check_date_month checks monthly formats. accepted formats (example march 2000) : 2000 M3 2000 M03 2000 m3 2000 m03 2000M3 2000M03 2000m3 2000m03 one previous formats recognised, date assimilated first day month year (example 2000 M3 assimilated 2000-03-01). function check_format_date checks object x match pattern (one patterns) date_format.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check-date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check vector with date — check_date_year","text":"","code":"# check_date_year --------------------------------------------------  # Good date (representing years) check_date_year(x = c(\"2000\", \"2001\", \"2002\", \"2003\")) #> [1] TRUE check_date_year(x = 2020:2024) #> [1] TRUE  # Bad date check_date_year(x = \"2000 \") #> [1] FALSE check_date_year(x = 1:4) #> [1] FALSE  # check_date_quarter -----------------------------------------------  # Good date check_date_quarter(x = c(\"2000 q2\", \"2000 q3\", \"2000 q4\", \"2001 q1\")) #> [1] TRUE check_date_quarter(x = c(\"2010T1\", \"2010T2\", \"2010T3\", \"2010T4\")) #> [1] TRUE check_date_quarter(x = c(\"2020Q1\", \"2020Q2\", \"2020Q3\", \"2020Q4\")) #> [1] TRUE check_date_quarter(x = c(\"2020Q01\", \"2020Q02\", \"2020Q03\", \"2020Q04\")) #> [1] TRUE  # Bad date check_date_quarter(x = \"2000 \") #> [1] FALSE check_date_quarter(x = 1:4) #> [1] FALSE check_date_quarter(x = \"2000 q 2\") #> [1] FALSE check_date_quarter(x = \"2000 q12\") #> [1] FALSE  # check_date_month -----------------------------------------------  # Good date (representing years) check_date_month(x = c(\"2000 m2\", \"2000 m3\", \"2000 m4\", \"2000 m5\")) #> [1] TRUE check_date_month(x = c(\"2010M9\", \"2010M10\", \"2010M11\", \"2010M12\")) #> [1] TRUE check_date_month(x = c(\"2020M111\", \"2020M12\", \"2021M01\", \"2021M02\")) #> [1] FALSE check_date_month(x = c(\"2020M01\", \"2020M02\", \"2020M03\", \"2020M04\")) #> [1] TRUE  # Bad date check_date_month(x = \"2000 \") #> [1] FALSE check_date_month(x = 1:4) #> [1] FALSE check_date_month(x = \"2000 m 2\") #> [1] FALSE check_date_month(x = \"2000 m13\") #> [1] FALSE  # check_format_date -----------------------------------------------  # Good date (representing years) check_format_date(x = c(\"2000-01-01\", \"2000-02-01\", \"2000-03-01\", \"2000-04-01\",                         \"2000-05-01\", \"2000-06-01\", \"2000-07-01\", \"2000-08-01\",                         \"2000-09-01\", \"2000-10-01\"),                  date_format = \"%Y-%m-%d\") #> [1] TRUE check_format_date(x = c(\"01/08/2010\", \"01/09/2010\", \"01/10/2010\", \"01/11/2010\",                         \"01/12/2010\", \"01/01/2011\", \"01/02/2011\", \"01/03/2011\",                         \"01/04/2011\", \"01/05/2011\"),                  date_format = \"%d/%m/%Y\") #> [1] TRUE check_format_date(x = c(\"2000-01-01\", \"2000-02-01\", \"2000-03-01\", \"2000-04-01\",                         \"2000-05-01\", \"2000-06-01\", \"2000-07-01\", \"2000-08-01\",                         \"2000-09-01\", \"2000-10-01\"),                  date_format = c(\"%Y-%m-%d\", \"%d/%m/%Y\")) #> [1] TRUE  # Bad date check_format_date(x = c(\"2000-01-01\", \"2000-02-01\", \"2000-03-01\", \"2000-04-01\",                         \"2000-05-01\", \"2000-06-01\", \"2000-07-01\", \"2000-08-01\",                         \"2000-09-01\", \"2000-10-01\"),                  date_format = \"%d/%m/%Y\") #> [1] FALSE check_format_date(x = c(\"01/08/2010\", \"01/09/2010\", \"01/10/2010\", \"01/11/2010\",                         \"01/12/2010\", \"01/01/2011\", \"01/02/2011\", \"01/03/2011\",                         \"01/04/2011\", \"01/05/2011\"),                  date_format = \"%Y-%m-%d\") #> [1] FALSE"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_horizontal.html","id":null,"dir":"Reference","previous_headings":"","what":"Check horizontal format — check_horizontal","title":"Check horizontal format — check_horizontal","text":"Check horizontal format","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_horizontal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check horizontal format — check_horizontal","text":"","code":"check_horizontal(x, ...)  # S3 method for class 'data.frame' check_horizontal(x, ...)  # S3 method for class 'matrix' check_horizontal(x, date_format = \"%Y-%m-%d\")  # Default S3 method check_horizontal(x, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_horizontal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check horizontal format — check_horizontal","text":"x formatted data.frame containing input horizontal format ... Arguments passed check_horizontal according class object x date_format character string corresponding format used input data.frame revision dates.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_horizontal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check horizontal format — check_horizontal","text":"input date formatted","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_horizontal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check horizontal format — check_horizontal","text":"","code":"long_format <- rjd3revisions:::simulate_long(     start_period = as.Date(\"2020-01-01\"),     n_period = 24,     n_revision = 6,     periodicity = 12L ) horizontal_format <- rjd3revisions:::from_long_to_horizontal(long_format) check_horizontal(horizontal_format) #>            2020-01-01 2020-02-01 2020-03-01 2020-04-01 2020-05-01 2020-06-01 #> 2020-01-29   7.204358         NA         NA         NA         NA         NA #> 2020-05-21   3.497519   6.753144  10.857578   12.08743   16.83585         NA #> 2021-04-10   5.149273   3.836956   7.295772   13.32188   16.00543   18.80101 #> 2021-04-28   5.623216   5.440386   6.949875   11.84833   16.26324   18.57053 #> 2021-08-19   4.977762   4.836297   6.319922   11.08461   15.71115   17.52261 #> 2021-09-05   4.659658   4.786311   6.642365   11.24381   16.20001   17.82468 #>            2020-07-01 2020-08-01 2020-09-01 2020-10-01 2020-11-01 2020-12-01 #> 2020-01-29         NA         NA         NA         NA         NA         NA #> 2020-05-21         NA         NA         NA         NA         NA         NA #> 2021-04-10   22.17226   19.24543   10.10620   1.545001   2.515776 -0.6871231 #> 2021-04-28   23.21242   16.86658   10.72032   5.199813   5.561132  1.7070059 #> 2021-08-19   20.64625   16.22532   10.04095   4.548243   4.490737  1.3739880 #> 2021-09-05   21.27288   16.09562    9.20694   4.015807   3.907038  1.7494330 #>            2021-01-01 2021-02-01 2021-03-01 2021-04-01 2021-05-01 2021-06-01 #> 2020-01-29         NA         NA         NA         NA         NA         NA #> 2020-05-21         NA         NA         NA         NA         NA         NA #> 2021-04-10 -3.0959005  -2.903753 -2.2635668   4.196987         NA         NA #> 2021-04-28 -0.4960251  -1.889549  0.5035301   6.932233         NA         NA #> 2021-08-19 -1.7602091  -1.490879  1.8674294   6.381752  10.242147   14.34462 #> 2021-09-05 -1.9844203  -2.707615  1.9249615   5.534849   8.825429   14.69662 #>            2021-07-01 2021-08-01 2021-09-01 2021-10-01 2021-11-01 2021-12-01 #> 2020-01-29         NA         NA         NA         NA         NA         NA #> 2020-05-21         NA         NA         NA         NA         NA         NA #> 2021-04-10         NA         NA         NA         NA         NA         NA #> 2021-04-28         NA         NA         NA         NA         NA         NA #> 2021-08-19   13.00790   6.326846         NA         NA         NA         NA #> 2021-09-05   12.69063   6.085038  -2.705249         NA         NA         NA"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Check long format — check_long","title":"Check long format — check_long","text":"Check long format","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check long format — check_long","text":"","code":"check_long(x, date_format = \"%Y-%m-%d\")"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check long format — check_long","text":"x formatted data.frame containing input long format date_format character string corresponding format used input data.frame revision dates.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check long format — check_long","text":"input column date formatted","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_long.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check long format — check_long","text":"","code":"long_format <- rjd3revisions:::simulate_long(     start_period = as.Date(\"2020-01-01\"),     n_period = 24,     n_revision = 6,     periodicity = 12L ) check_long(long_format) #>        revdate       time obs_values #> 1   2020-05-31 2020-01-01   8.105556 #> 2   2020-05-31 2020-02-01  12.245285 #> 3   2020-05-31 2020-03-01   7.029947 #> 4   2020-05-31 2020-04-01   8.089936 #> 5   2020-05-31 2020-05-01   5.791076 #> 6   2020-05-31 2020-06-01         NA #> 7   2020-05-31 2020-07-01         NA #> 8   2020-05-31 2020-08-01         NA #> 9   2020-05-31 2020-09-01         NA #> 10  2020-05-31 2020-10-01         NA #> 11  2020-05-31 2020-11-01         NA #> 12  2020-05-31 2020-12-01         NA #> 13  2020-05-31 2021-01-01         NA #> 14  2020-05-31 2021-02-01         NA #> 15  2020-05-31 2021-03-01         NA #> 16  2020-05-31 2021-04-01         NA #> 17  2020-05-31 2021-05-01         NA #> 18  2020-05-31 2021-06-01         NA #> 19  2020-05-31 2021-07-01         NA #> 20  2020-05-31 2021-08-01         NA #> 21  2020-05-31 2021-09-01         NA #> 22  2020-05-31 2021-10-01         NA #> 23  2020-05-31 2021-11-01         NA #> 24  2020-05-31 2021-12-01         NA #> 25  2020-07-30 2020-01-01  11.608144 #> 26  2020-07-30 2020-02-01   8.030419 #> 27  2020-07-30 2020-03-01   1.190446 #> 28  2020-07-30 2020-04-01   6.577900 #> 29  2020-07-30 2020-05-01   5.597051 #> 30  2020-07-30 2020-06-01   2.318948 #> 31  2020-07-30 2020-07-01   7.820377 #> 32  2020-07-30 2020-08-01         NA #> 33  2020-07-30 2020-09-01         NA #> 34  2020-07-30 2020-10-01         NA #> 35  2020-07-30 2020-11-01         NA #> 36  2020-07-30 2020-12-01         NA #> 37  2020-07-30 2021-01-01         NA #> 38  2020-07-30 2021-02-01         NA #> 39  2020-07-30 2021-03-01         NA #> 40  2020-07-30 2021-04-01         NA #> 41  2020-07-30 2021-05-01         NA #> 42  2020-07-30 2021-06-01         NA #> 43  2020-07-30 2021-07-01         NA #> 44  2020-07-30 2021-08-01         NA #> 45  2020-07-30 2021-09-01         NA #> 46  2020-07-30 2021-10-01         NA #> 47  2020-07-30 2021-11-01         NA #> 48  2020-07-30 2021-12-01         NA #> 49  2020-11-20 2020-01-01  11.392633 #> 50  2020-11-20 2020-02-01  10.028847 #> 51  2020-11-20 2020-03-01   5.700385 #> 52  2020-11-20 2020-04-01   7.383426 #> 53  2020-11-20 2020-05-01   6.200591 #> 54  2020-11-20 2020-06-01   6.608481 #> 55  2020-11-20 2020-07-01   4.657058 #> 56  2020-11-20 2020-08-01   5.475279 #> 57  2020-11-20 2020-09-01   7.943330 #> 58  2020-11-20 2020-10-01   7.847698 #> 59  2020-11-20 2020-11-01   8.248359 #> 60  2020-11-20 2020-12-01         NA #> 61  2020-11-20 2021-01-01         NA #> 62  2020-11-20 2021-02-01         NA #> 63  2020-11-20 2021-03-01         NA #> 64  2020-11-20 2021-04-01         NA #> 65  2020-11-20 2021-05-01         NA #> 66  2020-11-20 2021-06-01         NA #> 67  2020-11-20 2021-07-01         NA #> 68  2020-11-20 2021-08-01         NA #> 69  2020-11-20 2021-09-01         NA #> 70  2020-11-20 2021-10-01         NA #> 71  2020-11-20 2021-11-01         NA #> 72  2020-11-20 2021-12-01         NA #> 73  2020-12-12 2020-01-01  11.791194 #> 74  2020-12-12 2020-02-01   9.722961 #> 75  2020-12-12 2020-03-01   5.195213 #> 76  2020-12-12 2020-04-01   6.435834 #> 77  2020-12-12 2020-05-01   6.627798 #> 78  2020-12-12 2020-06-01   4.435862 #> 79  2020-12-12 2020-07-01   4.327280 #> 80  2020-12-12 2020-08-01   3.677260 #> 81  2020-12-12 2020-09-01   8.579985 #> 82  2020-12-12 2020-10-01   8.722915 #> 83  2020-12-12 2020-11-01  10.021567 #> 84  2020-12-12 2020-12-01   4.808190 #> 85  2020-12-12 2021-01-01         NA #> 86  2020-12-12 2021-02-01         NA #> 87  2020-12-12 2021-03-01         NA #> 88  2020-12-12 2021-04-01         NA #> 89  2020-12-12 2021-05-01         NA #> 90  2020-12-12 2021-06-01         NA #> 91  2020-12-12 2021-07-01         NA #> 92  2020-12-12 2021-08-01         NA #> 93  2020-12-12 2021-09-01         NA #> 94  2020-12-12 2021-10-01         NA #> 95  2020-12-12 2021-11-01         NA #> 96  2020-12-12 2021-12-01         NA #> 97  2021-04-26 2020-01-01  11.220392 #> 98  2021-04-26 2020-02-01   9.856291 #> 99  2021-04-26 2020-03-01   4.568981 #> 100 2021-04-26 2020-04-01   6.962206 #> 101 2021-04-26 2020-05-01   6.335522 #> 102 2021-04-26 2020-06-01   5.017390 #> 103 2021-04-26 2020-07-01   5.116048 #> 104 2021-04-26 2020-08-01   3.106589 #> 105 2021-04-26 2020-09-01   7.924767 #> 106 2021-04-26 2020-10-01   7.990018 #> 107 2021-04-26 2020-11-01   9.187122 #> 108 2021-04-26 2020-12-01   6.108978 #> 109 2021-04-26 2021-01-01   8.283186 #> 110 2021-04-26 2021-02-01  10.960135 #> 111 2021-04-26 2021-03-01   3.658679 #> 112 2021-04-26 2021-04-01  11.715882 #> 113 2021-04-26 2021-05-01         NA #> 114 2021-04-26 2021-06-01         NA #> 115 2021-04-26 2021-07-01         NA #> 116 2021-04-26 2021-08-01         NA #> 117 2021-04-26 2021-09-01         NA #> 118 2021-04-26 2021-10-01         NA #> 119 2021-04-26 2021-11-01         NA #> 120 2021-04-26 2021-12-01         NA #> 121 2021-05-04 2020-01-01  11.462159 #> 122 2021-05-04 2020-02-01   9.846073 #> 123 2021-05-04 2020-03-01   4.851872 #> 124 2021-05-04 2020-04-01   6.826539 #> 125 2021-05-04 2020-05-01   6.374532 #> 126 2021-05-04 2020-06-01   5.032543 #> 127 2021-05-04 2020-07-01   4.754920 #> 128 2021-05-04 2020-08-01   2.754768 #> 129 2021-05-04 2020-09-01   8.251649 #> 130 2021-05-04 2020-10-01   8.979528 #> 131 2021-05-04 2020-11-01   9.480038 #> 132 2021-05-04 2020-12-01   6.184890 #> 133 2021-05-04 2021-01-01  10.546842 #> 134 2021-05-04 2021-02-01  12.982829 #> 135 2021-05-04 2021-03-01   3.174740 #> 136 2021-05-04 2021-04-01  12.643131 #> 137 2021-05-04 2021-05-01  14.527182 #> 138 2021-05-04 2021-06-01         NA #> 139 2021-05-04 2021-07-01         NA #> 140 2021-05-04 2021-08-01         NA #> 141 2021-05-04 2021-09-01         NA #> 142 2021-05-04 2021-10-01         NA #> 143 2021-05-04 2021-11-01         NA #> 144 2021-05-04 2021-12-01         NA"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_vertical.html","id":null,"dir":"Reference","previous_headings":"","what":"Check vertical format — check_vertical","title":"Check vertical format — check_vertical","text":"Check vertical format","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_vertical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check vertical format — check_vertical","text":"","code":"check_vertical(x, ...)  # S3 method for class 'mts' check_vertical(x, periodicity, date_format = \"%Y-%m-%d\", ...)  # S3 method for class 'data.frame' check_vertical(x, ...)  # S3 method for class 'matrix' check_vertical(x, periodicity, date_format = \"%Y-%m-%d\", ...)  # Default S3 method check_vertical(x, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_vertical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check vertical format — check_vertical","text":"x formatted data.frame containing input vertical format ... Arguments passed check_vertical according class object x periodicity Integer. Periodicity time period (12, 4 1 resp. monthly, quarterly annual data) date_format character string corresponding format used input data.frame revision dates.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_vertical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check vertical format — check_vertical","text":"input ts object revision date formatted","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_vertical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check vertical format — check_vertical","text":"","code":"long_format <- rjd3revisions:::simulate_long(     start_period = as.Date(\"2020-01-01\"),     n_period = 24,     n_revision = 6,     periodicity = 12L ) vertical_format <- rjd3revisions:::from_long_to_vertical(long_format, periodicity = 12L) check_vertical(vertical_format) #>          2020-01-14 2020-07-25 2020-10-16 2021-06-16 2021-07-04 2022-01-15 #> Jan 2020   12.17564  13.332478  13.239251   13.64814   14.01805   13.78428 #> Feb 2020         NA  13.815682  12.756079   12.93372   13.60116   13.25484 #> Mar 2020         NA  11.519799  14.376138   14.28032   14.15986   14.12367 #> Apr 2020         NA  14.495811   9.740965   10.65779   10.76908   10.71670 #> May 2020         NA   6.323403  10.560695   10.73470   10.68053   10.91327 #> Jun 2020         NA  16.497241  12.889442   12.56322   12.10268   12.30623 #> Jul 2020         NA  10.884023  13.285506   12.88337   12.81379   12.86336 #> Aug 2020         NA         NA  12.944277   15.04511   15.53498   14.73134 #> Sep 2020         NA         NA  14.910313   15.03674   14.75372   15.37867 #> Oct 2020         NA         NA  21.200677   16.47684   17.28385   18.21106 #> Nov 2020         NA         NA         NA   20.95804   21.82205   19.53171 #> Dec 2020         NA         NA         NA   18.87544   22.08148   21.59515 #> Jan 2021         NA         NA         NA   31.20741   30.41022   31.11870 #> Feb 2021         NA         NA         NA   34.73017   32.66652   29.98754 #> Mar 2021         NA         NA         NA   30.68328   30.59367   32.04268 #> Apr 2021         NA         NA         NA   22.17858   26.21062   25.83834 #> May 2021         NA         NA         NA   32.75551   30.13926   29.86801 #> Jun 2021         NA         NA         NA   33.08790   33.34088   32.86231 #> Jul 2021         NA         NA         NA         NA   36.62523   33.74219 #> Aug 2021         NA         NA         NA         NA         NA   38.92539 #> Sep 2021         NA         NA         NA         NA         NA   27.25081 #> Oct 2021         NA         NA         NA         NA         NA   36.61781 #> Nov 2021         NA         NA         NA         NA         NA   41.25404 #> Dec 2021         NA         NA         NA         NA         NA   39.63625"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/cointegration.html","id":null,"dir":"Reference","previous_headings":"","what":"Cointegration tests (Engle-Granger) — cointegration","title":"Cointegration tests (Engle-Granger) — cointegration","text":"Cointegration tests (Engle-Granger)","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/cointegration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cointegration tests (Engle-Granger) — cointegration","text":"","code":"cointegration(vintages.view, adfk = 1, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/cointegration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cointegration tests (Engle-Granger) — cointegration","text":"vintages.view mts object. Vertical diagonal view create_vintages() output adfk Number lags consider ADF na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/cointegration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cointegration tests (Engle-Granger) — cointegration","text":"","code":"## Simulated data df_long <- simulate_long(     n_period = 10L * 4L,     n_revision = 5L,     periodicity = 4L,     start_period = as.Date(\"2010-01-01\") )  ## Create vintage and test vintages <- create_vintages(df_long, periodicity = 4L) cointegration(vintages$diagonal_view) #>                                 value    stderr statistic       pvalue #> [Release[1]]_[Release[2]] -0.13501188 0.2415270 -4.699317 3.455221e-05 #> [Release[1]]_[Release[3]] -0.04677737 0.2784870 -3.758801 6.012256e-04 #> [Release[1]]_[Release[4]]  0.04326219 0.2946154 -3.247413 2.418643e-03 #> [Release[1]]_[Release[5]] -0.02132374 0.3578015 -2.854442 6.749418e-03 #> [Release[2]]_[Release[3]] -0.52036176 0.3403739 -4.466741 9.495658e-05 #> [Release[2]]_[Release[4]] -0.57078197 0.3389211 -4.634654 7.339976e-05 #> [Release[2]]_[Release[5]] -0.66797094 0.4239237 -3.934601 5.469787e-04 #> [Release[3]]_[Release[4]] -0.08910396 0.2967895 -3.669618 8.372067e-04 #> [Release[3]]_[Release[5]] -0.12959983 0.3902497 -2.894557 6.163594e-03 #> [Release[4]]_[Release[5]] -0.27444441 0.3371720 -3.779805 7.872489e-04"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages.html","id":null,"dir":"Reference","previous_headings":"","what":"Create vintage tables — create_vintages","title":"Create vintage tables — create_vintages","text":"Create vintage tables data.frame, matrix mts object R","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create vintage tables — create_vintages","text":"","code":"create_vintages(x, ...)  # S3 method for class 'data.frame' create_vintages(   x,   type = c(\"long\", \"horizontal\", \"vertical\"),   periodicity,   date_format = \"%Y-%m-%d\",   vintage_selection,   ... )  # S3 method for class 'mts' create_vintages(   x,   type = c(\"long\", \"horizontal\", \"vertical\"),   periodicity,   date_format = \"%Y-%m-%d\",   vintage_selection,   ... )  # S3 method for class 'matrix' create_vintages(   x,   type = c(\"long\", \"horizontal\", \"vertical\"),   periodicity,   date_format = \"%Y-%m-%d\",   vintage_selection,   ... )  # Default S3 method create_vintages(x, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create vintage tables — create_vintages","text":"x formatted object containing input. can type data.frame, matrix mts must represent one multiple vintage views (selected argument type. ... Arguments passed create_vintages according class object x type character specifying type representation input \"long\", \"horizontal\" \"vertical\" approach. periodicity Integer. Periodicity time period (12, 4 1 resp. monthly, quarterly annual data) date_format character string corresponding format used input data.frame revision dates. vintage_selection Date vector (character vector format date_format) length <= 2, specifying range revision dates retain. example: c(start = \"2022-02-02\", end = \"2022-08-05\") c(start = .Date(\"2022-02-02\"), end = .Date(\"2022-08-05\")) keep vintages whose revision date 02 Feb. 2022 05 Aug. 2022. missing (default), whole range selected.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create vintage tables — create_vintages","text":"object class rjd3rev_vintages contains four different view revision","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create vintage tables — create_vintages","text":"input data.frame, function displays vintages considering three different data structures views: vertical, horizontal diagonal. See details section information different views. function returns object class rjd3rev_vintages can used input main function revision_analysis. four different vintage views: vertical view shows observed values time period different vintages. approach robust changes base year data redefinition. drawback approach comparing historical series different vintages, need look smallest common number observations consequently number observations circumstances small. Moreover, often case revision last points series number observations small test anything. horizontal view shows observed values different vintages period. quick analysis can performed rows order see data point (e.g. 2023Q1), figures first estimated, forecasted finally revised. main findings usually obvious: cases variance decreases, namely data converge towards 'true value'. Horizontal tables just transpose vertical tables used tests revision_analysis. diagonal view shows subsequent releases given time period, without regard date publication. advantage diagonal approach gives way analyse trade timing release accuracy published figures. particularly informative regular estimation intervals exist data study. However, approach requires particularly vigilant case change base year data redefinition. long view representation data allows information grouped together order facilitate manipulation. 3 columns (1 column time period, 1 column publication / revision date one column data), representation allows efficient non-redundant storage data.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create vintage tables — create_vintages","text":"","code":"## creating the input  # Long format long_view <- data.frame(     rev_date = rep(x = c(\"2022-07-31\", \"2022-08-31\", \"2022-09-30\", \"2022-10-31\",                          \"2022-11-30\", \"2022-12-31\", \"2023-01-31\", \"2023-02-28\"),                    each = 4L),     time_period = rep(x = c(\"2022Q1\", \"2022Q2\", \"2022Q3\", \"2022Q4\"), times = 8L),     obs_values = c(         .8, .2, NA, NA, .8, .1, NA, NA,         .7, .1, NA, NA, .7, .2, .5, NA,         .7, .2, .5, NA, .7, .3, .7, NA,         .7, .2, .7, .4, .7, .3, .7, .3     ) )  vintages_1 <- create_vintages(x = long_view, type = \"long\", periodicity = 4)  # Horizontal format horizontal_view <- matrix(data = c(.8, .8, .7, .7, .7, .7, .7, .7, .2, .1,                             .1, .2, .2, .3, .2, .3, NA, NA, NA, .5, .5, .7, .7,                             .7, NA, NA, NA, NA, NA, NA, .4, .3),                           ncol = 4) colnames(horizontal_view) <- c(\"2022Q1\", \"2022Q2\", \"2022Q3\", \"2022Q4\") rownames(horizontal_view) <- c(\"2022-07-31\", \"2022-08-31\", \"2022-09-30\", \"2022-10-31\",                                \"2022-11-30\", \"2022-12-31\", \"2023-01-31\", \"2023-02-28\")  vintages_2 <- create_vintages(x = horizontal_view, type = \"horizontal\", periodicity = 4)  # Horizontal format vertical_view <- matrix(data = c(.8, .2, NA, NA, .8, .1, NA, NA, .7, .1, NA,                                  NA, .7, .2, .5, NA, .7, .2, .5, NA, .7, .3, .7, NA,                                  .7, .2, .7, .4, .7, .3, .7, .3),                           nrow = 4) rownames(vertical_view) <- c(\"2022Q1\", \"2022Q2\", \"2022Q3\", \"2022Q4\") colnames(vertical_view) <- c(\"2022-07-31\", \"2022-08-31\", \"2022-09-30\", \"2022-10-31\",                                \"2022-11-30\", \"2022-12-31\", \"2023-01-31\", \"2023-02-28\")  vintages_3 <- create_vintages(x = vertical_view, type = \"vertical\", periodicity = 4)  ## specifying the format of revision dates vintages <- create_vintages(     x = long_view,     type =\"long\",     periodicity = 4L,     date_format= \"%Y-%m-%d\" )  ## including vintage selection vintages <- create_vintages(     x = long_view,     type =\"long\",     periodicity = 4L,     date_format= \"%Y-%m-%d\",     vintage_selection = c(start=\"2022-10-31\", end=\"2023-01-31\") )"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages_from_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Create vintages table from CSV or TXT files — create_vintages_from_csv","title":"Create vintages table from CSV or TXT files — create_vintages_from_csv","text":"Create vintages table CSV TXT files","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages_from_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create vintages table from CSV or TXT files — create_vintages_from_csv","text":"","code":"create_vintages_from_csv(   file,   type = c(\"long\", \"horizontal\", \"vertical\"),   periodicity,   date_format = \"%Y-%m-%d\",   ... )"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages_from_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create vintages table from CSV or TXT files — create_vintages_from_csv","text":"file character containing name file data read . type character specifying type representation input \"long\", \"horizontal\" \"vertical\" approach. periodicity Integer. Periodicity time period (12, 4 1 resp. monthly, quarterly annual data) date_format character string corresponding format used input data.frame revision dates. ... Arguments passed read.csv(), example: sep field separator character dec character used file decimal points. row.names vector row names skip integer, number lines data file skip beginning read data. ...","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages_from_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create vintages table from CSV or TXT files — create_vintages_from_csv","text":"object class rjd3rev_vintages","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages_from_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create vintages table from CSV or TXT files — create_vintages_from_csv","text":"","code":"if (FALSE) { # \\dontrun{ file_name <- \"myinput.csv\" vintages <- create_vintages_from_csv(     file = file_name,     type = \"vertical\",     periodicity = 12,     date_format = \"%Y-%m-%d\",     sep = \";\" ) } # }"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages_from_xlsx.html","id":null,"dir":"Reference","previous_headings":"","what":"Create vintages table from XLSX files — create_vintages_from_xlsx","title":"Create vintages table from XLSX files — create_vintages_from_xlsx","text":"Create vintages table XLSX files","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages_from_xlsx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create vintages table from XLSX files — create_vintages_from_xlsx","text":"","code":"create_vintages_from_xlsx(   file,   type = c(\"long\", \"horizontal\", \"vertical\"),   periodicity,   ... )"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages_from_xlsx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create vintages table from XLSX files — create_vintages_from_xlsx","text":"file character containing name file data read . type character specifying type representation input \"long\", \"horizontal\" \"vertical\" approach. periodicity Integer. Periodicity time period (12, 4 1 resp. monthly, quarterly annual data) ... Arguments passed readxl::read_excel(), example: sheet character containing sheet read range cell range read col_names boolean use first row column names ...","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages_from_xlsx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create vintages table from XLSX files — create_vintages_from_xlsx","text":"object class rjd3rev_vintages","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages_from_xlsx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create vintages table from XLSX files — create_vintages_from_xlsx","text":"","code":"if (FALSE) { # \\dontrun{ file_name <- \"myinput.xlsx\" sheet_name <- \"Sheet1\" vintages <- create_vintages_from_xlsx(     file = file_name,     type = \"horizontal\",     periodicity = 12L,     sheet = sheet_name ) } # }"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/descriptive_statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Descriptive statistics — descriptive_statistics","title":"Descriptive statistics — descriptive_statistics","text":"Descriptive statistics","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/descriptive_statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Descriptive statistics — descriptive_statistics","text":"","code":"descriptive_statistics(revisions.view, rounding = 3)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/descriptive_statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Descriptive statistics — descriptive_statistics","text":"revisions.view mts object. Vertical diagonal view get_revisions() output rounding number decimals display","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/descriptive_statistics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Descriptive statistics — descriptive_statistics","text":"","code":"## Simulated data df_long <- simulate_long(     n_period = 10L * 4L,     n_revision = 5L,     periodicity = 4L,     start_period = as.Date(\"2010-01-01\") )  ## Create vintage and get descriptive statistics of revisions vintages <- create_vintages(df_long, periodicity = 4) revisions <- get_revisions(vintages, gap = 1) descriptive_statistics(revisions$diagonal_view, rounding = 1) #>                           [Release[2]]-[Release[1]] [Release[3]]-[Release[2]] #> N                                              29.0                      13.0 #> mean revision                                  -0.1                      -0.3 #> st.dev.                                         2.6                       1.1 #> min                                            -5.5                      -2.9 #> q.10                                           -3.4                      -1.3 #> median                                         -0.4                      -0.3 #> q.90                                            3.7                       1.0 #> max                                             4.9                       1.2 #> % positive                                      0.4                       0.3 #> % zero                                          0.0                       0.0 #> % negative                                      0.6                       0.7 #> mean absolute revision                          2.0                       0.9 #> root mean square revision                       2.6                       1.1 #>                           [Release[4]]-[Release[3]] [Release[5]]-[Release[4]] #> N                                               6.0                       4.0 #> mean revision                                   0.0                       0.1 #> st.dev.                                         0.8                       0.2 #> min                                            -0.9                      -0.1 #> q.10                                           -0.9                      -0.1 #> median                                          0.2                       0.0 #> q.90                                            0.8                       0.2 #> max                                             1.0                       0.3 #> % positive                                      0.7                       0.5 #> % zero                                          0.0                       0.0 #> % negative                                      0.3                       0.5 #> mean absolute revision                          0.6                       0.1 #> root mean square revision                       0.7                       0.1"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/efficiencyModel1.html","id":null,"dir":"Reference","previous_headings":"","what":"Efficiency Model 1 — efficiencyModel1","title":"Efficiency Model 1 — efficiencyModel1","text":"Linear regression model revisions (R) preliminary vintage (P)","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/efficiencyModel1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Efficiency Model 1 — efficiencyModel1","text":"","code":"efficiencyModel1(vintages.view, gap = 1, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/efficiencyModel1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Efficiency Model 1 — efficiencyModel1","text":"vintages.view mts object. Vertical diagonal view create_vintages() output gap Integer. Gap consider vintages. Default 1 means revisions calculated tested vintages consecutively. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/efficiencyModel1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Efficiency Model 1 — efficiencyModel1","text":"","code":"## Simulated data df_long <- simulate_long(     n_period = 10L * 4L,     n_revision = 5L,     periodicity = 4L,     start_period = as.Date(\"2010-01-01\") )  ## Create vintage and test vintages <- create_vintages(df_long, periodicity = 4L) efficiencyModel1(vintages$diagonal_view) #> Warning: efficiencyModel1 could not be performed #> NULL"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/efficiencyModel2.html","id":null,"dir":"Reference","previous_headings":"","what":"Efficiency Model 2 — efficiencyModel2","title":"Efficiency Model 2 — efficiencyModel2","text":"Linear regression model R_v R_{v-1}","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/efficiencyModel2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Efficiency Model 2 — efficiencyModel2","text":"","code":"efficiencyModel2(vintages.view, gap = 1, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/efficiencyModel2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Efficiency Model 2 — efficiencyModel2","text":"vintages.view mts object. Vertical diagonal view create_vintages() output gap Integer. Gap consider vintages. Default 1 means revisions calculated tested vintages consecutively. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/efficiencyModel2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Efficiency Model 2 — efficiencyModel2","text":"","code":"## Simulated data df_long <- simulate_long(     n_period = 10L * 4L,     n_revision = 5L,     periodicity = 4L,     start_period = as.Date(\"2010-01-01\") )  ## Create vintage and test vintages <- create_vintages(df_long, periodicity = 4L) efficiencyModel2(vintages$diagonal_view) #>                            N          R2           F intercept.estimate #> [Release[3]]-[Release[2]] 24 0.344031034 11.53817200        0.109860001 #> [Release[4]]-[Release[3]] 14 0.001302023  0.01564465        0.000632632 #> [Release[5]]-[Release[4]]  9 0.151834592  1.25310716        0.033831766 #>                           intercept.stderr intercept.pvalue slope.estimate #> [Release[3]]-[Release[2]]       0.20213049        0.5922439    -0.30115024 #> [Release[4]]-[Release[3]]       0.16074738        0.9969245     0.01919427 #> [Release[5]]-[Release[4]]       0.06573168        0.6226141    -0.11829608 #>                           slope.stderr slope.pvalue    skewness    kurtosis #> [Release[3]]-[Release[2]]   0.08865734  0.002591094 -0.04615157 -0.36199959 #> [Release[4]]-[Release[3]]   0.15345772  0.902532324 -1.03395405  2.29739182 #> [Release[5]]-[Release[4]]   0.10567597  0.299894962  0.48140272 -0.01239274 #>                           JarqueBera.value JarqueBera.pvalue BreuschPagan.R2 #> [Release[3]]-[Release[2]]        0.1337484        0.93531285      0.03935263 #> [Release[4]]-[Release[3]]        5.1752204        0.07519954      0.11395178 #> [Release[5]]-[Release[4]]        0.3090493        0.85682237      0.28960014 #>                           BreuschPagan.value BreuschPagan.pvalue   White.R2 #> [Release[3]]-[Release[2]]          0.9012233           0.3527668 0.03974011 #> [Release[4]]-[Release[3]]          1.5432809           0.2378601 0.17483605 #> [Release[5]]-[Release[4]]          2.8536055           0.1350193 0.33025472 #>                           White.value White.pvalue     arch.R2 arch.value #> [Release[3]]-[Release[2]]   0.9537627    0.6207162 0.007372263  0.1695620 #> [Release[4]]-[Release[3]]   2.4477047    0.2940950 0.098329364  1.2782817 #> [Release[5]]-[Release[4]]   2.9722925    0.2262429 0.013632058  0.1090565 #>                           arch.pvalue #> [Release[3]]-[Release[2]]   0.6805013 #> [Release[4]]-[Release[3]]   0.2582188 #> [Release[5]]-[Release[4]]   0.7412209"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/get_revisions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate revisions from vintages — get_revisions","title":"Calculate revisions from vintages — get_revisions","text":"Calculate revisions vintages","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/get_revisions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate revisions from vintages — get_revisions","text":"","code":"get_revisions(vintages, gap = 1)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/get_revisions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate revisions from vintages — get_revisions","text":"vintages object class rjd3rev_vintages gap Integer. Gap consider vintages calculate revision. Default 1 means revisions calculated vintages consecutively.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/get_revisions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate revisions from vintages — get_revisions","text":"object class rjd3rev_revisions contains three different views revisions","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/get_revisions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate revisions from vintages — get_revisions","text":"","code":"df <- data.frame(rev_date = c(rep(\"2022-07-31\",4), rep(\"2022-08-31\",4),                             rep(\"2022-09-30\",4), rep(\"2022-10-31\",4),                             rep(\"2022-11-30\",4), rep(\"2022-12-31\",4),                             rep(\"2023-01-31\",4), rep(\"2023-02-28\",4)),                  time_period = c(rep(c(\"2022Q1\",\"2022Q2\",\"2022Q3\",\"2022Q4\"),8)),                  obs_values = c(.8,.2,NA,NA, .8,.1,NA,NA,                                 .7,.1,NA,NA, .7,.2,.5,NA,                                 .7,.2,.5,NA, .7,.3,.7,NA,                                 .7,.2,.7,.4, .7,.3,.7,.3)) vintages <- create_vintages(df, periodicity = 4) revisions <- get_revisions(vintages, gap = 1)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/orthogonallyModel1.html","id":null,"dir":"Reference","previous_headings":"","what":"Orthogonally Model 1 — orthogonallyModel1","title":"Orthogonally Model 1 — orthogonallyModel1","text":"Linear regression model R_v R_{v-1},...,R_{v-p}. (p=nrevs)","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/orthogonallyModel1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Orthogonally Model 1 — orthogonallyModel1","text":"","code":"orthogonallyModel1(revisions.view, nrevs = 1, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/orthogonallyModel1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Orthogonally Model 1 — orthogonallyModel1","text":"revisions.view mts object. Vertical diagonal view get_revisions() output nrevs Integer. Number lags consider. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/orthogonallyModel1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Orthogonally Model 1 — orthogonallyModel1","text":"","code":"## Simulated data df_long <- simulate_long(     n_period = 10L * 4L,     n_revision = 5L,     periodicity = 4L,     start_period = as.Date(\"2010-01-01\") )  ## Create vintage and test vintages <- create_vintages(df_long, periodicity = 4L) revisions <- get_revisions(vintages, gap = 1) orthogonallyModel1(revisions$diagonal_view) #>                             N         R2         F intercept.estimate #> [Release[3]]-[Release[2]]   6 0.03016567 0.1244157        -0.04145696 #> [Release[4]]-[Release[3]] NaN        NaN       NaN                NaN #> [Release[5]]-[Release[4]] NaN        NaN       NaN                NaN #>                           intercept.stderr intercept.pvalue x(1).estimate #> [Release[3]]-[Release[2]]         1.201465        0.9741274    -0.2289974 #> [Release[4]]-[Release[3]]              NaN              NaN           NaN #> [Release[5]]-[Release[4]]              NaN              NaN           NaN #>                           x(1).stderr x(1).pvalue   skewness  kurtosis #> [Release[3]]-[Release[2]]   0.6492215   0.7420956 -0.4712289 -1.115913 #> [Release[4]]-[Release[3]]         NaN         NaN        NaN       NaN #> [Release[5]]-[Release[4]]         NaN         NaN        NaN       NaN #>                           JarqueBera.value JarqueBera.pvalue BreuschPagan.R2 #> [Release[3]]-[Release[2]]        0.4444766         0.8007245        0.176979 #> [Release[4]]-[Release[3]]              NaN               NaN             NaN #> [Release[5]]-[Release[4]]              NaN               NaN             NaN #>                           BreuschPagan.value BreuschPagan.pvalue  White.R2 #> [Release[3]]-[Release[2]]          0.8601432           0.4061935 0.4753361 #> [Release[4]]-[Release[3]]                NaN                 NaN       NaN #> [Release[5]]-[Release[4]]                NaN                 NaN       NaN #>                           White.value White.pvalue     arch.R2 arch.value #> [Release[3]]-[Release[2]]    2.852017    0.2402661 0.005718509 0.02859254 #> [Release[4]]-[Release[3]]         NaN          NaN         NaN        NaN #> [Release[5]]-[Release[4]]         NaN          NaN         NaN        NaN #>                           arch.pvalue #> [Release[3]]-[Release[2]]   0.8657233 #> [Release[4]]-[Release[3]]         NaN #> [Release[5]]-[Release[4]]         NaN"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/orthogonallyModel2.html","id":null,"dir":"Reference","previous_headings":"","what":"Orthogonally Model 2 — orthogonallyModel2","title":"Orthogonally Model 2 — orthogonallyModel2","text":"Linear regression model R_v R_{v-k} (k = reference)","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/orthogonallyModel2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Orthogonally Model 2 — orthogonallyModel2","text":"","code":"orthogonallyModel2(revisions.view, reference = 1, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/orthogonallyModel2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Orthogonally Model 2 — orthogonallyModel2","text":"revisions.view mts object. Vertical diagonal view get_revisions() output reference Integer. Number lags consider. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/orthogonallyModel2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Orthogonally Model 2 — orthogonallyModel2","text":"","code":"## Simulated data df_long <- simulate_long(     n_period = 10L * 4L,     n_revision = 5L,     periodicity = 4L,     start_period = as.Date(\"2010-01-01\") )  ## Create vintage and test vintages <- create_vintages(df_long, periodicity = 4L) revisions <- get_revisions(vintages, gap = 1) orthogonallyModel2(revisions$diagonal_view) #>                            N          R2          F intercept.estimate #> [Release[3]]-[Release[2]] 22 0.077572806 1.68192799        -0.13897991 #> [Release[4]]-[Release[3]] 11 0.455470977 7.52804463        -0.05148318 #> [Release[5]]-[Release[4]]  9 0.008626986 0.06091441         0.12369108 #>                           intercept.stderr intercept.pvalue slope.estimate #> [Release[3]]-[Release[2]]        0.2508869        0.5857510    -0.18972044 #> [Release[4]]-[Release[3]]        0.1642145        0.7610360    -0.38615859 #> [Release[5]]-[Release[4]]        0.1268689        0.3620641     0.04818244 #>                           slope.stderr slope.pvalue    skewness   kurtosis #> [Release[3]]-[Release[2]]    0.1462886   0.20943158  0.03044126 -0.2406966 #> [Release[4]]-[Release[3]]    0.1407423   0.02270863 -0.65965982  0.3534168 #> [Release[5]]-[Release[4]]    0.1952220   0.81213825  0.94958814  0.2656221 #>                           JarqueBera.value JarqueBera.pvalue BreuschPagan.R2 #> [Release[3]]-[Release[2]]       0.05393635         0.9733922     0.004267726 #> [Release[4]]-[Release[3]]       0.77729488         0.6779733     0.006800812 #> [Release[5]]-[Release[4]]       1.22580856         0.5417751     0.287237269 #>                           BreuschPagan.value BreuschPagan.pvalue   White.R2 #> [Release[3]]-[Release[2]]         0.08572036           0.7727060 0.03048287 #> [Release[4]]-[Release[3]]         0.06162642           0.8095151 0.14220202 #> [Release[5]]-[Release[4]]         2.82093998           0.1369335 0.34810639 #>                           White.value White.pvalue     arch.R2 arch.value #> [Release[3]]-[Release[2]]   0.6706231    0.7151153 0.022126242 0.46465109 #> [Release[4]]-[Release[3]]   1.5642222    0.4574393 0.006867118 0.06867118 #> [Release[5]]-[Release[4]]   3.1329575    0.2087791 0.001806174 0.01444939 #>                           arch.pvalue #> [Release[3]]-[Release[2]]   0.4954583 #> [Release[4]]-[Release[3]]   0.7932815 #> [Release[5]]-[Release[4]]   0.9043203"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/plot.rjd3rev_revisions.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function for objects of class ","title":"Plot function for objects of class ","text":"Plot function objects class \"rjd3rev_revisions\"","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/plot.rjd3rev_revisions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function for objects of class ","text":"","code":"# S3 method for class 'rjd3rev_revisions' plot(x, view = c(\"vertical\", \"diagonal\"), n_rev = 2, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/plot.rjd3rev_revisions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function for objects of class ","text":"x object class \"rjd3rev_revisions\" view view plot. default, vertical view considered. n_rev number revision dates consider. vertical view, lasts n_rev revisions plotted. diagonal view, revisions first n_rev releases plotted. maximum number n_rev 5. ... arguments passed ts.plot().","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/plot.rjd3rev_vintages.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function for objects of class ","title":"Plot function for objects of class ","text":"Plot function objects class \"rjd3rev_vintages\"","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/plot.rjd3rev_vintages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function for objects of class ","text":"","code":"# S3 method for class 'rjd3rev_vintages' plot(x, col, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/plot.rjd3rev_vintages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function for objects of class ","text":"x object class \"rjd3rev_vintages\". col color vector length number releases ... arguments passed methods.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/print.rjd3rev_revisions.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function for objects of class ","title":"Print function for objects of class ","text":"Print function objects class \"rjd3rev_revisions\"","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/print.rjd3rev_revisions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function for objects of class ","text":"","code":"# S3 method for class 'rjd3rev_revisions' print(x, n_row = 12, n_col = 3, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/print.rjd3rev_revisions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function for objects of class ","text":"x object class \"rjd3rev_revisions\". n_row number last rows display. horizontal view, corresponds number columns. n_col number columns display. Can either last n columns (verical view), last n rows (horizontal view) first n columns (diagonal view). ... arguments passed print function.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/print.rjd3rev_rslts.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function for objects of class rjd3rev_rslts — print.rjd3rev_rslts","title":"Print function for objects of class rjd3rev_rslts — print.rjd3rev_rslts","text":"Print function objects class rjd3rev_rslts","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/print.rjd3rev_rslts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function for objects of class rjd3rev_rslts — print.rjd3rev_rslts","text":"","code":"# S3 method for class 'rjd3rev_rslts' print(x, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/print.rjd3rev_rslts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function for objects of class rjd3rev_rslts — print.rjd3rev_rslts","text":"x object class rjd3rev_rslts ... arguments passed print function.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/print.rjd3rev_vintages.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function for objects of class ","title":"Print function for objects of class ","text":"Print function objects class \"rjd3rev_vintages\"","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/print.rjd3rev_vintages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function for objects of class ","text":"","code":"# S3 method for class 'rjd3rev_vintages' print(x, n_row = 8, n_col = 3, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/print.rjd3rev_vintages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function for objects of class ","text":"x object class \"rjd3rev_vintages\". n_row number last rows display. horizontal view, corresponds number columns. n_col number columns display. Can either last n columns (verical view), last n rows (horizontal view) first n columns (diagonal view). argument used long view. ... arguments passed print function.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/render_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate report on Revision Analysis — render_report","title":"Generate report on Revision Analysis — render_report","text":"Generate report Revision Analysis","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/render_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate report on Revision Analysis — render_report","text":"","code":"render_report(   rslt,   output_file,   output_dir,   output_format = c(\"html_document\", \"pdf_document\", \"word_document\"),   plot_revisions = FALSE,   open_report = TRUE,   ... )"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/render_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate report on Revision Analysis — render_report","text":"rslt object class \"rjd3rev_rslts\" output function revision_analysis() output_file path name output file containing report output_dir path dir containing output file (Optional) output_format either HTML document (default), PDF document Word document plot_revisions Boolean. Default FALSE meaning plot revisions added report. open_report Boolean. Default TRUE meaning report open automatically generated. ... Arguments passed rmarkdown::render(), example: output_options List output options can override options specified metadata ...","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/render_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate report on Revision Analysis — render_report","text":"","code":"## Simulated data df_long <- simulate_long(     n_period = 10L * 4L,     n_revision = 5L,     periodicity = 4L,     start_period = as.Date(\"2010-01-01\") )  ## Make analysis and generate the report  vintages <- create_vintages(df_long, periodicity = 4L, type = \"long\") rslt <- revision_analysis(vintages, view = \"diagonal\")  if (FALSE) { # \\dontrun{ render_report(     rslt,     output_file = \"my_report\",     output_dir = \"C:/Users/xxx\",     output_format = \"pdf_document\",     plot_revisions = TRUE ) } # }"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/revision_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Revision analysis through a battery of tests — revision_analysis","title":"Revision analysis through a battery of tests — revision_analysis","text":"function perform parametric tests enable users detect potential bias (mean regression bias) sources inefficiency preliminary estimates. conclude inefficiency preliminary estimates revisions predictable way. results, parametric tests divided 5 categories: relevancy (check whether preliminary estimates even worth ), bias, efficiency, orthogonality (correlation higher lags), signalVSnoise. Descriptive statistics revisions also provided. parametric tests, prior transformation vintage data may important avoid misleading results. default, decision differentiate vintage data performed automatically based unit root co-integration tests whose results can found found results (section 'varbased'). Finally, running function render_report() output revision_analysis() give formatted summary results full explanations tests.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/revision_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Revision analysis through a battery of tests — revision_analysis","text":"","code":"revision_analysis(   vintages,   gap = 1,   view = c(\"vertical\", \"diagonal\"),   n.releases = 3,   transf.diff = c(\"auto\", \"forced\", \"none\"),   transf.log = FALSE,   descriptive.rounding = 3,   nrevs = 1,   ref = 1,   na.zero = FALSE )"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/revision_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Revision analysis through a battery of tests — revision_analysis","text":"vintages object class \"rjd3rev_vintages\" output function create_vintages() gap Integer. Gap consider vintages. Default 1 means revisions calculated tested vintages consecutively. view Selected view. Can \"vertical\" (default) \"diagonal\". Vertical view shows observed values time period different vintages. Diagonal view shows subsequent releases given time period, without regard date publication, can particularly informative regular estimation intervals exist. See ?create_vintages() information interests drawbacks view. n.releases used view = \"diagonal\". Ignored otherwise. Allow user limit number releases investigation). view = \"vertical\", user invited limit number vintages upstream parameter vintage_selection create_vintages() whenever necessary. transf.diff differentiation apply data prior testing. used regressions including vintage data regressor /regressand. Regression including revision data never differentiated even transf.diff = \"forced\". Options \"automatic\" (default), \"forced\" \"none\". transf.log Boolean whether log-transformation first applied data. Default FALSE. descriptive.rounding Integer. Number decimals display descriptive statistics. Default 3. nrevs, ref Integer. Number lags consider orthogonality tests 1 2 respectively. na.zero Boolean whether missing values considered 0 rather data yet available (default).","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/revision_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Revision analysis through a battery of tests — revision_analysis","text":"object class 'rjd3rev_rslts'","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/revision_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Revision analysis through a battery of tests — revision_analysis","text":"","code":"## Simulated data  df_long <- simulate_long(     n_period = 10L * 4L,     n_revision = 10L,     periodicity = 4L,     start_period = as.Date(\"2010-01-01\") )  ## Create a `\"rjd3rev_vintages\"` object with the input vintages <- create_vintages(x = df_long, periodicity = 4L, date_format = \"%Y-%m-%d\") # revisions <- get_revisions(vintages, gap = 1L) # just to get a first insight of the revisions  ## Call using all default parameters rslt1 <- revision_analysis(vintages) #> Warning: Slope and drift could not be performed #> Warning: efficiencyModel1 could not be performed # render_report(rslt1, output_file = \"report1\", output_dir = \"C:/Users/xxx\") summary(rslt1) # formatted summary only #> Object of class rjd3rev_rslts #> View: vertical  #> There are 9 from 2010 1 to 2019 4  #>  #> List of all tests: #> - summary.residuals : #> \t- slope_and_drift #> \t- efficiency1 #> \t- efficiency2 #> \t- orthogonality1 #> \t- orthogonality2 #> - relevancy : #> \t- theil #> - bias : #> \t- t_ta_test #> \t- slope_and_drift #> - efficiency : #> \t- efficiency1 #> \t- efficiency2 #> - orthogonality : #> \t- orthogonality1 #> \t- orthogonality2 #> \t- autocorrelation_test #> \t- seasonality_test #> - signalnoise : #> \t- signal_noise #> - varbased : #> \t- unit_root_test #> \t- cointegration_test #> \t- vecm #>  #> Revisions analysis dates:  #> \t- [1]: [2010-11-17]-[2010-07-08]  #> \t- [2]: [2013-06-04]-[2010-11-17]  #> \t- [3]: [2015-11-10]-[2013-06-04]  #> \t- [4]: [2016-03-25]-[2015-11-10]  #> \t- [5]: [2017-06-29]-[2016-03-25]  #> \t- [6]: [2017-09-10]-[2017-06-29]  #> \t- [7]: [2018-10-26]-[2017-09-10]  #> \t- [8]: [2019-07-13]-[2018-10-26]  #> \t- [9]: [2020-02-27]-[2019-07-13]  #>  #> Tests results: #>                                            Transf. [2010-11-17]-[2010-07-08] #> Relevancy - Theil U2                          None              Good (0.112) #> Bias1 T-test                                  None              Good (0.218) #> Bias2 Augmented T-test                        None              Good (0.156) #> Bias3 SlopeAndDrift (Ols L on P) - Mean       None                      <NA> #> Bias3 SlopeAndDrift (Ols L on P) - Reg.       None                      <NA> #> Efficiency1 (Ols R on P) - Mean            Delta 1                      <NA> #> Efficiency1 (Ols R on P) - Reg.            Delta 1                      <NA> #> Efficiency2 (Ols Rv on Rv_1) - Mean           None                           #> Efficiency2 (Ols Rv on Rv_1) - Reg.           None                           #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean    None                           #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.    None                           #> Orthogonality2 (Ols Rv on Rv_k.) - Mean       None                           #> Orthogonality2 (Ols Rv on Rv_k) - Reg.        None                           #> Orthogonality3 AutoCorrelation (Ljung-Box)    None                      <NA> #> Orthogonality4 Seasonality (Ljung-Box)     Delta 1              Good (1.000) #> Orthogonality4 Seasonality (Friedman)      Delta 1                      <NA> #> SignalVsNoise1 - Noise (Ols R on P)        Delta 1                Good (NaN) #> SignalVsNoise2 - Signal (Ols R on L)       Delta 1                Good (NaN) #>                                            [2013-06-04]-[2010-11-17] #> Relevancy - Theil U2                                    Good (0.312) #> Bias1 T-test                                            Good (0.933) #> Bias2 Augmented T-test                                  Good (0.870) #> Bias3 SlopeAndDrift (Ols L on P) - Mean                         <NA> #> Bias3 SlopeAndDrift (Ols L on P) - Reg.                         <NA> #> Efficiency1 (Ols R on P) - Mean                                 <NA> #> Efficiency1 (Ols R on P) - Reg.                                 <NA> #> Efficiency2 (Ols Rv on Rv_1) - Mean                       Good (NaN) #> Efficiency2 (Ols Rv on Rv_1) - Reg.                       Good (NaN) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean                Good (NaN) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.                Good (NaN) #> Orthogonality2 (Ols Rv on Rv_k.) - Mean                   Good (NaN) #> Orthogonality2 (Ols Rv on Rv_k) - Reg.                    Good (NaN) #> Orthogonality3 AutoCorrelation (Ljung-Box)                      <NA> #> Orthogonality4 Seasonality (Ljung-Box)                  Good (1.000) #> Orthogonality4 Seasonality (Friedman)                           <NA> #> SignalVsNoise1 - Noise (Ols R on P)                     Good (0.488) #> SignalVsNoise2 - Signal (Ols R on L)               Uncertain (0.754) #>                                            [2015-11-10]-[2013-06-04] #> Relevancy - Theil U2                                  Severe (1.018) #> Bias1 T-test                                            Good (0.844) #> Bias2 Augmented T-test                                  Good (0.787) #> Bias3 SlopeAndDrift (Ols L on P) - Mean                         <NA> #> Bias3 SlopeAndDrift (Ols L on P) - Reg.                         <NA> #> Efficiency1 (Ols R on P) - Mean                                 <NA> #> Efficiency1 (Ols R on P) - Reg.                                 <NA> #> Efficiency2 (Ols Rv on Rv_1) - Mean                     Good (0.680) #> Efficiency2 (Ols Rv on Rv_1) - Reg.                     Good (0.903) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean              Good (0.680) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.              Good (0.097) #> Orthogonality2 (Ols Rv on Rv_k.) - Mean                 Good (0.680) #> Orthogonality2 (Ols Rv on Rv_k) - Reg.                  Good (0.903) #> Orthogonality3 AutoCorrelation (Ljung-Box)                      <NA> #> Orthogonality4 Seasonality (Ljung-Box)             Uncertain (0.032) #> Orthogonality4 Seasonality (Friedman)                           <NA> #> SignalVsNoise1 - Noise (Ols R on P)                Uncertain (0.038) #> SignalVsNoise2 - Signal (Ols R on L)               Uncertain (0.961) #>                                            [2016-03-25]-[2015-11-10] #> Relevancy - Theil U2                                    Good (0.421) #> Bias1 T-test                                            Good (0.395) #> Bias2 Augmented T-test                                  Good (0.243) #> Bias3 SlopeAndDrift (Ols L on P) - Mean                         <NA> #> Bias3 SlopeAndDrift (Ols L on P) - Reg.                         <NA> #> Efficiency1 (Ols R on P) - Mean                                 <NA> #> Efficiency1 (Ols R on P) - Reg.                                 <NA> #> Efficiency2 (Ols Rv on Rv_1) - Mean                     Good (0.536) #> Efficiency2 (Ols Rv on Rv_1) - Reg.                     Good (0.053) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean              Good (0.536) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.              Good (0.947) #> Orthogonality2 (Ols Rv on Rv_k.) - Mean                 Good (0.536) #> Orthogonality2 (Ols Rv on Rv_k) - Reg.                  Good (0.053) #> Orthogonality3 AutoCorrelation (Ljung-Box)                      <NA> #> Orthogonality4 Seasonality (Ljung-Box)                  Good (0.598) #> Orthogonality4 Seasonality (Friedman)                           <NA> #> SignalVsNoise1 - Noise (Ols R on P)                     Good (0.619) #> SignalVsNoise2 - Signal (Ols R on L)                    Good (0.003) #>                                            [2017-06-29]-[2016-03-25] #> Relevancy - Theil U2                                    Good (0.202) #> Bias1 T-test                                            Good (0.798) #> Bias2 Augmented T-test                                  Good (0.724) #> Bias3 SlopeAndDrift (Ols L on P) - Mean                         <NA> #> Bias3 SlopeAndDrift (Ols L on P) - Reg.                         <NA> #> Efficiency1 (Ols R on P) - Mean                                 <NA> #> Efficiency1 (Ols R on P) - Reg.                                 <NA> #> Efficiency2 (Ols Rv on Rv_1) - Mean                     Good (0.799) #> Efficiency2 (Ols Rv on Rv_1) - Reg.                     Good (0.087) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean              Good (0.799) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.              Good (0.913) #> Orthogonality2 (Ols Rv on Rv_k.) - Mean                 Good (0.799) #> Orthogonality2 (Ols Rv on Rv_k) - Reg.                  Good (0.087) #> Orthogonality3 AutoCorrelation (Ljung-Box)                      <NA> #> Orthogonality4 Seasonality (Ljung-Box)                  Good (0.898) #> Orthogonality4 Seasonality (Friedman)                           <NA> #> SignalVsNoise1 - Noise (Ols R on P)                      Bad (0.002) #> SignalVsNoise2 - Signal (Ols R on L)                    Good (0.038) #>                                            [2017-09-10]-[2017-06-29] #> Relevancy - Theil U2                                    Good (0.115) #> Bias1 T-test                                            Good (0.360) #> Bias2 Augmented T-test                                  Good (0.374) #> Bias3 SlopeAndDrift (Ols L on P) - Mean                         <NA> #> Bias3 SlopeAndDrift (Ols L on P) - Reg.                         <NA> #> Efficiency1 (Ols R on P) - Mean                                 <NA> #> Efficiency1 (Ols R on P) - Reg.                                 <NA> #> Efficiency2 (Ols Rv on Rv_1) - Mean                     Good (0.452) #> Efficiency2 (Ols Rv on Rv_1) - Reg.                     Good (0.426) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean              Good (0.452) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.              Good (0.574) #> Orthogonality2 (Ols Rv on Rv_k.) - Mean                 Good (0.452) #> Orthogonality2 (Ols Rv on Rv_k) - Reg.                  Good (0.426) #> Orthogonality3 AutoCorrelation (Ljung-Box)                      <NA> #> Orthogonality4 Seasonality (Ljung-Box)                  Good (0.880) #> Orthogonality4 Seasonality (Friedman)                           <NA> #> SignalVsNoise1 - Noise (Ols R on P)                     Good (0.699) #> SignalVsNoise2 - Signal (Ols R on L)               Uncertain (0.820) #>                                            [2018-10-26]-[2017-09-10] #> Relevancy - Theil U2                                    Good (0.127) #> Bias1 T-test                                            Good (0.298) #> Bias2 Augmented T-test                                  Good (0.171) #> Bias3 SlopeAndDrift (Ols L on P) - Mean                         <NA> #> Bias3 SlopeAndDrift (Ols L on P) - Reg.                         <NA> #> Efficiency1 (Ols R on P) - Mean                                 <NA> #> Efficiency1 (Ols R on P) - Reg.                                 <NA> #> Efficiency2 (Ols Rv on Rv_1) - Mean                     Good (0.758) #> Efficiency2 (Ols Rv on Rv_1) - Reg.                      Bad (0.001) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean              Good (0.758) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.              Good (0.999) #> Orthogonality2 (Ols Rv on Rv_k.) - Mean                 Good (0.758) #> Orthogonality2 (Ols Rv on Rv_k) - Reg.                   Bad (0.001) #> Orthogonality3 AutoCorrelation (Ljung-Box)                      <NA> #> Orthogonality4 Seasonality (Ljung-Box)                  Good (0.966) #> Orthogonality4 Seasonality (Friedman)                           <NA> #> SignalVsNoise1 - Noise (Ols R on P)                Uncertain (0.012) #> SignalVsNoise2 - Signal (Ols R on L)               Uncertain (0.244) #>                                            [2019-07-13]-[2018-10-26] #> Relevancy - Theil U2                                    Good (0.091) #> Bias1 T-test                                            Good (0.833) #> Bias2 Augmented T-test                                  Good (0.847) #> Bias3 SlopeAndDrift (Ols L on P) - Mean                         <NA> #> Bias3 SlopeAndDrift (Ols L on P) - Reg.                         <NA> #> Efficiency1 (Ols R on P) - Mean                                 <NA> #> Efficiency1 (Ols R on P) - Reg.                                 <NA> #> Efficiency2 (Ols Rv on Rv_1) - Mean                     Good (0.720) #> Efficiency2 (Ols Rv on Rv_1) - Reg.                   Severe (0.000) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean              Good (0.720) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.              Good (1.000) #> Orthogonality2 (Ols Rv on Rv_k.) - Mean                 Good (0.720) #> Orthogonality2 (Ols Rv on Rv_k) - Reg.                Severe (0.000) #> Orthogonality3 AutoCorrelation (Ljung-Box)                      <NA> #> Orthogonality4 Seasonality (Ljung-Box)                  Good (0.057) #> Orthogonality4 Seasonality (Friedman)                           <NA> #> SignalVsNoise1 - Noise (Ols R on P)                     Good (0.169) #> SignalVsNoise2 - Signal (Ols R on L)                    Good (0.021) #>                                            [2020-02-27]-[2019-07-13] #> Relevancy - Theil U2                                    Good (0.048) #> Bias1 T-test                                            Good (0.664) #> Bias2 Augmented T-test                                  Good (0.419) #> Bias3 SlopeAndDrift (Ols L on P) - Mean                         <NA> #> Bias3 SlopeAndDrift (Ols L on P) - Reg.                         <NA> #> Efficiency1 (Ols R on P) - Mean                                 <NA> #> Efficiency1 (Ols R on P) - Reg.                                 <NA> #> Efficiency2 (Ols Rv on Rv_1) - Mean                     Good (0.380) #> Efficiency2 (Ols Rv on Rv_1) - Reg.                     Good (0.446) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean              Good (0.380) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.              Good (0.554) #> Orthogonality2 (Ols Rv on Rv_k.) - Mean                 Good (0.380) #> Orthogonality2 (Ols Rv on Rv_k) - Reg.                  Good (0.446) #> Orthogonality3 AutoCorrelation (Ljung-Box)                      <NA> #> Orthogonality4 Seasonality (Ljung-Box)                  Good (0.938) #> Orthogonality4 Seasonality (Friedman)                           <NA> #> SignalVsNoise1 - Noise (Ols R on P)                     Good (0.299) #> SignalVsNoise2 - Signal (Ols R on L)               Uncertain (0.991) View(rslt1) # formatted tables in viewer panel  ## Calls using diagonal view (suited in many situations such as to evaluate GDP estimates) ## Note: when input are not growth rates but the gross series, differentiation is ## performed automatically (if transf.diff is let to its default option) but `transf.log` ## must be set to TRUE manually whenever a log-transformation of the data is necessary rslt2 <- revision_analysis(vintages, gap = 1, view = \"diagonal\", n.releases = 3) # render_report(rslt2, output_file = \"report2\", output_dir = \"C:/Users/xxx\", #               output_format = \"word_document\", plot_revisions = TRUE) summary(rslt2) #> Object of class rjd3rev_rslts #> View: diagonal  #> There are 2 from 2010 1 to 2019 4  #>  #> List of all tests: #> - summary.residuals : #> \t- slope_and_drift #> \t- efficiency1 #> \t- efficiency2 #> \t- orthogonality1 #> \t- orthogonality2 #> - relevancy : #> \t- theil #> - bias : #> \t- t_ta_test #> \t- slope_and_drift #> - efficiency : #> \t- efficiency1 #> \t- efficiency2 #> - orthogonality : #> \t- orthogonality1 #> \t- orthogonality2 #> \t- autocorrelation_test #> \t- seasonality_test #> - signalnoise : #> \t- signal_noise #> - varbased : #> \t- unit_root_test #> \t- cointegration_test #> \t- vecm #>  #> Revisions analysis dates:  #> \t- [1]: [Release[2]]-[Release[1]]  #> \t- [2]: [Release[3]]-[Release[2]]  #>  #> Tests results: #>                                            Transf. [Release[2]]-[Release[1]] #> Relevancy - Theil U2                          None              Good (0.141) #> Bias1 T-test                                  None              Good (0.878) #> Bias2 Augmented T-test                        None              Good (0.845) #> Bias3 SlopeAndDrift (Ols L on P) - Mean       None              Good (0.953) #> Bias3 SlopeAndDrift (Ols L on P) - Reg.       None              Good (0.806) #> Efficiency1 (Ols R on P) - Mean            Delta 1              Good (0.883) #> Efficiency1 (Ols R on P) - Reg.            Delta 1              Good (0.395) #> Efficiency2 (Ols Rv on Rv_1) - Mean           None                           #> Efficiency2 (Ols Rv on Rv_1) - Reg.           None                           #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean    None                           #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.    None                           #> Orthogonality2 (Ols Rv on Rv_k.) - Mean       None                           #> Orthogonality2 (Ols Rv on Rv_k) - Reg.        None                           #> Orthogonality3 AutoCorrelation (Ljung-Box)    None              Good (0.214) #> Orthogonality4 Seasonality (Ljung-Box)     Delta 1            Severe (0.001) #> Orthogonality4 Seasonality (Friedman)      Delta 1         Uncertain (0.033) #> SignalVsNoise1 - Noise (Ols R on P)        Delta 1              Good (0.472) #> SignalVsNoise2 - Signal (Ols R on L)       Delta 1              Good (0.039) #>                                            [Release[3]]-[Release[2]] #> Relevancy - Theil U2                                    Good (0.432) #> Bias1 T-test                                            Good (0.737) #> Bias2 Augmented T-test                                  Good (0.602) #> Bias3 SlopeAndDrift (Ols L on P) - Mean                 Good (0.404) #> Bias3 SlopeAndDrift (Ols L on P) - Reg.                 Good (0.137) #> Efficiency1 (Ols R on P) - Mean                         Good (0.955) #> Efficiency1 (Ols R on P) - Reg.                          Bad (0.005) #> Efficiency2 (Ols Rv on Rv_1) - Mean                     Good (0.742) #> Efficiency2 (Ols Rv on Rv_1) - Reg.                      Bad (0.009) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean              Good (0.742) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.              Good (0.991) #> Orthogonality2 (Ols Rv on Rv_k.) - Mean                 Good (0.742) #> Orthogonality2 (Ols Rv on Rv_k) - Reg.                   Bad (0.009) #> Orthogonality3 AutoCorrelation (Ljung-Box)         Uncertain (0.040) #> Orthogonality4 Seasonality (Ljung-Box)                  Good (0.220) #> Orthogonality4 Seasonality (Friedman)              Uncertain (0.041) #> SignalVsNoise1 - Noise (Ols R on P)                      Bad (0.002) #> SignalVsNoise2 - Signal (Ols R on L)               Uncertain (0.922) View(rslt2)  ## Call to evaluate revisions for a specific range of vintage periods vintages <- create_vintages(     x = df_long,     periodicity = 4L,     vintage_selection = c(start = \"2012-12-31\", end = \"2018-06-30\") ) rslt3 <- revision_analysis(vintages, gap = 2, view = \"vertical\") #render_report(rslt3, output_file = \"report2\", output_dir = \"C:/Users/xxx\", plot_revisions = TRUE) summary(rslt3) #> Object of class rjd3rev_rslts #> View: vertical  #> There are 3 from 2010 1 to 2019 4  #>  #> List of all tests: #> - summary.residuals : #> \t- slope_and_drift #> \t- efficiency1 #> \t- efficiency2 #> \t- orthogonality1 #> \t- orthogonality2 #> - relevancy : #> \t- theil #> - bias : #> \t- t_ta_test #> \t- slope_and_drift #> - efficiency : #> \t- efficiency1 #> \t- efficiency2 #> - orthogonality : #> \t- orthogonality1 #> \t- orthogonality2 #> \t- autocorrelation_test #> \t- seasonality_test #> - signalnoise : #> \t- signal_noise #> - varbased : #> \t- unit_root_test #> \t- cointegration_test #> \t- vecm #>  #> Revisions analysis dates:  #> \t- [1]: [2016-03-25]-[2013-06-04]  #> \t- [2]: [2017-06-29]-[2015-11-10]  #> \t- [3]: [2017-09-10]-[2016-03-25]  #>  #> Tests results: #>                                            Transf. [2016-03-25]-[2013-06-04] #> Relevancy - Theil U2                          None              Good (0.234) #> Bias1 T-test                                  None              Good (0.694) #> Bias2 Augmented T-test                        None              Good (0.696) #> Bias3 SlopeAndDrift (Ols L on P) - Mean       None              Good (0.522) #> Bias3 SlopeAndDrift (Ols L on P) - Reg.       None              Good (0.291) #> Efficiency1 (Ols R on P) - Mean            Delta 1              Good (0.579) #> Efficiency1 (Ols R on P) - Reg.            Delta 1              Good (0.173) #> Efficiency2 (Ols Rv on Rv_1) - Mean           None                           #> Efficiency2 (Ols Rv on Rv_1) - Reg.           None                           #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean    None                           #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.    None                           #> Orthogonality2 (Ols Rv on Rv_k.) - Mean       None                           #> Orthogonality2 (Ols Rv on Rv_k) - Reg.        None                           #> Orthogonality3 AutoCorrelation (Ljung-Box)    None              Good (0.189) #> Orthogonality4 Seasonality (Ljung-Box)     Delta 1              Good (0.630) #> Orthogonality4 Seasonality (Friedman)      Delta 1              Good (0.122) #> SignalVsNoise1 - Noise (Ols R on P)        Delta 1              Good (0.169) #> SignalVsNoise2 - Signal (Ols R on L)       Delta 1         Uncertain (0.989) #>                                            [2017-06-29]-[2015-11-10] #> Relevancy - Theil U2                                    Good (0.369) #> Bias1 T-test                                            Good (0.560) #> Bias2 Augmented T-test                                  Good (0.497) #> Bias3 SlopeAndDrift (Ols L on P) - Mean                 Good (0.673) #> Bias3 SlopeAndDrift (Ols L on P) - Reg.                 Good (0.949) #> Efficiency1 (Ols R on P) - Mean                         Good (0.942) #> Efficiency1 (Ols R on P) - Reg.                         Good (0.577) #> Efficiency2 (Ols Rv on Rv_1) - Mean                     Good (0.518) #> Efficiency2 (Ols Rv on Rv_1) - Reg.                     Good (0.231) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean              Good (0.518) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.              Good (0.769) #> Orthogonality2 (Ols Rv on Rv_k.) - Mean                 Good (0.518) #> Orthogonality2 (Ols Rv on Rv_k) - Reg.                  Good (0.231) #> Orthogonality3 AutoCorrelation (Ljung-Box)              Good (0.131) #> Orthogonality4 Seasonality (Ljung-Box)                  Good (0.701) #> Orthogonality4 Seasonality (Friedman)                   Good (0.118) #> SignalVsNoise1 - Noise (Ols R on P)                     Good (0.712) #> SignalVsNoise2 - Signal (Ols R on L)               Uncertain (0.065) #>                                            [2017-09-10]-[2016-03-25] #> Relevancy - Theil U2                                    Good (0.214) #> Bias1 T-test                                            Good (0.847) #> Bias2 Augmented T-test                                  Good (0.759) #> Bias3 SlopeAndDrift (Ols L on P) - Mean                 Good (0.338) #> Bias3 SlopeAndDrift (Ols L on P) - Reg.                 Good (0.173) #> Efficiency1 (Ols R on P) - Mean                         Good (0.657) #> Efficiency1 (Ols R on P) - Reg.                          Bad (0.003) #> Efficiency2 (Ols Rv on Rv_1) - Mean                     Good (0.987) #> Efficiency2 (Ols Rv on Rv_1) - Reg.                     Good (0.698) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean              Good (0.987) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.              Good (0.302) #> Orthogonality2 (Ols Rv on Rv_k.) - Mean                 Good (0.987) #> Orthogonality2 (Ols Rv on Rv_k) - Reg.                  Good (0.698) #> Orthogonality3 AutoCorrelation (Ljung-Box)              Good (0.062) #> Orthogonality4 Seasonality (Ljung-Box)                  Good (0.576) #> Orthogonality4 Seasonality (Friedman)                   Good (0.706) #> SignalVsNoise1 - Noise (Ols R on P)                      Bad (0.002) #> SignalVsNoise2 - Signal (Ols R on L)               Uncertain (0.083) View(rslt3)  ## Note that it is possible to change thresholds values for quality ## assessment using options (see vignette for details) options(     augmented_t_threshold = c(severe = 0.005, bad = 0.01, uncertain = 0.05),     slope_and_drift_threshold = c(severe = 0.005, bad = 0.05, uncertain = 0.10),     theil_u2_threshold = c(uncertain = .5, bad = .7, severe = 1) ) rslt4 <- revision_analysis(vintages, gap = 1, view = \"diagonal\", n.releases = 3) summary(rslt4) #> Object of class rjd3rev_rslts #> View: diagonal  #> There are 2 from 2010 1 to 2019 4  #>  #> List of all tests: #> - summary.residuals : #> \t- slope_and_drift #> \t- efficiency1 #> \t- efficiency2 #> \t- orthogonality1 #> \t- orthogonality2 #> - relevancy : #> \t- theil #> - bias : #> \t- t_ta_test #> \t- slope_and_drift #> - efficiency : #> \t- efficiency1 #> \t- efficiency2 #> - orthogonality : #> \t- orthogonality1 #> \t- orthogonality2 #> \t- autocorrelation_test #> \t- seasonality_test #> - signalnoise : #> \t- signal_noise #> - varbased : #> \t- unit_root_test #> \t- cointegration_test #> \t- vecm #>  #> Revisions analysis dates:  #> \t- [1]: [Release[2]]-[Release[1]]  #> \t- [2]: [Release[3]]-[Release[2]]  #>  #> Tests results: #>                                            Transf. [Release[2]]-[Release[1]] #> Relevancy - Theil U2                          None              Good (0.311) #> Bias1 T-test                                  None              Good (0.615) #> Bias2 Augmented T-test                        None              Good (0.484) #> Bias3 SlopeAndDrift (Ols L on P) - Mean       None              Good (0.373) #> Bias3 SlopeAndDrift (Ols L on P) - Reg.       None              Good (0.360) #> Efficiency1 (Ols R on P) - Mean            Delta 1              Good (0.915) #> Efficiency1 (Ols R on P) - Reg.            Delta 1              Good (0.336) #> Efficiency2 (Ols Rv on Rv_1) - Mean           None                           #> Efficiency2 (Ols Rv on Rv_1) - Reg.           None                           #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean    None                           #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.    None                           #> Orthogonality2 (Ols Rv on Rv_k.) - Mean       None                           #> Orthogonality2 (Ols Rv on Rv_k) - Reg.        None                           #> Orthogonality3 AutoCorrelation (Ljung-Box)    None              Good (0.115) #> Orthogonality4 Seasonality (Ljung-Box)     Delta 1            Severe (0.000) #> Orthogonality4 Seasonality (Friedman)      Delta 1               Bad (0.006) #> SignalVsNoise1 - Noise (Ols R on P)        Delta 1              Good (0.383) #> SignalVsNoise2 - Signal (Ols R on L)       Delta 1         Uncertain (0.066) #>                                            [Release[3]]-[Release[2]] #> Relevancy - Theil U2                                    Good (0.429) #> Bias1 T-test                                            Good (0.902) #> Bias2 Augmented T-test                                  Good (0.867) #> Bias3 SlopeAndDrift (Ols L on P) - Mean                 Good (0.575) #> Bias3 SlopeAndDrift (Ols L on P) - Reg.                 Good (0.427) #> Efficiency1 (Ols R on P) - Mean                         Good (0.862) #> Efficiency1 (Ols R on P) - Reg.                         Good (0.086) #> Efficiency2 (Ols Rv on Rv_1) - Mean                     Good (0.743) #> Efficiency2 (Ols Rv on Rv_1) - Reg.                Uncertain (0.015) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean              Good (0.743) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.              Good (0.985) #> Orthogonality2 (Ols Rv on Rv_k.) - Mean                 Good (0.743) #> Orthogonality2 (Ols Rv on Rv_k) - Reg.             Uncertain (0.015) #> Orthogonality3 AutoCorrelation (Ljung-Box)              Good (0.262) #> Orthogonality4 Seasonality (Ljung-Box)                   Bad (0.001) #> Orthogonality4 Seasonality (Friedman)                    Bad (0.004) #> SignalVsNoise1 - Noise (Ols R on P)                     Good (0.066) #> SignalVsNoise2 - Signal (Ols R on L)               Uncertain (0.931) View(rslt4)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/rjd3revisions-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rjd3revisions: Revision analysis with 'JDemetra+ 3.x' — rjd3revisions-package","title":"rjd3revisions: Revision analysis with 'JDemetra+ 3.x' — rjd3revisions-package","text":"Revision analysis tool part 'JDemetra+ 3.x' (https://github.com/jdemetra) time series analysis software. performs battery tests revisions submit report results. various tests enable users detect potential bias sources inefficiency preliminary estimates.","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/rjd3revisions-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rjd3revisions: Revision analysis with 'JDemetra+ 3.x' — rjd3revisions-package","text":"Maintainer: Corentin Lemasson corentin.lemasson@nbb.Authors: Tanguy Barthelemy tanguy.barthelemy@insee.fr [artist]","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/set_all_thresholds_to_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Set all test thresholds to their default values — set_all_thresholds_to_default","title":"Set all test thresholds to their default values — set_all_thresholds_to_default","text":"Set test thresholds default values","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/set_all_thresholds_to_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set all test thresholds to their default values — set_all_thresholds_to_default","text":"","code":"set_all_thresholds_to_default(diagnostic_tests = TRUE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/set_all_thresholds_to_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set all test thresholds to their default values — set_all_thresholds_to_default","text":"diagnostic_tests Boolean. Whether reset thresholds diagnostics tests residuals well addition parametric tests.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/set_all_thresholds_to_default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set all test thresholds to their default values — set_all_thresholds_to_default","text":"","code":"set_all_thresholds_to_default()"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/set_thresholds_to_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Set thresholds of a given test to their default values — set_thresholds_to_default","title":"Set thresholds of a given test to their default values — set_thresholds_to_default","text":"Set thresholds given test default values","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/set_thresholds_to_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set thresholds of a given test to their default values — set_thresholds_to_default","text":"","code":"set_thresholds_to_default(threshold_option_name)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/set_thresholds_to_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set thresholds of a given test to their default values — set_thresholds_to_default","text":"threshold_option_name Boolean. Whether reset thresholds diagnostics tests residuals well addition parametric tests.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/set_thresholds_to_default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set thresholds of a given test to their default values — set_thresholds_to_default","text":"","code":"set_thresholds_to_default(\"t_threshold\")"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/signalnoise.html","id":null,"dir":"Reference","previous_headings":"","what":"Signal VS Noise — signalnoise","title":"Signal VS Noise — signalnoise","text":"Linear regression models determine whether revisions ‘news’ ‘noise’. 'noise': R (revisions) P (preliminary estimate). 'news': R L (latter estimate).","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/signalnoise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Signal VS Noise — signalnoise","text":"","code":"signalnoise(vintages.view, gap = 1, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/signalnoise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Signal VS Noise — signalnoise","text":"vintages.view mts object. Vertical diagonal view create_vintages() output gap Integer. Gap consider vintages. Default 1 means revisions calculated tested vintages consecutively. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/signalnoise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Signal VS Noise — signalnoise","text":"","code":"## Simulated data df_long <- simulate_long(     n_period = 10L * 4L,     n_revision = 5L,     periodicity = 4L,     start_period = as.Date(\"2010-01-01\") )  ## Create vintage and test vintages <- create_vintages(df_long, periodicity = 4L) signalnoise(vintages$diagonal_view) #>                                News.R2       News.F News.pvalue    Noise.R2 #> [Release[2]]-[Release[1]] 0.1373948199 1.7861326593   0.2129418 0.018047761 #> [Release[3]]-[Release[2]] 0.1121612211 1.0094509899   0.4119128 0.264674229 #> [Release[4]]-[Release[3]] 0.0002076233 0.0008304932   0.9991702 0.000964064 #> [Release[5]]-[Release[4]]          NaN          NaN         NaN         NaN #>                               Noise.F Noise.pvalue #> [Release[2]]-[Release[1]] 0.234620887    0.7947287 #> [Release[3]]-[Release[2]] 2.382068061    0.1625111 #> [Release[4]]-[Release[3]] 0.003856256    0.9961586 #> [Release[5]]-[Release[4]]         NaN          NaN"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/simulate_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate long datasets with revisions — simulate_long","title":"Simulate long datasets with revisions — simulate_long","text":"Simulate long datasets revisions","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/simulate_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate long datasets with revisions — simulate_long","text":"","code":"simulate_long(   n_period = 50,   n_revision = 10,   start_period = as.Date(\"2012-01-01\"),   periodicity = 12L )"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/simulate_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate long datasets with revisions — simulate_long","text":"n_period Integer. Number different time-period (length simulated series). n_revision Integer. Number different revision dates. start_period Date. Start series. periodicity Integer. Periodicity time period (12, 4 1 resp. monthly, quarterly annual data).","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/simulate_long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate long datasets with revisions — simulate_long","text":"dataset long format. See create_vintages information different data formats.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/simulate_long.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate long datasets with revisions — simulate_long","text":"","code":"simulate_long(n_period = 100L, n_revision = 10L) #>        rev_date time_period obs_values #> 1    2012-09-15  2012-01-01   9.322728 #> 2    2012-09-15  2012-02-01  10.663814 #> 3    2012-09-15  2012-03-01  14.072129 #> 4    2012-09-15  2012-04-01  12.806514 #> 5    2012-09-15  2012-05-01  21.305775 #> 6    2012-09-15  2012-06-01  20.022036 #> 7    2012-09-15  2012-07-01  17.210000 #> 8    2012-09-15  2012-08-01  16.639498 #> 9    2012-09-15  2012-09-01  17.581204 #> 10   2012-09-15  2012-10-01         NA #> 11   2012-09-15  2012-11-01         NA #> 12   2012-09-15  2012-12-01         NA #> 13   2012-09-15  2013-01-01         NA #> 14   2012-09-15  2013-02-01         NA #> 15   2012-09-15  2013-03-01         NA #> 16   2012-09-15  2013-04-01         NA #> 17   2012-09-15  2013-05-01         NA #> 18   2012-09-15  2013-06-01         NA #> 19   2012-09-15  2013-07-01         NA #> 20   2012-09-15  2013-08-01         NA #> 21   2012-09-15  2013-09-01         NA #> 22   2012-09-15  2013-10-01         NA #> 23   2012-09-15  2013-11-01         NA #> 24   2012-09-15  2013-12-01         NA #> 25   2012-09-15  2014-01-01         NA #> 26   2012-09-15  2014-02-01         NA #> 27   2012-09-15  2014-03-01         NA #> 28   2012-09-15  2014-04-01         NA #> 29   2012-09-15  2014-05-01         NA #> 30   2012-09-15  2014-06-01         NA #> 31   2012-09-15  2014-07-01         NA #> 32   2012-09-15  2014-08-01         NA #> 33   2012-09-15  2014-09-01         NA #> 34   2012-09-15  2014-10-01         NA #> 35   2012-09-15  2014-11-01         NA #> 36   2012-09-15  2014-12-01         NA #> 37   2012-09-15  2015-01-01         NA #> 38   2012-09-15  2015-02-01         NA #> 39   2012-09-15  2015-03-01         NA #> 40   2012-09-15  2015-04-01         NA #> 41   2012-09-15  2015-05-01         NA #> 42   2012-09-15  2015-06-01         NA #> 43   2012-09-15  2015-07-01         NA #> 44   2012-09-15  2015-08-01         NA #> 45   2012-09-15  2015-09-01         NA #> 46   2012-09-15  2015-10-01         NA #> 47   2012-09-15  2015-11-01         NA #> 48   2012-09-15  2015-12-01         NA #> 49   2012-09-15  2016-01-01         NA #> 50   2012-09-15  2016-02-01         NA #> 51   2012-09-15  2016-03-01         NA #> 52   2012-09-15  2016-04-01         NA #> 53   2012-09-15  2016-05-01         NA #> 54   2012-09-15  2016-06-01         NA #> 55   2012-09-15  2016-07-01         NA #> 56   2012-09-15  2016-08-01         NA #> 57   2012-09-15  2016-09-01         NA #> 58   2012-09-15  2016-10-01         NA #> 59   2012-09-15  2016-11-01         NA #> 60   2012-09-15  2016-12-01         NA #> 61   2012-09-15  2017-01-01         NA #> 62   2012-09-15  2017-02-01         NA #> 63   2012-09-15  2017-03-01         NA #> 64   2012-09-15  2017-04-01         NA #> 65   2012-09-15  2017-05-01         NA #> 66   2012-09-15  2017-06-01         NA #> 67   2012-09-15  2017-07-01         NA #> 68   2012-09-15  2017-08-01         NA #> 69   2012-09-15  2017-09-01         NA #> 70   2012-09-15  2017-10-01         NA #> 71   2012-09-15  2017-11-01         NA #> 72   2012-09-15  2017-12-01         NA #> 73   2012-09-15  2018-01-01         NA #> 74   2012-09-15  2018-02-01         NA #> 75   2012-09-15  2018-03-01         NA #> 76   2012-09-15  2018-04-01         NA #> 77   2012-09-15  2018-05-01         NA #> 78   2012-09-15  2018-06-01         NA #> 79   2012-09-15  2018-07-01         NA #> 80   2012-09-15  2018-08-01         NA #> 81   2012-09-15  2018-09-01         NA #> 82   2012-09-15  2018-10-01         NA #> 83   2012-09-15  2018-11-01         NA #> 84   2012-09-15  2018-12-01         NA #> 85   2012-09-15  2019-01-01         NA #> 86   2012-09-15  2019-02-01         NA #> 87   2012-09-15  2019-03-01         NA #> 88   2012-09-15  2019-04-01         NA #> 89   2012-09-15  2019-05-01         NA #> 90   2012-09-15  2019-06-01         NA #> 91   2012-09-15  2019-07-01         NA #> 92   2012-09-15  2019-08-01         NA #> 93   2012-09-15  2019-09-01         NA #> 94   2012-09-15  2019-10-01         NA #> 95   2012-09-15  2019-11-01         NA #> 96   2012-09-15  2019-12-01         NA #> 97   2012-09-15  2020-01-01         NA #> 98   2012-09-15  2020-02-01         NA #> 99   2012-09-15  2020-03-01         NA #> 100  2012-09-15  2020-04-01         NA #> 101  2012-09-18  2012-01-01  10.179349 #> 102  2012-09-18  2012-02-01  12.624208 #> 103  2012-09-18  2012-03-01  10.133998 #> 104  2012-09-18  2012-04-01  15.261890 #> 105  2012-09-18  2012-05-01  18.474956 #> 106  2012-09-18  2012-06-01  18.584669 #> 107  2012-09-18  2012-07-01  16.938894 #> 108  2012-09-18  2012-08-01  16.557549 #> 109  2012-09-18  2012-09-01  19.321422 #> 110  2012-09-18  2012-10-01         NA #> 111  2012-09-18  2012-11-01         NA #> 112  2012-09-18  2012-12-01         NA #> 113  2012-09-18  2013-01-01         NA #> 114  2012-09-18  2013-02-01         NA #> 115  2012-09-18  2013-03-01         NA #> 116  2012-09-18  2013-04-01         NA #> 117  2012-09-18  2013-05-01         NA #> 118  2012-09-18  2013-06-01         NA #> 119  2012-09-18  2013-07-01         NA #> 120  2012-09-18  2013-08-01         NA #> 121  2012-09-18  2013-09-01         NA #> 122  2012-09-18  2013-10-01         NA #> 123  2012-09-18  2013-11-01         NA #> 124  2012-09-18  2013-12-01         NA #> 125  2012-09-18  2014-01-01         NA #> 126  2012-09-18  2014-02-01         NA #> 127  2012-09-18  2014-03-01         NA #> 128  2012-09-18  2014-04-01         NA #> 129  2012-09-18  2014-05-01         NA #> 130  2012-09-18  2014-06-01         NA #> 131  2012-09-18  2014-07-01         NA #> 132  2012-09-18  2014-08-01         NA #> 133  2012-09-18  2014-09-01         NA #> 134  2012-09-18  2014-10-01         NA #> 135  2012-09-18  2014-11-01         NA #> 136  2012-09-18  2014-12-01         NA #> 137  2012-09-18  2015-01-01         NA #> 138  2012-09-18  2015-02-01         NA #> 139  2012-09-18  2015-03-01         NA #> 140  2012-09-18  2015-04-01         NA #> 141  2012-09-18  2015-05-01         NA #> 142  2012-09-18  2015-06-01         NA #> 143  2012-09-18  2015-07-01         NA #> 144  2012-09-18  2015-08-01         NA #> 145  2012-09-18  2015-09-01         NA #> 146  2012-09-18  2015-10-01         NA #> 147  2012-09-18  2015-11-01         NA #> 148  2012-09-18  2015-12-01         NA #> 149  2012-09-18  2016-01-01         NA #> 150  2012-09-18  2016-02-01         NA #> 151  2012-09-18  2016-03-01         NA #> 152  2012-09-18  2016-04-01         NA #> 153  2012-09-18  2016-05-01         NA #> 154  2012-09-18  2016-06-01         NA #> 155  2012-09-18  2016-07-01         NA #> 156  2012-09-18  2016-08-01         NA #> 157  2012-09-18  2016-09-01         NA #> 158  2012-09-18  2016-10-01         NA #> 159  2012-09-18  2016-11-01         NA #> 160  2012-09-18  2016-12-01         NA #> 161  2012-09-18  2017-01-01         NA #> 162  2012-09-18  2017-02-01         NA #> 163  2012-09-18  2017-03-01         NA #> 164  2012-09-18  2017-04-01         NA #> 165  2012-09-18  2017-05-01         NA #> 166  2012-09-18  2017-06-01         NA #> 167  2012-09-18  2017-07-01         NA #> 168  2012-09-18  2017-08-01         NA #> 169  2012-09-18  2017-09-01         NA #> 170  2012-09-18  2017-10-01         NA #> 171  2012-09-18  2017-11-01         NA #> 172  2012-09-18  2017-12-01         NA #> 173  2012-09-18  2018-01-01         NA #> 174  2012-09-18  2018-02-01         NA #> 175  2012-09-18  2018-03-01         NA #> 176  2012-09-18  2018-04-01         NA #> 177  2012-09-18  2018-05-01         NA #> 178  2012-09-18  2018-06-01         NA #> 179  2012-09-18  2018-07-01         NA #> 180  2012-09-18  2018-08-01         NA #> 181  2012-09-18  2018-09-01         NA #> 182  2012-09-18  2018-10-01         NA #> 183  2012-09-18  2018-11-01         NA #> 184  2012-09-18  2018-12-01         NA #> 185  2012-09-18  2019-01-01         NA #> 186  2012-09-18  2019-02-01         NA #> 187  2012-09-18  2019-03-01         NA #> 188  2012-09-18  2019-04-01         NA #> 189  2012-09-18  2019-05-01         NA #> 190  2012-09-18  2019-06-01         NA #> 191  2012-09-18  2019-07-01         NA #> 192  2012-09-18  2019-08-01         NA #> 193  2012-09-18  2019-09-01         NA #> 194  2012-09-18  2019-10-01         NA #> 195  2012-09-18  2019-11-01         NA #> 196  2012-09-18  2019-12-01         NA #> 197  2012-09-18  2020-01-01         NA #> 198  2012-09-18  2020-02-01         NA #> 199  2012-09-18  2020-03-01         NA #> 200  2012-09-18  2020-04-01         NA #> 201  2014-04-18  2012-01-01  10.318051 #> 202  2014-04-18  2012-02-01  12.997260 #> 203  2014-04-18  2012-03-01  11.483875 #> 204  2014-04-18  2012-04-01  14.772478 #> 205  2014-04-18  2012-05-01  19.266563 #> 206  2014-04-18  2012-06-01  17.959679 #> 207  2014-04-18  2012-07-01  15.338920 #> 208  2014-04-18  2012-08-01  15.834838 #> 209  2014-04-18  2012-09-01  19.506413 #> 210  2014-04-18  2012-10-01  18.989172 #> 211  2014-04-18  2012-11-01  19.604344 #> 212  2014-04-18  2012-12-01  23.630464 #> 213  2014-04-18  2013-01-01  23.370635 #> 214  2014-04-18  2013-02-01  31.677310 #> 215  2014-04-18  2013-03-01  24.180140 #> 216  2014-04-18  2013-04-01  23.988517 #> 217  2014-04-18  2013-05-01  19.582750 #> 218  2014-04-18  2013-06-01  20.887593 #> 219  2014-04-18  2013-07-01  18.498510 #> 220  2014-04-18  2013-08-01  16.364282 #> 221  2014-04-18  2013-09-01  26.910949 #> 222  2014-04-18  2013-10-01  26.440069 #> 223  2014-04-18  2013-11-01  34.608574 #> 224  2014-04-18  2013-12-01  35.767469 #> 225  2014-04-18  2014-01-01  39.706022 #> 226  2014-04-18  2014-02-01  40.311043 #> 227  2014-04-18  2014-03-01  32.456939 #> 228  2014-04-18  2014-04-01  34.604472 #> 229  2014-04-18  2014-05-01         NA #> 230  2014-04-18  2014-06-01         NA #> 231  2014-04-18  2014-07-01         NA #> 232  2014-04-18  2014-08-01         NA #> 233  2014-04-18  2014-09-01         NA #> 234  2014-04-18  2014-10-01         NA #> 235  2014-04-18  2014-11-01         NA #> 236  2014-04-18  2014-12-01         NA #> 237  2014-04-18  2015-01-01         NA #> 238  2014-04-18  2015-02-01         NA #> 239  2014-04-18  2015-03-01         NA #> 240  2014-04-18  2015-04-01         NA #> 241  2014-04-18  2015-05-01         NA #> 242  2014-04-18  2015-06-01         NA #> 243  2014-04-18  2015-07-01         NA #> 244  2014-04-18  2015-08-01         NA #> 245  2014-04-18  2015-09-01         NA #> 246  2014-04-18  2015-10-01         NA #> 247  2014-04-18  2015-11-01         NA #> 248  2014-04-18  2015-12-01         NA #> 249  2014-04-18  2016-01-01         NA #> 250  2014-04-18  2016-02-01         NA #> 251  2014-04-18  2016-03-01         NA #> 252  2014-04-18  2016-04-01         NA #> 253  2014-04-18  2016-05-01         NA #> 254  2014-04-18  2016-06-01         NA #> 255  2014-04-18  2016-07-01         NA #> 256  2014-04-18  2016-08-01         NA #> 257  2014-04-18  2016-09-01         NA #> 258  2014-04-18  2016-10-01         NA #> 259  2014-04-18  2016-11-01         NA #> 260  2014-04-18  2016-12-01         NA #> 261  2014-04-18  2017-01-01         NA #> 262  2014-04-18  2017-02-01         NA #> 263  2014-04-18  2017-03-01         NA #> 264  2014-04-18  2017-04-01         NA #> 265  2014-04-18  2017-05-01         NA #> 266  2014-04-18  2017-06-01         NA #> 267  2014-04-18  2017-07-01         NA #> 268  2014-04-18  2017-08-01         NA #> 269  2014-04-18  2017-09-01         NA #> 270  2014-04-18  2017-10-01         NA #> 271  2014-04-18  2017-11-01         NA #> 272  2014-04-18  2017-12-01         NA #> 273  2014-04-18  2018-01-01         NA #> 274  2014-04-18  2018-02-01         NA #> 275  2014-04-18  2018-03-01         NA #> 276  2014-04-18  2018-04-01         NA #> 277  2014-04-18  2018-05-01         NA #> 278  2014-04-18  2018-06-01         NA #> 279  2014-04-18  2018-07-01         NA #> 280  2014-04-18  2018-08-01         NA #> 281  2014-04-18  2018-09-01         NA #> 282  2014-04-18  2018-10-01         NA #> 283  2014-04-18  2018-11-01         NA #> 284  2014-04-18  2018-12-01         NA #> 285  2014-04-18  2019-01-01         NA #> 286  2014-04-18  2019-02-01         NA #> 287  2014-04-18  2019-03-01         NA #> 288  2014-04-18  2019-04-01         NA #> 289  2014-04-18  2019-05-01         NA #> 290  2014-04-18  2019-06-01         NA #> 291  2014-04-18  2019-07-01         NA #> 292  2014-04-18  2019-08-01         NA #> 293  2014-04-18  2019-09-01         NA #> 294  2014-04-18  2019-10-01         NA #> 295  2014-04-18  2019-11-01         NA #> 296  2014-04-18  2019-12-01         NA #> 297  2014-04-18  2020-01-01         NA #> 298  2014-04-18  2020-02-01         NA #> 299  2014-04-18  2020-03-01         NA #> 300  2014-04-18  2020-04-01         NA #> 301  2016-07-31  2012-01-01  10.518319 #> 302  2016-07-31  2012-02-01  13.422579 #> 303  2016-07-31  2012-03-01  11.243710 #> 304  2016-07-31  2012-04-01  14.860021 #> 305  2016-07-31  2012-05-01  19.787741 #> 306  2016-07-31  2012-06-01  17.839856 #> 307  2016-07-31  2012-07-01  16.043708 #> 308  2016-07-31  2012-08-01  15.496405 #> 309  2016-07-31  2012-09-01  19.206659 #> 310  2016-07-31  2012-10-01  15.837898 #> 311  2016-07-31  2012-11-01  16.232009 #> 312  2016-07-31  2012-12-01  22.091931 #> 313  2016-07-31  2013-01-01  23.659499 #> 314  2016-07-31  2013-02-01  29.559892 #> 315  2016-07-31  2013-03-01  27.262801 #> 316  2016-07-31  2013-04-01  27.245872 #> 317  2016-07-31  2013-05-01  20.698266 #> 318  2016-07-31  2013-06-01  15.702154 #> 319  2016-07-31  2013-07-01  16.660043 #> 320  2016-07-31  2013-08-01  16.533482 #> 321  2016-07-31  2013-09-01  27.163843 #> 322  2016-07-31  2013-10-01  25.917260 #> 323  2016-07-31  2013-11-01  30.427107 #> 324  2016-07-31  2013-12-01  37.868545 #> 325  2016-07-31  2014-01-01  41.295589 #> 326  2016-07-31  2014-02-01  41.691613 #> 327  2016-07-31  2014-03-01  33.288698 #> 328  2016-07-31  2014-04-01  33.874568 #> 329  2016-07-31  2014-05-01  29.780394 #> 330  2016-07-31  2014-06-01  26.877929 #> 331  2016-07-31  2014-07-01  19.175720 #> 332  2016-07-31  2014-08-01  17.469207 #> 333  2016-07-31  2014-09-01  24.192273 #> 334  2016-07-31  2014-10-01  24.562316 #> 335  2016-07-31  2014-11-01  33.013499 #> 336  2016-07-31  2014-12-01  40.024368 #> 337  2016-07-31  2015-01-01  40.203653 #> 338  2016-07-31  2015-02-01  48.115320 #> 339  2016-07-31  2015-03-01  43.275332 #> 340  2016-07-31  2015-04-01  45.154405 #> 341  2016-07-31  2015-05-01  45.668639 #> 342  2016-07-31  2015-06-01  38.458592 #> 343  2016-07-31  2015-07-01  32.435662 #> 344  2016-07-31  2015-08-01  24.088284 #> 345  2016-07-31  2015-09-01  36.153080 #> 346  2016-07-31  2015-10-01  39.247601 #> 347  2016-07-31  2015-11-01  45.945930 #> 348  2016-07-31  2015-12-01  56.823669 #> 349  2016-07-31  2016-01-01  60.851881 #> 350  2016-07-31  2016-02-01  71.267052 #> 351  2016-07-31  2016-03-01  66.324649 #> 352  2016-07-31  2016-04-01  64.526519 #> 353  2016-07-31  2016-05-01  57.401934 #> 354  2016-07-31  2016-06-01  47.616635 #> 355  2016-07-31  2016-07-01  47.027651 #> 356  2016-07-31  2016-08-01         NA #> 357  2016-07-31  2016-09-01         NA #> 358  2016-07-31  2016-10-01         NA #> 359  2016-07-31  2016-11-01         NA #> 360  2016-07-31  2016-12-01         NA #> 361  2016-07-31  2017-01-01         NA #> 362  2016-07-31  2017-02-01         NA #> 363  2016-07-31  2017-03-01         NA #> 364  2016-07-31  2017-04-01         NA #> 365  2016-07-31  2017-05-01         NA #> 366  2016-07-31  2017-06-01         NA #> 367  2016-07-31  2017-07-01         NA #> 368  2016-07-31  2017-08-01         NA #> 369  2016-07-31  2017-09-01         NA #> 370  2016-07-31  2017-10-01         NA #> 371  2016-07-31  2017-11-01         NA #> 372  2016-07-31  2017-12-01         NA #> 373  2016-07-31  2018-01-01         NA #> 374  2016-07-31  2018-02-01         NA #> 375  2016-07-31  2018-03-01         NA #> 376  2016-07-31  2018-04-01         NA #> 377  2016-07-31  2018-05-01         NA #> 378  2016-07-31  2018-06-01         NA #> 379  2016-07-31  2018-07-01         NA #> 380  2016-07-31  2018-08-01         NA #> 381  2016-07-31  2018-09-01         NA #> 382  2016-07-31  2018-10-01         NA #> 383  2016-07-31  2018-11-01         NA #> 384  2016-07-31  2018-12-01         NA #> 385  2016-07-31  2019-01-01         NA #> 386  2016-07-31  2019-02-01         NA #> 387  2016-07-31  2019-03-01         NA #> 388  2016-07-31  2019-04-01         NA #> 389  2016-07-31  2019-05-01         NA #> 390  2016-07-31  2019-06-01         NA #> 391  2016-07-31  2019-07-01         NA #> 392  2016-07-31  2019-08-01         NA #> 393  2016-07-31  2019-09-01         NA #> 394  2016-07-31  2019-10-01         NA #> 395  2016-07-31  2019-11-01         NA #> 396  2016-07-31  2019-12-01         NA #> 397  2016-07-31  2020-01-01         NA #> 398  2016-07-31  2020-02-01         NA #> 399  2016-07-31  2020-03-01         NA #> 400  2016-07-31  2020-04-01         NA #> 401  2017-06-15  2012-01-01  10.201430 #> 402  2017-06-15  2012-02-01  13.437033 #> 403  2017-06-15  2012-03-01  11.553616 #> 404  2017-06-15  2012-04-01  14.991357 #> 405  2017-06-15  2012-05-01  19.393330 #> 406  2017-06-15  2012-06-01  17.894367 #> 407  2017-06-15  2012-07-01  15.826262 #> 408  2017-06-15  2012-08-01  15.648988 #> 409  2017-06-15  2012-09-01  18.996325 #> 410  2017-06-15  2012-10-01  15.410497 #> 411  2017-06-15  2012-11-01  16.509480 #> 412  2017-06-15  2012-12-01  22.529524 #> 413  2017-06-15  2013-01-01  25.194920 #> 414  2017-06-15  2013-02-01  28.807488 #> 415  2017-06-15  2013-03-01  26.127934 #> 416  2017-06-15  2013-04-01  26.665332 #> 417  2017-06-15  2013-05-01  21.118561 #> 418  2017-06-15  2013-06-01  13.323162 #> 419  2017-06-15  2013-07-01  16.376509 #> 420  2017-06-15  2013-08-01  17.692634 #> 421  2017-06-15  2013-09-01  26.521222 #> 422  2017-06-15  2013-10-01  25.357567 #> 423  2017-06-15  2013-11-01  29.886647 #> 424  2017-06-15  2013-12-01  36.291081 #> 425  2017-06-15  2014-01-01  39.617174 #> 426  2017-06-15  2014-02-01  41.104013 #> 427  2017-06-15  2014-03-01  34.452556 #> 428  2017-06-15  2014-04-01  32.909230 #> 429  2017-06-15  2014-05-01  29.683968 #> 430  2017-06-15  2014-06-01  25.800017 #> 431  2017-06-15  2014-07-01  21.827734 #> 432  2017-06-15  2014-08-01  17.566452 #> 433  2017-06-15  2014-09-01  23.165834 #> 434  2017-06-15  2014-10-01  23.025871 #> 435  2017-06-15  2014-11-01  29.344705 #> 436  2017-06-15  2014-12-01  39.444128 #> 437  2017-06-15  2015-01-01  41.059641 #> 438  2017-06-15  2015-02-01  49.062788 #> 439  2017-06-15  2015-03-01  42.835114 #> 440  2017-06-15  2015-04-01  46.818736 #> 441  2017-06-15  2015-05-01  45.272806 #> 442  2017-06-15  2015-06-01  37.695629 #> 443  2017-06-15  2015-07-01  30.694737 #> 444  2017-06-15  2015-08-01  24.011491 #> 445  2017-06-15  2015-09-01  34.259932 #> 446  2017-06-15  2015-10-01  40.472912 #> 447  2017-06-15  2015-11-01  44.559839 #> 448  2017-06-15  2015-12-01  55.641842 #> 449  2017-06-15  2016-01-01  59.530911 #> 450  2017-06-15  2016-02-01  72.687010 #> 451  2017-06-15  2016-03-01  64.340533 #> 452  2017-06-15  2016-04-01  61.709405 #> 453  2017-06-15  2016-05-01  57.936587 #> 454  2017-06-15  2016-06-01  50.463586 #> 455  2017-06-15  2016-07-01  43.432412 #> 456  2017-06-15  2016-08-01  39.075193 #> 457  2017-06-15  2016-09-01  42.979141 #> 458  2017-06-15  2016-10-01  47.973265 #> 459  2017-06-15  2016-11-01  53.824925 #> 460  2017-06-15  2016-12-01  63.321291 #> 461  2017-06-15  2017-01-01  66.712399 #> 462  2017-06-15  2017-02-01  83.934137 #> 463  2017-06-15  2017-03-01  76.425569 #> 464  2017-06-15  2017-04-01  76.275656 #> 465  2017-06-15  2017-05-01  73.020981 #> 466  2017-06-15  2017-06-01  61.412121 #> 467  2017-06-15  2017-07-01         NA #> 468  2017-06-15  2017-08-01         NA #> 469  2017-06-15  2017-09-01         NA #> 470  2017-06-15  2017-10-01         NA #> 471  2017-06-15  2017-11-01         NA #> 472  2017-06-15  2017-12-01         NA #> 473  2017-06-15  2018-01-01         NA #> 474  2017-06-15  2018-02-01         NA #> 475  2017-06-15  2018-03-01         NA #> 476  2017-06-15  2018-04-01         NA #> 477  2017-06-15  2018-05-01         NA #> 478  2017-06-15  2018-06-01         NA #> 479  2017-06-15  2018-07-01         NA #> 480  2017-06-15  2018-08-01         NA #> 481  2017-06-15  2018-09-01         NA #> 482  2017-06-15  2018-10-01         NA #> 483  2017-06-15  2018-11-01         NA #> 484  2017-06-15  2018-12-01         NA #> 485  2017-06-15  2019-01-01         NA #> 486  2017-06-15  2019-02-01         NA #> 487  2017-06-15  2019-03-01         NA #> 488  2017-06-15  2019-04-01         NA #> 489  2017-06-15  2019-05-01         NA #> 490  2017-06-15  2019-06-01         NA #> 491  2017-06-15  2019-07-01         NA #> 492  2017-06-15  2019-08-01         NA #> 493  2017-06-15  2019-09-01         NA #> 494  2017-06-15  2019-10-01         NA #> 495  2017-06-15  2019-11-01         NA #> 496  2017-06-15  2019-12-01         NA #> 497  2017-06-15  2020-01-01         NA #> 498  2017-06-15  2020-02-01         NA #> 499  2017-06-15  2020-03-01         NA #> 500  2017-06-15  2020-04-01         NA #> 501  2017-06-27  2012-01-01  10.268414 #> 502  2017-06-27  2012-02-01  13.325034 #> 503  2017-06-27  2012-03-01  11.445116 #> 504  2017-06-27  2012-04-01  14.958207 #> 505  2017-06-27  2012-05-01  19.462456 #> 506  2017-06-27  2012-06-01  17.912877 #> 507  2017-06-27  2012-07-01  15.610693 #> 508  2017-06-27  2012-08-01  15.456271 #> 509  2017-06-27  2012-09-01  19.061821 #> 510  2017-06-27  2012-10-01  15.548049 #> 511  2017-06-27  2012-11-01  16.443784 #> 512  2017-06-27  2012-12-01  22.088104 #> 513  2017-06-27  2013-01-01  24.757589 #> 514  2017-06-27  2013-02-01  29.096437 #> 515  2017-06-27  2013-03-01  27.286397 #> 516  2017-06-27  2013-04-01  25.813067 #> 517  2017-06-27  2013-05-01  20.699232 #> 518  2017-06-27  2013-06-01  15.071259 #> 519  2017-06-27  2013-07-01  15.807800 #> 520  2017-06-27  2013-08-01  17.149435 #> 521  2017-06-27  2013-09-01  27.257785 #> 522  2017-06-27  2013-10-01  26.302192 #> 523  2017-06-27  2013-11-01  29.707921 #> 524  2017-06-27  2013-12-01  37.218463 #> 525  2017-06-27  2014-01-01  38.407412 #> 526  2017-06-27  2014-02-01  41.878811 #> 527  2017-06-27  2014-03-01  34.317968 #> 528  2017-06-27  2014-04-01  32.487765 #> 529  2017-06-27  2014-05-01  31.312080 #> 530  2017-06-27  2014-06-01  26.330151 #> 531  2017-06-27  2014-07-01  22.487414 #> 532  2017-06-27  2014-08-01  17.655090 #> 533  2017-06-27  2014-09-01  21.803051 #> 534  2017-06-27  2014-10-01  22.905261 #> 535  2017-06-27  2014-11-01  30.217760 #> 536  2017-06-27  2014-12-01  38.948236 #> 537  2017-06-27  2015-01-01  41.208205 #> 538  2017-06-27  2015-02-01  47.877996 #> 539  2017-06-27  2015-03-01  43.934881 #> 540  2017-06-27  2015-04-01  47.373986 #> 541  2017-06-27  2015-05-01  45.443878 #> 542  2017-06-27  2015-06-01  38.192498 #> 543  2017-06-27  2015-07-01  30.491314 #> 544  2017-06-27  2015-08-01  25.379141 #> 545  2017-06-27  2015-09-01  34.260319 #> 546  2017-06-27  2015-10-01  40.248301 #> 547  2017-06-27  2015-11-01  46.060759 #> 548  2017-06-27  2015-12-01  55.642627 #> 549  2017-06-27  2016-01-01  59.581584 #> 550  2017-06-27  2016-02-01  73.762665 #> 551  2017-06-27  2016-03-01  64.577660 #> 552  2017-06-27  2016-04-01  62.445037 #> 553  2017-06-27  2016-05-01  57.463404 #> 554  2017-06-27  2016-06-01  50.157617 #> 555  2017-06-27  2016-07-01  44.268860 #> 556  2017-06-27  2016-08-01  40.498547 #> 557  2017-06-27  2016-09-01  44.613184 #> 558  2017-06-27  2016-10-01  47.086640 #> 559  2017-06-27  2016-11-01  55.544102 #> 560  2017-06-27  2016-12-01  62.470811 #> 561  2017-06-27  2017-01-01  68.309756 #> 562  2017-06-27  2017-02-01  81.478096 #> 563  2017-06-27  2017-03-01  73.909685 #> 564  2017-06-27  2017-04-01  74.431043 #> 565  2017-06-27  2017-05-01  72.518467 #> 566  2017-06-27  2017-06-01  61.243338 #> 567  2017-06-27  2017-07-01         NA #> 568  2017-06-27  2017-08-01         NA #> 569  2017-06-27  2017-09-01         NA #> 570  2017-06-27  2017-10-01         NA #> 571  2017-06-27  2017-11-01         NA #> 572  2017-06-27  2017-12-01         NA #> 573  2017-06-27  2018-01-01         NA #> 574  2017-06-27  2018-02-01         NA #> 575  2017-06-27  2018-03-01         NA #> 576  2017-06-27  2018-04-01         NA #> 577  2017-06-27  2018-05-01         NA #> 578  2017-06-27  2018-06-01         NA #> 579  2017-06-27  2018-07-01         NA #> 580  2017-06-27  2018-08-01         NA #> 581  2017-06-27  2018-09-01         NA #> 582  2017-06-27  2018-10-01         NA #> 583  2017-06-27  2018-11-01         NA #> 584  2017-06-27  2018-12-01         NA #> 585  2017-06-27  2019-01-01         NA #> 586  2017-06-27  2019-02-01         NA #> 587  2017-06-27  2019-03-01         NA #> 588  2017-06-27  2019-04-01         NA #> 589  2017-06-27  2019-05-01         NA #> 590  2017-06-27  2019-06-01         NA #> 591  2017-06-27  2019-07-01         NA #> 592  2017-06-27  2019-08-01         NA #> 593  2017-06-27  2019-09-01         NA #> 594  2017-06-27  2019-10-01         NA #> 595  2017-06-27  2019-11-01         NA #> 596  2017-06-27  2019-12-01         NA #> 597  2017-06-27  2020-01-01         NA #> 598  2017-06-27  2020-02-01         NA #> 599  2017-06-27  2020-03-01         NA #> 600  2017-06-27  2020-04-01         NA #> 601  2018-02-20  2012-01-01  10.327431 #> 602  2018-02-20  2012-02-01  13.301454 #> 603  2018-02-20  2012-03-01  11.376143 #> 604  2018-02-20  2012-04-01  15.025808 #> 605  2018-02-20  2012-05-01  19.548175 #> 606  2018-02-20  2012-06-01  17.894026 #> 607  2018-02-20  2012-07-01  15.842243 #> 608  2018-02-20  2012-08-01  15.458783 #> 609  2018-02-20  2012-09-01  19.112885 #> 610  2018-02-20  2012-10-01  15.727438 #> 611  2018-02-20  2012-11-01  16.084046 #> 612  2018-02-20  2012-12-01  22.288334 #> 613  2018-02-20  2013-01-01  24.960107 #> 614  2018-02-20  2013-02-01  28.787348 #> 615  2018-02-20  2013-03-01  27.403384 #> 616  2018-02-20  2013-04-01  26.255016 #> 617  2018-02-20  2013-05-01  20.647088 #> 618  2018-02-20  2013-06-01  15.114386 #> 619  2018-02-20  2013-07-01  15.580814 #> 620  2018-02-20  2013-08-01  17.151257 #> 621  2018-02-20  2013-09-01  27.276235 #> 622  2018-02-20  2013-10-01  25.867460 #> 623  2018-02-20  2013-11-01  29.722678 #> 624  2018-02-20  2013-12-01  37.067316 #> 625  2018-02-20  2014-01-01  38.707308 #> 626  2018-02-20  2014-02-01  41.462928 #> 627  2018-02-20  2014-03-01  34.487627 #> 628  2018-02-20  2014-04-01  32.666468 #> 629  2018-02-20  2014-05-01  30.950398 #> 630  2018-02-20  2014-06-01  25.376635 #> 631  2018-02-20  2014-07-01  21.004282 #> 632  2018-02-20  2014-08-01  16.472093 #> 633  2018-02-20  2014-09-01  21.812369 #> 634  2018-02-20  2014-10-01  23.088414 #> 635  2018-02-20  2014-11-01  29.769561 #> 636  2018-02-20  2014-12-01  38.654640 #> 637  2018-02-20  2015-01-01  41.411437 #> 638  2018-02-20  2015-02-01  48.324631 #> 639  2018-02-20  2015-03-01  44.075341 #> 640  2018-02-20  2015-04-01  46.864669 #> 641  2018-02-20  2015-05-01  44.918500 #> 642  2018-02-20  2015-06-01  37.762467 #> 643  2018-02-20  2015-07-01  30.440129 #> 644  2018-02-20  2015-08-01  24.642123 #> 645  2018-02-20  2015-09-01  34.051399 #> 646  2018-02-20  2015-10-01  40.291805 #> 647  2018-02-20  2015-11-01  46.822034 #> 648  2018-02-20  2015-12-01  56.367253 #> 649  2018-02-20  2016-01-01  60.135986 #> 650  2018-02-20  2016-02-01  72.620214 #> 651  2018-02-20  2016-03-01  64.138978 #> 652  2018-02-20  2016-04-01  62.490608 #> 653  2018-02-20  2016-05-01  58.055844 #> 654  2018-02-20  2016-06-01  50.268678 #> 655  2018-02-20  2016-07-01  44.716394 #> 656  2018-02-20  2016-08-01  41.179657 #> 657  2018-02-20  2016-09-01  42.604823 #> 658  2018-02-20  2016-10-01  47.650429 #> 659  2018-02-20  2016-11-01  54.323384 #> 660  2018-02-20  2016-12-01  62.844744 #> 661  2018-02-20  2017-01-01  68.032078 #> 662  2018-02-20  2017-02-01  82.016364 #> 663  2018-02-20  2017-03-01  73.422664 #> 664  2018-02-20  2017-04-01  75.036177 #> 665  2018-02-20  2017-05-01  72.641911 #> 666  2018-02-20  2017-06-01  62.913311 #> 667  2018-02-20  2017-07-01  57.558802 #> 668  2018-02-20  2017-08-01  54.723962 #> 669  2018-02-20  2017-09-01  55.474543 #> 670  2018-02-20  2017-10-01  55.126761 #> 671  2018-02-20  2017-11-01  65.199556 #> 672  2018-02-20  2017-12-01  73.819431 #> 673  2018-02-20  2018-01-01  83.687707 #> 674  2018-02-20  2018-02-01 104.077303 #> 675  2018-02-20  2018-03-01         NA #> 676  2018-02-20  2018-04-01         NA #> 677  2018-02-20  2018-05-01         NA #> 678  2018-02-20  2018-06-01         NA #> 679  2018-02-20  2018-07-01         NA #> 680  2018-02-20  2018-08-01         NA #> 681  2018-02-20  2018-09-01         NA #> 682  2018-02-20  2018-10-01         NA #> 683  2018-02-20  2018-11-01         NA #> 684  2018-02-20  2018-12-01         NA #> 685  2018-02-20  2019-01-01         NA #> 686  2018-02-20  2019-02-01         NA #> 687  2018-02-20  2019-03-01         NA #> 688  2018-02-20  2019-04-01         NA #> 689  2018-02-20  2019-05-01         NA #> 690  2018-02-20  2019-06-01         NA #> 691  2018-02-20  2019-07-01         NA #> 692  2018-02-20  2019-08-01         NA #> 693  2018-02-20  2019-09-01         NA #> 694  2018-02-20  2019-10-01         NA #> 695  2018-02-20  2019-11-01         NA #> 696  2018-02-20  2019-12-01         NA #> 697  2018-02-20  2020-01-01         NA #> 698  2018-02-20  2020-02-01         NA #> 699  2018-02-20  2020-03-01         NA #> 700  2018-02-20  2020-04-01         NA #> 701  2018-02-26  2012-01-01  10.300663 #> 702  2018-02-26  2012-02-01  13.304203 #> 703  2018-02-26  2012-03-01  11.370362 #> 704  2018-02-26  2012-04-01  15.021734 #> 705  2018-02-26  2012-05-01  19.531724 #> 706  2018-02-26  2012-06-01  17.881287 #> 707  2018-02-26  2012-07-01  15.771911 #> 708  2018-02-26  2012-08-01  15.480565 #> 709  2018-02-26  2012-09-01  19.069954 #> 710  2018-02-26  2012-10-01  15.657245 #> 711  2018-02-26  2012-11-01  16.153646 #> 712  2018-02-26  2012-12-01  22.115883 #> 713  2018-02-26  2013-01-01  24.966470 #> 714  2018-02-26  2013-02-01  29.137941 #> 715  2018-02-26  2013-03-01  27.324307 #> 716  2018-02-26  2013-04-01  26.092255 #> 717  2018-02-26  2013-05-01  20.704117 #> 718  2018-02-26  2013-06-01  15.068041 #> 719  2018-02-26  2013-07-01  15.772947 #> 720  2018-02-26  2013-08-01  17.207714 #> 721  2018-02-26  2013-09-01  27.151402 #> 722  2018-02-26  2013-10-01  25.797836 #> 723  2018-02-26  2013-11-01  29.678309 #> 724  2018-02-26  2013-12-01  37.198649 #> 725  2018-02-26  2014-01-01  38.644815 #> 726  2018-02-26  2014-02-01  41.561462 #> 727  2018-02-26  2014-03-01  34.620420 #> 728  2018-02-26  2014-04-01  32.623192 #> 729  2018-02-26  2014-05-01  31.467211 #> 730  2018-02-26  2014-06-01  25.667013 #> 731  2018-02-26  2014-07-01  21.250006 #> 732  2018-02-26  2014-08-01  16.702482 #> 733  2018-02-26  2014-09-01  22.031320 #> 734  2018-02-26  2014-10-01  22.838935 #> 735  2018-02-26  2014-11-01  29.824575 #> 736  2018-02-26  2014-12-01  38.952747 #> 737  2018-02-26  2015-01-01  41.345133 #> 738  2018-02-26  2015-02-01  48.067489 #> 739  2018-02-26  2015-03-01  44.154573 #> 740  2018-02-26  2015-04-01  46.812380 #> 741  2018-02-26  2015-05-01  45.425694 #> 742  2018-02-26  2015-06-01  37.785534 #> 743  2018-02-26  2015-07-01  30.805799 #> 744  2018-02-26  2015-08-01  24.989791 #> 745  2018-02-26  2015-09-01  34.204543 #> 746  2018-02-26  2015-10-01  40.225865 #> 747  2018-02-26  2015-11-01  46.524647 #> 748  2018-02-26  2015-12-01  56.198772 #> 749  2018-02-26  2016-01-01  60.169293 #> 750  2018-02-26  2016-02-01  72.603330 #> 751  2018-02-26  2016-03-01  64.241041 #> 752  2018-02-26  2016-04-01  62.020402 #> 753  2018-02-26  2016-05-01  57.687942 #> 754  2018-02-26  2016-06-01  50.386342 #> 755  2018-02-26  2016-07-01  44.598879 #> 756  2018-02-26  2016-08-01  41.410570 #> 757  2018-02-26  2016-09-01  43.756379 #> 758  2018-02-26  2016-10-01  47.098524 #> 759  2018-02-26  2016-11-01  54.234962 #> 760  2018-02-26  2016-12-01  62.553916 #> 761  2018-02-26  2017-01-01  67.391445 #> 762  2018-02-26  2017-02-01  82.139597 #> 763  2018-02-26  2017-03-01  73.798248 #> 764  2018-02-26  2017-04-01  74.791603 #> 765  2018-02-26  2017-05-01  72.022362 #> 766  2018-02-26  2017-06-01  61.807396 #> 767  2018-02-26  2017-07-01  56.852235 #> 768  2018-02-26  2017-08-01  52.957332 #> 769  2018-02-26  2017-09-01  54.443782 #> 770  2018-02-26  2017-10-01  56.633131 #> 771  2018-02-26  2017-11-01  61.388696 #> 772  2018-02-26  2017-12-01  74.960437 #> 773  2018-02-26  2018-01-01  80.867724 #> 774  2018-02-26  2018-02-01 100.507599 #> 775  2018-02-26  2018-03-01         NA #> 776  2018-02-26  2018-04-01         NA #> 777  2018-02-26  2018-05-01         NA #> 778  2018-02-26  2018-06-01         NA #> 779  2018-02-26  2018-07-01         NA #> 780  2018-02-26  2018-08-01         NA #> 781  2018-02-26  2018-09-01         NA #> 782  2018-02-26  2018-10-01         NA #> 783  2018-02-26  2018-11-01         NA #> 784  2018-02-26  2018-12-01         NA #> 785  2018-02-26  2019-01-01         NA #> 786  2018-02-26  2019-02-01         NA #> 787  2018-02-26  2019-03-01         NA #> 788  2018-02-26  2019-04-01         NA #> 789  2018-02-26  2019-05-01         NA #> 790  2018-02-26  2019-06-01         NA #> 791  2018-02-26  2019-07-01         NA #> 792  2018-02-26  2019-08-01         NA #> 793  2018-02-26  2019-09-01         NA #> 794  2018-02-26  2019-10-01         NA #> 795  2018-02-26  2019-11-01         NA #> 796  2018-02-26  2019-12-01         NA #> 797  2018-02-26  2020-01-01         NA #> 798  2018-02-26  2020-02-01         NA #> 799  2018-02-26  2020-03-01         NA #> 800  2018-02-26  2020-04-01         NA #> 801  2018-04-02  2012-01-01  10.307473 #> 802  2018-04-02  2012-02-01  13.320249 #> 803  2018-04-02  2012-03-01  11.377014 #> 804  2018-04-02  2012-04-01  15.004663 #> 805  2018-04-02  2012-05-01  19.557400 #> 806  2018-04-02  2012-06-01  17.891237 #> 807  2018-04-02  2012-07-01  15.773766 #> 808  2018-04-02  2012-08-01  15.498796 #> 809  2018-04-02  2012-09-01  19.100000 #> 810  2018-04-02  2012-10-01  15.798389 #> 811  2018-04-02  2012-11-01  16.122187 #> 812  2018-04-02  2012-12-01  22.055436 #> 813  2018-04-02  2013-01-01  24.910588 #> 814  2018-04-02  2013-02-01  29.234717 #> 815  2018-04-02  2013-03-01  27.205977 #> 816  2018-04-02  2013-04-01  26.228444 #> 817  2018-04-02  2013-05-01  20.699838 #> 818  2018-04-02  2013-06-01  15.094929 #> 819  2018-04-02  2013-07-01  15.759986 #> 820  2018-04-02  2013-08-01  17.234558 #> 821  2018-04-02  2013-09-01  27.147050 #> 822  2018-04-02  2013-10-01  25.836284 #> 823  2018-04-02  2013-11-01  29.739924 #> 824  2018-04-02  2013-12-01  37.103485 #> 825  2018-04-02  2014-01-01  38.741222 #> 826  2018-04-02  2014-02-01  41.638923 #> 827  2018-04-02  2014-03-01  34.616589 #> 828  2018-04-02  2014-04-01  32.608140 #> 829  2018-04-02  2014-05-01  31.467389 #> 830  2018-04-02  2014-06-01  25.733335 #> 831  2018-04-02  2014-07-01  21.278336 #> 832  2018-04-02  2014-08-01  16.851209 #> 833  2018-04-02  2014-09-01  21.884240 #> 834  2018-04-02  2014-10-01  22.908137 #> 835  2018-04-02  2014-11-01  29.994180 #> 836  2018-04-02  2014-12-01  38.995254 #> 837  2018-04-02  2015-01-01  41.431284 #> 838  2018-04-02  2015-02-01  48.211844 #> 839  2018-04-02  2015-03-01  43.834143 #> 840  2018-04-02  2015-04-01  46.799566 #> 841  2018-04-02  2015-05-01  45.179687 #> 842  2018-04-02  2015-06-01  37.746517 #> 843  2018-04-02  2015-07-01  30.899145 #> 844  2018-04-02  2015-08-01  25.100711 #> 845  2018-04-02  2015-09-01  34.305444 #> 846  2018-04-02  2015-10-01  40.294699 #> 847  2018-04-02  2015-11-01  46.710874 #> 848  2018-04-02  2015-12-01  56.127056 #> 849  2018-04-02  2016-01-01  60.048328 #> 850  2018-04-02  2016-02-01  72.644251 #> 851  2018-04-02  2016-03-01  64.198583 #> 852  2018-04-02  2016-04-01  61.962692 #> 853  2018-04-02  2016-05-01  57.551451 #> 854  2018-04-02  2016-06-01  50.467642 #> 855  2018-04-02  2016-07-01  44.649121 #> 856  2018-04-02  2016-08-01  41.626614 #> 857  2018-04-02  2016-09-01  43.053406 #> 858  2018-04-02  2016-10-01  47.577158 #> 859  2018-04-02  2016-11-01  54.311815 #> 860  2018-04-02  2016-12-01  62.702618 #> 861  2018-04-02  2017-01-01  67.941867 #> 862  2018-04-02  2017-02-01  82.253696 #> 863  2018-04-02  2017-03-01  73.680227 #> 864  2018-04-02  2017-04-01  75.315448 #> 865  2018-04-02  2017-05-01  72.111516 #> 866  2018-04-02  2017-06-01  62.030010 #> 867  2018-04-02  2017-07-01  56.687252 #> 868  2018-04-02  2017-08-01  51.832483 #> 869  2018-04-02  2017-09-01  53.533574 #> 870  2018-04-02  2017-10-01  56.708927 #> 871  2018-04-02  2017-11-01  63.045973 #> 872  2018-04-02  2017-12-01  74.202414 #> 873  2018-04-02  2018-01-01  83.075295 #> 874  2018-04-02  2018-02-01  99.753026 #> 875  2018-04-02  2018-03-01  92.660294 #> 876  2018-04-02  2018-04-01  86.083572 #> 877  2018-04-02  2018-05-01         NA #> 878  2018-04-02  2018-06-01         NA #> 879  2018-04-02  2018-07-01         NA #> 880  2018-04-02  2018-08-01         NA #> 881  2018-04-02  2018-09-01         NA #> 882  2018-04-02  2018-10-01         NA #> 883  2018-04-02  2018-11-01         NA #> 884  2018-04-02  2018-12-01         NA #> 885  2018-04-02  2019-01-01         NA #> 886  2018-04-02  2019-02-01         NA #> 887  2018-04-02  2019-03-01         NA #> 888  2018-04-02  2019-04-01         NA #> 889  2018-04-02  2019-05-01         NA #> 890  2018-04-02  2019-06-01         NA #> 891  2018-04-02  2019-07-01         NA #> 892  2018-04-02  2019-08-01         NA #> 893  2018-04-02  2019-09-01         NA #> 894  2018-04-02  2019-10-01         NA #> 895  2018-04-02  2019-11-01         NA #> 896  2018-04-02  2019-12-01         NA #> 897  2018-04-02  2020-01-01         NA #> 898  2018-04-02  2020-02-01         NA #> 899  2018-04-02  2020-03-01         NA #> 900  2018-04-02  2020-04-01         NA #> 901  2020-05-27  2012-01-01  10.313491 #> 902  2020-05-27  2012-02-01  13.319069 #> 903  2020-05-27  2012-03-01  11.381341 #> 904  2020-05-27  2012-04-01  15.013402 #> 905  2020-05-27  2012-05-01  19.569760 #> 906  2020-05-27  2012-06-01  17.891511 #> 907  2020-05-27  2012-07-01  15.771326 #> 908  2020-05-27  2012-08-01  15.471468 #> 909  2020-05-27  2012-09-01  19.101105 #> 910  2020-05-27  2012-10-01  15.801138 #> 911  2020-05-27  2012-11-01  16.153231 #> 912  2020-05-27  2012-12-01  22.072923 #> 913  2020-05-27  2013-01-01  24.897138 #> 914  2020-05-27  2013-02-01  29.196702 #> 915  2020-05-27  2013-03-01  27.187117 #> 916  2020-05-27  2013-04-01  26.228942 #> 917  2020-05-27  2013-05-01  20.733997 #> 918  2020-05-27  2013-06-01  15.083375 #> 919  2020-05-27  2013-07-01  15.744934 #> 920  2020-05-27  2013-08-01  17.201847 #> 921  2020-05-27  2013-09-01  27.114928 #> 922  2020-05-27  2013-10-01  25.841503 #> 923  2020-05-27  2013-11-01  29.735510 #> 924  2020-05-27  2013-12-01  37.133030 #> 925  2020-05-27  2014-01-01  38.724701 #> 926  2020-05-27  2014-02-01  41.615743 #> 927  2020-05-27  2014-03-01  34.625000 #> 928  2020-05-27  2014-04-01  32.626758 #> 929  2020-05-27  2014-05-01  31.494058 #> 930  2020-05-27  2014-06-01  25.798657 #> 931  2020-05-27  2014-07-01  21.248911 #> 932  2020-05-27  2014-08-01  16.744512 #> 933  2020-05-27  2014-09-01  21.832007 #> 934  2020-05-27  2014-10-01  22.913435 #> 935  2020-05-27  2014-11-01  29.981369 #> 936  2020-05-27  2014-12-01  39.029028 #> 937  2020-05-27  2015-01-01  41.344349 #> 938  2020-05-27  2015-02-01  48.243122 #> 939  2020-05-27  2015-03-01  43.870238 #> 940  2020-05-27  2015-04-01  46.765141 #> 941  2020-05-27  2015-05-01  45.247516 #> 942  2020-05-27  2015-06-01  37.773784 #> 943  2020-05-27  2015-07-01  30.973869 #> 944  2020-05-27  2015-08-01  25.052848 #> 945  2020-05-27  2015-09-01  34.323828 #> 946  2020-05-27  2015-10-01  40.247717 #> 947  2020-05-27  2015-11-01  46.661692 #> 948  2020-05-27  2015-12-01  56.229034 #> 949  2020-05-27  2016-01-01  60.067977 #> 950  2020-05-27  2016-02-01  72.655555 #> 951  2020-05-27  2016-03-01  64.251883 #> 952  2020-05-27  2016-04-01  61.921267 #> 953  2020-05-27  2016-05-01  57.610746 #> 954  2020-05-27  2016-06-01  50.371338 #> 955  2020-05-27  2016-07-01  44.687050 #> 956  2020-05-27  2016-08-01  41.555659 #> 957  2020-05-27  2016-09-01  43.380960 #> 958  2020-05-27  2016-10-01  47.428847 #> 959  2020-05-27  2016-11-01  54.391875 #> 960  2020-05-27  2016-12-01  62.743588 #> 961  2020-05-27  2017-01-01  67.976746 #> 962  2020-05-27  2017-02-01  82.061742 #> 963  2020-05-27  2017-03-01  73.643386 #> 964  2020-05-27  2017-04-01  75.176269 #> 965  2020-05-27  2017-05-01  72.254311 #> 966  2020-05-27  2017-06-01  61.844595 #> 967  2020-05-27  2017-07-01  56.302104 #> 968  2020-05-27  2017-08-01  52.100817 #> 969  2020-05-27  2017-09-01  53.362468 #> 970  2020-05-27  2017-10-01  56.780883 #> 971  2020-05-27  2017-11-01  62.560461 #> 972  2020-05-27  2017-12-01  73.698040 #> 973  2020-05-27  2018-01-01  82.275987 #> 974  2020-05-27  2018-02-01 100.892316 #> 975  2020-05-27  2018-03-01  89.952348 #> 976  2020-05-27  2018-04-01  87.247486 #> 977  2020-05-27  2018-05-01  82.724706 #> 978  2020-05-27  2018-06-01  76.517679 #> 979  2020-05-27  2018-07-01  64.810575 #> 980  2020-05-27  2018-08-01  58.327850 #> 981  2020-05-27  2018-09-01  61.685707 #> 982  2020-05-27  2018-10-01  65.669513 #> 983  2020-05-27  2018-11-01  75.711075 #> 984  2020-05-27  2018-12-01  87.822350 #> 985  2020-05-27  2019-01-01  96.465864 #> 986  2020-05-27  2019-02-01 110.099733 #> 987  2020-05-27  2019-03-01 100.303458 #> 988  2020-05-27  2019-04-01  95.583078 #> 989  2020-05-27  2019-05-01  94.662012 #> 990  2020-05-27  2019-06-01  80.770317 #> 991  2020-05-27  2019-07-01  72.160067 #> 992  2020-05-27  2019-08-01  67.973595 #> 993  2020-05-27  2019-09-01  72.640838 #> 994  2020-05-27  2019-10-01  74.114378 #> 995  2020-05-27  2019-11-01  80.727118 #> 996  2020-05-27  2019-12-01  98.760523 #> 997  2020-05-27  2020-01-01 110.437206 #> 998  2020-05-27  2020-02-01 128.433055 #> 999  2020-05-27  2020-03-01 111.629511 #> 1000 2020-05-27  2020-04-01 104.207331 simulate_long(periodicity = 1L) #>       rev_date time_period obs_values #> 1   2022-03-09  2012-01-01  13.535748 #> 2   2022-03-09  2013-01-01   6.541913 #> 3   2022-03-09  2014-01-01   7.083908 #> 4   2022-03-09  2015-01-01  10.211623 #> 5   2022-03-09  2016-01-01  19.413494 #> 6   2022-03-09  2017-01-01  31.000534 #> 7   2022-03-09  2018-01-01  42.245675 #> 8   2022-03-09  2019-01-01  54.128131 #> 9   2022-03-09  2020-01-01  65.125324 #> 10  2022-03-09  2021-01-01  78.054394 #> 11  2022-03-09  2022-01-01  94.950314 #> 12  2022-03-09  2023-01-01         NA #> 13  2022-03-09  2024-01-01         NA #> 14  2022-03-09  2025-01-01         NA #> 15  2022-03-09  2026-01-01         NA #> 16  2022-03-09  2027-01-01         NA #> 17  2022-03-09  2028-01-01         NA #> 18  2022-03-09  2029-01-01         NA #> 19  2022-03-09  2030-01-01         NA #> 20  2022-03-09  2031-01-01         NA #> 21  2022-03-09  2032-01-01         NA #> 22  2022-03-09  2033-01-01         NA #> 23  2022-03-09  2034-01-01         NA #> 24  2022-03-09  2035-01-01         NA #> 25  2022-03-09  2036-01-01         NA #> 26  2022-03-09  2037-01-01         NA #> 27  2022-03-09  2038-01-01         NA #> 28  2022-03-09  2039-01-01         NA #> 29  2022-03-09  2040-01-01         NA #> 30  2022-03-09  2041-01-01         NA #> 31  2022-03-09  2042-01-01         NA #> 32  2022-03-09  2043-01-01         NA #> 33  2022-03-09  2044-01-01         NA #> 34  2022-03-09  2045-01-01         NA #> 35  2022-03-09  2046-01-01         NA #> 36  2022-03-09  2047-01-01         NA #> 37  2022-03-09  2048-01-01         NA #> 38  2022-03-09  2049-01-01         NA #> 39  2022-03-09  2050-01-01         NA #> 40  2022-03-09  2051-01-01         NA #> 41  2022-03-09  2052-01-01         NA #> 42  2022-03-09  2053-01-01         NA #> 43  2022-03-09  2054-01-01         NA #> 44  2022-03-09  2055-01-01         NA #> 45  2022-03-09  2056-01-01         NA #> 46  2022-03-09  2057-01-01         NA #> 47  2022-03-09  2058-01-01         NA #> 48  2022-03-09  2059-01-01         NA #> 49  2022-03-09  2060-01-01         NA #> 50  2022-03-09  2061-01-01         NA #> 51  2022-03-25  2012-01-01  11.000860 #> 52  2022-03-25  2013-01-01   8.346644 #> 53  2022-03-25  2014-01-01   6.586033 #> 54  2022-03-25  2015-01-01  10.692984 #> 55  2022-03-25  2016-01-01  18.460905 #> 56  2022-03-25  2017-01-01  29.657390 #> 57  2022-03-25  2018-01-01  43.168269 #> 58  2022-03-25  2019-01-01  50.723382 #> 59  2022-03-25  2020-01-01  65.027805 #> 60  2022-03-25  2021-01-01  78.500750 #> 61  2022-03-25  2022-01-01  95.894926 #> 62  2022-03-25  2023-01-01         NA #> 63  2022-03-25  2024-01-01         NA #> 64  2022-03-25  2025-01-01         NA #> 65  2022-03-25  2026-01-01         NA #> 66  2022-03-25  2027-01-01         NA #> 67  2022-03-25  2028-01-01         NA #> 68  2022-03-25  2029-01-01         NA #> 69  2022-03-25  2030-01-01         NA #> 70  2022-03-25  2031-01-01         NA #> 71  2022-03-25  2032-01-01         NA #> 72  2022-03-25  2033-01-01         NA #> 73  2022-03-25  2034-01-01         NA #> 74  2022-03-25  2035-01-01         NA #> 75  2022-03-25  2036-01-01         NA #> 76  2022-03-25  2037-01-01         NA #> 77  2022-03-25  2038-01-01         NA #> 78  2022-03-25  2039-01-01         NA #> 79  2022-03-25  2040-01-01         NA #> 80  2022-03-25  2041-01-01         NA #> 81  2022-03-25  2042-01-01         NA #> 82  2022-03-25  2043-01-01         NA #> 83  2022-03-25  2044-01-01         NA #> 84  2022-03-25  2045-01-01         NA #> 85  2022-03-25  2046-01-01         NA #> 86  2022-03-25  2047-01-01         NA #> 87  2022-03-25  2048-01-01         NA #> 88  2022-03-25  2049-01-01         NA #> 89  2022-03-25  2050-01-01         NA #> 90  2022-03-25  2051-01-01         NA #> 91  2022-03-25  2052-01-01         NA #> 92  2022-03-25  2053-01-01         NA #> 93  2022-03-25  2054-01-01         NA #> 94  2022-03-25  2055-01-01         NA #> 95  2022-03-25  2056-01-01         NA #> 96  2022-03-25  2057-01-01         NA #> 97  2022-03-25  2058-01-01         NA #> 98  2022-03-25  2059-01-01         NA #> 99  2022-03-25  2060-01-01         NA #> 100 2022-03-25  2061-01-01         NA #> 101 2027-07-09  2012-01-01   9.679127 #> 102 2027-07-09  2013-01-01   9.356992 #> 103 2027-07-09  2014-01-01   6.943702 #> 104 2027-07-09  2015-01-01  11.321130 #> 105 2027-07-09  2016-01-01  19.076652 #> 106 2027-07-09  2017-01-01  29.360310 #> 107 2027-07-09  2018-01-01  40.778177 #> 108 2027-07-09  2019-01-01  53.638020 #> 109 2027-07-09  2020-01-01  65.535924 #> 110 2027-07-09  2021-01-01  79.585794 #> 111 2027-07-09  2022-01-01  95.986055 #> 112 2027-07-09  2023-01-01 118.088764 #> 113 2027-07-09  2024-01-01 137.824875 #> 114 2027-07-09  2025-01-01 153.862174 #> 115 2027-07-09  2026-01-01 172.813617 #> 116 2027-07-09  2027-01-01 184.094614 #> 117 2027-07-09  2028-01-01         NA #> 118 2027-07-09  2029-01-01         NA #> 119 2027-07-09  2030-01-01         NA #> 120 2027-07-09  2031-01-01         NA #> 121 2027-07-09  2032-01-01         NA #> 122 2027-07-09  2033-01-01         NA #> 123 2027-07-09  2034-01-01         NA #> 124 2027-07-09  2035-01-01         NA #> 125 2027-07-09  2036-01-01         NA #> 126 2027-07-09  2037-01-01         NA #> 127 2027-07-09  2038-01-01         NA #> 128 2027-07-09  2039-01-01         NA #> 129 2027-07-09  2040-01-01         NA #> 130 2027-07-09  2041-01-01         NA #> 131 2027-07-09  2042-01-01         NA #> 132 2027-07-09  2043-01-01         NA #> 133 2027-07-09  2044-01-01         NA #> 134 2027-07-09  2045-01-01         NA #> 135 2027-07-09  2046-01-01         NA #> 136 2027-07-09  2047-01-01         NA #> 137 2027-07-09  2048-01-01         NA #> 138 2027-07-09  2049-01-01         NA #> 139 2027-07-09  2050-01-01         NA #> 140 2027-07-09  2051-01-01         NA #> 141 2027-07-09  2052-01-01         NA #> 142 2027-07-09  2053-01-01         NA #> 143 2027-07-09  2054-01-01         NA #> 144 2027-07-09  2055-01-01         NA #> 145 2027-07-09  2056-01-01         NA #> 146 2027-07-09  2057-01-01         NA #> 147 2027-07-09  2058-01-01         NA #> 148 2027-07-09  2059-01-01         NA #> 149 2027-07-09  2060-01-01         NA #> 150 2027-07-09  2061-01-01         NA #> 151 2036-09-23  2012-01-01   9.571208 #> 152 2036-09-23  2013-01-01   8.990601 #> 153 2036-09-23  2014-01-01   7.099115 #> 154 2036-09-23  2015-01-01  11.733680 #> 155 2036-09-23  2016-01-01  18.987521 #> 156 2036-09-23  2017-01-01  30.511792 #> 157 2036-09-23  2018-01-01  40.421571 #> 158 2036-09-23  2019-01-01  52.743504 #> 159 2036-09-23  2020-01-01  65.181873 #> 160 2036-09-23  2021-01-01  78.303383 #> 161 2036-09-23  2022-01-01  96.024374 #> 162 2036-09-23  2023-01-01 117.955739 #> 163 2036-09-23  2024-01-01 138.525385 #> 164 2036-09-23  2025-01-01 154.758613 #> 165 2036-09-23  2026-01-01 172.648647 #> 166 2036-09-23  2027-01-01 186.868177 #> 167 2036-09-23  2028-01-01 204.717252 #> 168 2036-09-23  2029-01-01 216.598951 #> 169 2036-09-23  2030-01-01 229.360004 #> 170 2036-09-23  2031-01-01 251.305972 #> 171 2036-09-23  2032-01-01 278.263388 #> 172 2036-09-23  2033-01-01 293.825990 #> 173 2036-09-23  2034-01-01 315.261150 #> 174 2036-09-23  2035-01-01 330.208688 #> 175 2036-09-23  2036-01-01 343.382060 #> 176 2036-09-23  2037-01-01         NA #> 177 2036-09-23  2038-01-01         NA #> 178 2036-09-23  2039-01-01         NA #> 179 2036-09-23  2040-01-01         NA #> 180 2036-09-23  2041-01-01         NA #> 181 2036-09-23  2042-01-01         NA #> 182 2036-09-23  2043-01-01         NA #> 183 2036-09-23  2044-01-01         NA #> 184 2036-09-23  2045-01-01         NA #> 185 2036-09-23  2046-01-01         NA #> 186 2036-09-23  2047-01-01         NA #> 187 2036-09-23  2048-01-01         NA #> 188 2036-09-23  2049-01-01         NA #> 189 2036-09-23  2050-01-01         NA #> 190 2036-09-23  2051-01-01         NA #> 191 2036-09-23  2052-01-01         NA #> 192 2036-09-23  2053-01-01         NA #> 193 2036-09-23  2054-01-01         NA #> 194 2036-09-23  2055-01-01         NA #> 195 2036-09-23  2056-01-01         NA #> 196 2036-09-23  2057-01-01         NA #> 197 2036-09-23  2058-01-01         NA #> 198 2036-09-23  2059-01-01         NA #> 199 2036-09-23  2060-01-01         NA #> 200 2036-09-23  2061-01-01         NA #> 201 2043-11-04  2012-01-01   9.908349 #> 202 2043-11-04  2013-01-01   8.771374 #> 203 2043-11-04  2014-01-01   7.032497 #> 204 2043-11-04  2015-01-01  11.429858 #> 205 2043-11-04  2016-01-01  18.977367 #> 206 2043-11-04  2017-01-01  30.288844 #> 207 2043-11-04  2018-01-01  40.546970 #> 208 2043-11-04  2019-01-01  52.843717 #> 209 2043-11-04  2020-01-01  65.221750 #> 210 2043-11-04  2021-01-01  78.777768 #> 211 2043-11-04  2022-01-01  95.619896 #> 212 2043-11-04  2023-01-01 118.042566 #> 213 2043-11-04  2024-01-01 139.270975 #> 214 2043-11-04  2025-01-01 155.269668 #> 215 2043-11-04  2026-01-01 171.885828 #> 216 2043-11-04  2027-01-01 186.790583 #> 217 2043-11-04  2028-01-01 200.724688 #> 218 2043-11-04  2029-01-01 215.749536 #> 219 2043-11-04  2030-01-01 231.054565 #> 220 2043-11-04  2031-01-01 253.967432 #> 221 2043-11-04  2032-01-01 276.302544 #> 222 2043-11-04  2033-01-01 296.754419 #> 223 2043-11-04  2034-01-01 313.208767 #> 224 2043-11-04  2035-01-01 327.794441 #> 225 2043-11-04  2036-01-01 341.349911 #> 226 2043-11-04  2037-01-01 360.281669 #> 227 2043-11-04  2038-01-01 371.123419 #> 228 2043-11-04  2039-01-01 387.932148 #> 229 2043-11-04  2040-01-01 401.319982 #> 230 2043-11-04  2041-01-01 426.311645 #> 231 2043-11-04  2042-01-01 444.820770 #> 232 2043-11-04  2043-01-01 471.194223 #> 233 2043-11-04  2044-01-01         NA #> 234 2043-11-04  2045-01-01         NA #> 235 2043-11-04  2046-01-01         NA #> 236 2043-11-04  2047-01-01         NA #> 237 2043-11-04  2048-01-01         NA #> 238 2043-11-04  2049-01-01         NA #> 239 2043-11-04  2050-01-01         NA #> 240 2043-11-04  2051-01-01         NA #> 241 2043-11-04  2052-01-01         NA #> 242 2043-11-04  2053-01-01         NA #> 243 2043-11-04  2054-01-01         NA #> 244 2043-11-04  2055-01-01         NA #> 245 2043-11-04  2056-01-01         NA #> 246 2043-11-04  2057-01-01         NA #> 247 2043-11-04  2058-01-01         NA #> 248 2043-11-04  2059-01-01         NA #> 249 2043-11-04  2060-01-01         NA #> 250 2043-11-04  2061-01-01         NA #> 251 2054-09-26  2012-01-01   9.922436 #> 252 2054-09-26  2013-01-01   9.010192 #> 253 2054-09-26  2014-01-01   7.119624 #> 254 2054-09-26  2015-01-01  11.643540 #> 255 2054-09-26  2016-01-01  18.859733 #> 256 2054-09-26  2017-01-01  30.120996 #> 257 2054-09-26  2018-01-01  40.671539 #> 258 2054-09-26  2019-01-01  52.749502 #> 259 2054-09-26  2020-01-01  65.275395 #> 260 2054-09-26  2021-01-01  78.806062 #> 261 2054-09-26  2022-01-01  95.606552 #> 262 2054-09-26  2023-01-01 118.303343 #> 263 2054-09-26  2024-01-01 138.495086 #> 264 2054-09-26  2025-01-01 155.745091 #> 265 2054-09-26  2026-01-01 171.606046 #> 266 2054-09-26  2027-01-01 186.179235 #> 267 2054-09-26  2028-01-01 202.469148 #> 268 2054-09-26  2029-01-01 214.411482 #> 269 2054-09-26  2030-01-01 230.537884 #> 270 2054-09-26  2031-01-01 252.069936 #> 271 2054-09-26  2032-01-01 275.367906 #> 272 2054-09-26  2033-01-01 295.714338 #> 273 2054-09-26  2034-01-01 313.863954 #> 274 2054-09-26  2035-01-01 327.754454 #> 275 2054-09-26  2036-01-01 343.890384 #> 276 2054-09-26  2037-01-01 359.451482 #> 277 2054-09-26  2038-01-01 373.912612 #> 278 2054-09-26  2039-01-01 385.636155 #> 279 2054-09-26  2040-01-01 403.029030 #> 280 2054-09-26  2041-01-01 424.797082 #> 281 2054-09-26  2042-01-01 444.861626 #> 282 2054-09-26  2043-01-01 468.473468 #> 283 2054-09-26  2044-01-01 493.150206 #> 284 2054-09-26  2045-01-01 518.298541 #> 285 2054-09-26  2046-01-01 547.721841 #> 286 2054-09-26  2047-01-01 568.822246 #> 287 2054-09-26  2048-01-01 595.469276 #> 288 2054-09-26  2049-01-01 624.702021 #> 289 2054-09-26  2050-01-01 650.843777 #> 290 2054-09-26  2051-01-01 682.397884 #> 291 2054-09-26  2052-01-01 716.916100 #> 292 2054-09-26  2053-01-01 749.742308 #> 293 2054-09-26  2054-01-01 787.580935 #> 294 2054-09-26  2055-01-01         NA #> 295 2054-09-26  2056-01-01         NA #> 296 2054-09-26  2057-01-01         NA #> 297 2054-09-26  2058-01-01         NA #> 298 2054-09-26  2059-01-01         NA #> 299 2054-09-26  2060-01-01         NA #> 300 2054-09-26  2061-01-01         NA #> 301 2058-02-23  2012-01-01   9.990272 #> 302 2058-02-23  2013-01-01   8.967737 #> 303 2058-02-23  2014-01-01   7.159371 #> 304 2058-02-23  2015-01-01  11.559678 #> 305 2058-02-23  2016-01-01  18.756725 #> 306 2058-02-23  2017-01-01  30.141063 #> 307 2058-02-23  2018-01-01  40.621077 #> 308 2058-02-23  2019-01-01  52.770235 #> 309 2058-02-23  2020-01-01  65.220173 #> 310 2058-02-23  2021-01-01  78.777869 #> 311 2058-02-23  2022-01-01  95.582082 #> 312 2058-02-23  2023-01-01 118.154589 #> 313 2058-02-23  2024-01-01 138.449584 #> 314 2058-02-23  2025-01-01 155.960001 #> 315 2058-02-23  2026-01-01 172.245409 #> 316 2058-02-23  2027-01-01 186.282502 #> 317 2058-02-23  2028-01-01 201.423820 #> 318 2058-02-23  2029-01-01 214.421158 #> 319 2058-02-23  2030-01-01 231.303189 #> 320 2058-02-23  2031-01-01 252.800029 #> 321 2058-02-23  2032-01-01 274.686230 #> 322 2058-02-23  2033-01-01 296.361314 #> 323 2058-02-23  2034-01-01 313.758756 #> 324 2058-02-23  2035-01-01 328.324880 #> 325 2058-02-23  2036-01-01 343.279744 #> 326 2058-02-23  2037-01-01 358.988451 #> 327 2058-02-23  2038-01-01 372.909712 #> 328 2058-02-23  2039-01-01 387.337314 #> 329 2058-02-23  2040-01-01 402.918725 #> 330 2058-02-23  2041-01-01 424.821992 #> 331 2058-02-23  2042-01-01 446.565535 #> 332 2058-02-23  2043-01-01 468.211043 #> 333 2058-02-23  2044-01-01 490.839311 #> 334 2058-02-23  2045-01-01 519.965545 #> 335 2058-02-23  2046-01-01 548.611542 #> 336 2058-02-23  2047-01-01 570.296568 #> 337 2058-02-23  2048-01-01 595.676975 #> 338 2058-02-23  2049-01-01 622.923772 #> 339 2058-02-23  2050-01-01 647.980009 #> 340 2058-02-23  2051-01-01 680.959411 #> 341 2058-02-23  2052-01-01 717.129933 #> 342 2058-02-23  2053-01-01 750.841867 #> 343 2058-02-23  2054-01-01 784.956130 #> 344 2058-02-23  2055-01-01 819.062972 #> 345 2058-02-23  2056-01-01 853.325545 #> 346 2058-02-23  2057-01-01 885.583212 #> 347 2058-02-23  2058-01-01 919.258810 #> 348 2058-02-23  2059-01-01         NA #> 349 2058-02-23  2060-01-01         NA #> 350 2058-02-23  2061-01-01         NA #> 351 2058-05-01  2012-01-01   9.980974 #> 352 2058-05-01  2013-01-01   8.970210 #> 353 2058-05-01  2014-01-01   7.180197 #> 354 2058-05-01  2015-01-01  11.596381 #> 355 2058-05-01  2016-01-01  18.781094 #> 356 2058-05-01  2017-01-01  30.155613 #> 357 2058-05-01  2018-01-01  40.628326 #> 358 2058-05-01  2019-01-01  52.792717 #> 359 2058-05-01  2020-01-01  65.225239 #> 360 2058-05-01  2021-01-01  78.790257 #> 361 2058-05-01  2022-01-01  95.591765 #> 362 2058-05-01  2023-01-01 117.979770 #> 363 2058-05-01  2024-01-01 138.675505 #> 364 2058-05-01  2025-01-01 155.828575 #> 365 2058-05-01  2026-01-01 172.197381 #> 366 2058-05-01  2027-01-01 186.092068 #> 367 2058-05-01  2028-01-01 200.866784 #> 368 2058-05-01  2029-01-01 214.481221 #> 369 2058-05-01  2030-01-01 231.399172 #> 370 2058-05-01  2031-01-01 252.552526 #> 371 2058-05-01  2032-01-01 275.134193 #> 372 2058-05-01  2033-01-01 296.227911 #> 373 2058-05-01  2034-01-01 313.353939 #> 374 2058-05-01  2035-01-01 328.489085 #> 375 2058-05-01  2036-01-01 343.182827 #> 376 2058-05-01  2037-01-01 358.989043 #> 377 2058-05-01  2038-01-01 373.519555 #> 378 2058-05-01  2039-01-01 386.753302 #> 379 2058-05-01  2040-01-01 403.430533 #> 380 2058-05-01  2041-01-01 424.995572 #> 381 2058-05-01  2042-01-01 446.906197 #> 382 2058-05-01  2043-01-01 467.775825 #> 383 2058-05-01  2044-01-01 491.726703 #> 384 2058-05-01  2045-01-01 519.251319 #> 385 2058-05-01  2046-01-01 545.439341 #> 386 2058-05-01  2047-01-01 569.643517 #> 387 2058-05-01  2048-01-01 595.779914 #> 388 2058-05-01  2049-01-01 623.467664 #> 389 2058-05-01  2050-01-01 648.905934 #> 390 2058-05-01  2051-01-01 681.426556 #> 391 2058-05-01  2052-01-01 715.688566 #> 392 2058-05-01  2053-01-01 750.105913 #> 393 2058-05-01  2054-01-01 785.604941 #> 394 2058-05-01  2055-01-01 816.843872 #> 395 2058-05-01  2056-01-01 853.507434 #> 396 2058-05-01  2057-01-01 884.659457 #> 397 2058-05-01  2058-01-01 920.139957 #> 398 2058-05-01  2059-01-01         NA #> 399 2058-05-01  2060-01-01         NA #> 400 2058-05-01  2061-01-01         NA #> 401 2059-08-01  2012-01-01   9.975189 #> 402 2059-08-01  2013-01-01   8.974522 #> 403 2059-08-01  2014-01-01   7.192279 #> 404 2059-08-01  2015-01-01  11.578621 #> 405 2059-08-01  2016-01-01  18.745324 #> 406 2059-08-01  2017-01-01  30.152942 #> 407 2059-08-01  2018-01-01  40.634829 #> 408 2059-08-01  2019-01-01  52.798313 #> 409 2059-08-01  2020-01-01  65.212716 #> 410 2059-08-01  2021-01-01  78.796193 #> 411 2059-08-01  2022-01-01  95.584197 #> 412 2059-08-01  2023-01-01 118.127408 #> 413 2059-08-01  2024-01-01 138.546037 #> 414 2059-08-01  2025-01-01 155.753176 #> 415 2059-08-01  2026-01-01 172.224116 #> 416 2059-08-01  2027-01-01 186.043251 #> 417 2059-08-01  2028-01-01 201.153050 #> 418 2059-08-01  2029-01-01 214.352490 #> 419 2059-08-01  2030-01-01 231.348010 #> 420 2059-08-01  2031-01-01 252.607014 #> 421 2059-08-01  2032-01-01 275.192076 #> 422 2059-08-01  2033-01-01 296.224502 #> 423 2059-08-01  2034-01-01 313.420618 #> 424 2059-08-01  2035-01-01 328.309518 #> 425 2059-08-01  2036-01-01 343.086375 #> 426 2059-08-01  2037-01-01 359.115694 #> 427 2059-08-01  2038-01-01 373.452864 #> 428 2059-08-01  2039-01-01 386.883408 #> 429 2059-08-01  2040-01-01 403.272054 #> 430 2059-08-01  2041-01-01 425.463141 #> 431 2059-08-01  2042-01-01 446.294079 #> 432 2059-08-01  2043-01-01 467.821083 #> 433 2059-08-01  2044-01-01 492.694830 #> 434 2059-08-01  2045-01-01 518.908637 #> 435 2059-08-01  2046-01-01 546.338169 #> 436 2059-08-01  2047-01-01 569.815794 #> 437 2059-08-01  2048-01-01 596.422811 #> 438 2059-08-01  2049-01-01 623.226692 #> 439 2059-08-01  2050-01-01 648.271227 #> 440 2059-08-01  2051-01-01 681.318547 #> 441 2059-08-01  2052-01-01 716.950135 #> 442 2059-08-01  2053-01-01 750.319281 #> 443 2059-08-01  2054-01-01 785.907839 #> 444 2059-08-01  2055-01-01 818.082720 #> 445 2059-08-01  2056-01-01 851.184894 #> 446 2059-08-01  2057-01-01 883.891358 #> 447 2059-08-01  2058-01-01 918.744927 #> 448 2059-08-01  2059-01-01 953.027933 #> 449 2059-08-01  2060-01-01         NA #> 450 2059-08-01  2061-01-01         NA #> 451 2059-10-11  2012-01-01   9.967414 #> 452 2059-10-11  2013-01-01   8.972305 #> 453 2059-10-11  2014-01-01   7.180815 #> 454 2059-10-11  2015-01-01  11.587788 #> 455 2059-10-11  2016-01-01  18.756608 #> 456 2059-10-11  2017-01-01  30.156555 #> 457 2059-10-11  2018-01-01  40.639698 #> 458 2059-10-11  2019-01-01  52.786197 #> 459 2059-10-11  2020-01-01  65.216239 #> 460 2059-10-11  2021-01-01  78.796196 #> 461 2059-10-11  2022-01-01  95.583670 #> 462 2059-10-11  2023-01-01 118.118238 #> 463 2059-10-11  2024-01-01 138.574168 #> 464 2059-10-11  2025-01-01 155.780824 #> 465 2059-10-11  2026-01-01 172.219004 #> 466 2059-10-11  2027-01-01 186.059063 #> 467 2059-10-11  2028-01-01 201.094598 #> 468 2059-10-11  2029-01-01 214.334992 #> 469 2059-10-11  2030-01-01 231.333780 #> 470 2059-10-11  2031-01-01 252.664282 #> 471 2059-10-11  2032-01-01 275.209570 #> 472 2059-10-11  2033-01-01 296.221098 #> 473 2059-10-11  2034-01-01 313.408873 #> 474 2059-10-11  2035-01-01 328.247824 #> 475 2059-10-11  2036-01-01 343.173769 #> 476 2059-10-11  2037-01-01 359.035080 #> 477 2059-10-11  2038-01-01 373.403525 #> 478 2059-10-11  2039-01-01 386.885875 #> 479 2059-10-11  2040-01-01 403.613977 #> 480 2059-10-11  2041-01-01 425.255819 #> 481 2059-10-11  2042-01-01 445.977811 #> 482 2059-10-11  2043-01-01 468.004464 #> 483 2059-10-11  2044-01-01 492.405428 #> 484 2059-10-11  2045-01-01 519.334908 #> 485 2059-10-11  2046-01-01 546.278629 #> 486 2059-10-11  2047-01-01 569.527255 #> 487 2059-10-11  2048-01-01 595.666674 #> 488 2059-10-11  2049-01-01 623.301466 #> 489 2059-10-11  2050-01-01 648.546109 #> 490 2059-10-11  2051-01-01 681.670413 #> 491 2059-10-11  2052-01-01 716.563008 #> 492 2059-10-11  2053-01-01 750.893467 #> 493 2059-10-11  2054-01-01 785.728987 #> 494 2059-10-11  2055-01-01 817.989391 #> 495 2059-10-11  2056-01-01 851.797220 #> 496 2059-10-11  2057-01-01 884.694241 #> 497 2059-10-11  2058-01-01 918.973301 #> 498 2059-10-11  2059-01-01 953.982862 #> 499 2059-10-11  2060-01-01         NA #> 500 2059-10-11  2061-01-01         NA simulate_long(start_period = as.Date(\"2000-01-01\"),               n_period = 10L * 12L,               periodicity = 12L) #>        rev_date time_period   obs_values #> 1    2002-08-27  2000-01-01   12.0109215 #> 2    2002-08-27  2000-02-01   10.7904869 #> 3    2002-08-27  2000-03-01    7.5406622 #> 4    2002-08-27  2000-04-01   11.5725062 #> 5    2002-08-27  2000-05-01   18.6266956 #> 6    2002-08-27  2000-06-01    9.4818351 #> 7    2002-08-27  2000-07-01    8.9628562 #> 8    2002-08-27  2000-08-01    8.9358199 #> 9    2002-08-27  2000-09-01   11.5821460 #> 10   2002-08-27  2000-10-01   14.0257601 #> 11   2002-08-27  2000-11-01   13.7733705 #> 12   2002-08-27  2000-12-01   17.1115393 #> 13   2002-08-27  2001-01-01   21.6270327 #> 14   2002-08-27  2001-02-01   21.2081605 #> 15   2002-08-27  2001-03-01   18.3635617 #> 16   2002-08-27  2001-04-01   15.4350054 #> 17   2002-08-27  2001-05-01   21.5557650 #> 18   2002-08-27  2001-06-01   16.2968005 #> 19   2002-08-27  2001-07-01   12.8277943 #> 20   2002-08-27  2001-08-01   13.6781807 #> 21   2002-08-27  2001-09-01   11.4578925 #> 22   2002-08-27  2001-10-01   17.4956194 #> 23   2002-08-27  2001-11-01   20.3871942 #> 24   2002-08-27  2001-12-01   17.4967627 #> 25   2002-08-27  2002-01-01   21.6241692 #> 26   2002-08-27  2002-02-01   20.3026649 #> 27   2002-08-27  2002-03-01   15.6176969 #> 28   2002-08-27  2002-04-01   16.3011265 #> 29   2002-08-27  2002-05-01   20.5467424 #> 30   2002-08-27  2002-06-01    7.5214802 #> 31   2002-08-27  2002-07-01    3.5829824 #> 32   2002-08-27  2002-08-01    1.6779847 #> 33   2002-08-27  2002-09-01           NA #> 34   2002-08-27  2002-10-01           NA #> 35   2002-08-27  2002-11-01           NA #> 36   2002-08-27  2002-12-01           NA #> 37   2002-08-27  2003-01-01           NA #> 38   2002-08-27  2003-02-01           NA #> 39   2002-08-27  2003-03-01           NA #> 40   2002-08-27  2003-04-01           NA #> 41   2002-08-27  2003-05-01           NA #> 42   2002-08-27  2003-06-01           NA #> 43   2002-08-27  2003-07-01           NA #> 44   2002-08-27  2003-08-01           NA #> 45   2002-08-27  2003-09-01           NA #> 46   2002-08-27  2003-10-01           NA #> 47   2002-08-27  2003-11-01           NA #> 48   2002-08-27  2003-12-01           NA #> 49   2002-08-27  2004-01-01           NA #> 50   2002-08-27  2004-02-01           NA #> 51   2002-08-27  2004-03-01           NA #> 52   2002-08-27  2004-04-01           NA #> 53   2002-08-27  2004-05-01           NA #> 54   2002-08-27  2004-06-01           NA #> 55   2002-08-27  2004-07-01           NA #> 56   2002-08-27  2004-08-01           NA #> 57   2002-08-27  2004-09-01           NA #> 58   2002-08-27  2004-10-01           NA #> 59   2002-08-27  2004-11-01           NA #> 60   2002-08-27  2004-12-01           NA #> 61   2002-08-27  2005-01-01           NA #> 62   2002-08-27  2005-02-01           NA #> 63   2002-08-27  2005-03-01           NA #> 64   2002-08-27  2005-04-01           NA #> 65   2002-08-27  2005-05-01           NA #> 66   2002-08-27  2005-06-01           NA #> 67   2002-08-27  2005-07-01           NA #> 68   2002-08-27  2005-08-01           NA #> 69   2002-08-27  2005-09-01           NA #> 70   2002-08-27  2005-10-01           NA #> 71   2002-08-27  2005-11-01           NA #> 72   2002-08-27  2005-12-01           NA #> 73   2002-08-27  2006-01-01           NA #> 74   2002-08-27  2006-02-01           NA #> 75   2002-08-27  2006-03-01           NA #> 76   2002-08-27  2006-04-01           NA #> 77   2002-08-27  2006-05-01           NA #> 78   2002-08-27  2006-06-01           NA #> 79   2002-08-27  2006-07-01           NA #> 80   2002-08-27  2006-08-01           NA #> 81   2002-08-27  2006-09-01           NA #> 82   2002-08-27  2006-10-01           NA #> 83   2002-08-27  2006-11-01           NA #> 84   2002-08-27  2006-12-01           NA #> 85   2002-08-27  2007-01-01           NA #> 86   2002-08-27  2007-02-01           NA #> 87   2002-08-27  2007-03-01           NA #> 88   2002-08-27  2007-04-01           NA #> 89   2002-08-27  2007-05-01           NA #> 90   2002-08-27  2007-06-01           NA #> 91   2002-08-27  2007-07-01           NA #> 92   2002-08-27  2007-08-01           NA #> 93   2002-08-27  2007-09-01           NA #> 94   2002-08-27  2007-10-01           NA #> 95   2002-08-27  2007-11-01           NA #> 96   2002-08-27  2007-12-01           NA #> 97   2002-08-27  2008-01-01           NA #> 98   2002-08-27  2008-02-01           NA #> 99   2002-08-27  2008-03-01           NA #> 100  2002-08-27  2008-04-01           NA #> 101  2002-08-27  2008-05-01           NA #> 102  2002-08-27  2008-06-01           NA #> 103  2002-08-27  2008-07-01           NA #> 104  2002-08-27  2008-08-01           NA #> 105  2002-08-27  2008-09-01           NA #> 106  2002-08-27  2008-10-01           NA #> 107  2002-08-27  2008-11-01           NA #> 108  2002-08-27  2008-12-01           NA #> 109  2002-08-27  2009-01-01           NA #> 110  2002-08-27  2009-02-01           NA #> 111  2002-08-27  2009-03-01           NA #> 112  2002-08-27  2009-04-01           NA #> 113  2002-08-27  2009-05-01           NA #> 114  2002-08-27  2009-06-01           NA #> 115  2002-08-27  2009-07-01           NA #> 116  2002-08-27  2009-08-01           NA #> 117  2002-08-27  2009-09-01           NA #> 118  2002-08-27  2009-10-01           NA #> 119  2002-08-27  2009-11-01           NA #> 120  2002-08-27  2009-12-01           NA #> 121  2002-09-26  2000-01-01   10.5061724 #> 122  2002-09-26  2000-02-01   14.0494084 #> 123  2002-09-26  2000-03-01    8.6119127 #> 124  2002-09-26  2000-04-01   12.3364538 #> 125  2002-09-26  2000-05-01   16.4500533 #> 126  2002-09-26  2000-06-01   10.6763013 #> 127  2002-09-26  2000-07-01   13.0387627 #> 128  2002-09-26  2000-08-01    8.1583235 #> 129  2002-09-26  2000-09-01    9.8499079 #> 130  2002-09-26  2000-10-01   15.7888301 #> 131  2002-09-26  2000-11-01   14.5287930 #> 132  2002-09-26  2000-12-01   15.5196846 #> 133  2002-09-26  2001-01-01   21.0901793 #> 134  2002-09-26  2001-02-01   22.3796806 #> 135  2002-09-26  2001-03-01   17.2029346 #> 136  2002-09-26  2001-04-01   19.1990241 #> 137  2002-09-26  2001-05-01   21.3633641 #> 138  2002-09-26  2001-06-01   17.3513828 #> 139  2002-09-26  2001-07-01   14.5057101 #> 140  2002-09-26  2001-08-01   15.1229127 #> 141  2002-09-26  2001-09-01   11.4373261 #> 142  2002-09-26  2001-10-01   16.2022720 #> 143  2002-09-26  2001-11-01   16.2237618 #> 144  2002-09-26  2001-12-01   17.4517627 #> 145  2002-09-26  2002-01-01   18.9778520 #> 146  2002-09-26  2002-02-01   17.5858025 #> 147  2002-09-26  2002-03-01   18.9816914 #> 148  2002-09-26  2002-04-01   17.7387959 #> 149  2002-09-26  2002-05-01   19.3580793 #> 150  2002-09-26  2002-06-01    7.2295187 #> 151  2002-09-26  2002-07-01    4.2782585 #> 152  2002-09-26  2002-08-01    3.3442310 #> 153  2002-09-26  2002-09-01   -1.2325363 #> 154  2002-09-26  2002-10-01           NA #> 155  2002-09-26  2002-11-01           NA #> 156  2002-09-26  2002-12-01           NA #> 157  2002-09-26  2003-01-01           NA #> 158  2002-09-26  2003-02-01           NA #> 159  2002-09-26  2003-03-01           NA #> 160  2002-09-26  2003-04-01           NA #> 161  2002-09-26  2003-05-01           NA #> 162  2002-09-26  2003-06-01           NA #> 163  2002-09-26  2003-07-01           NA #> 164  2002-09-26  2003-08-01           NA #> 165  2002-09-26  2003-09-01           NA #> 166  2002-09-26  2003-10-01           NA #> 167  2002-09-26  2003-11-01           NA #> 168  2002-09-26  2003-12-01           NA #> 169  2002-09-26  2004-01-01           NA #> 170  2002-09-26  2004-02-01           NA #> 171  2002-09-26  2004-03-01           NA #> 172  2002-09-26  2004-04-01           NA #> 173  2002-09-26  2004-05-01           NA #> 174  2002-09-26  2004-06-01           NA #> 175  2002-09-26  2004-07-01           NA #> 176  2002-09-26  2004-08-01           NA #> 177  2002-09-26  2004-09-01           NA #> 178  2002-09-26  2004-10-01           NA #> 179  2002-09-26  2004-11-01           NA #> 180  2002-09-26  2004-12-01           NA #> 181  2002-09-26  2005-01-01           NA #> 182  2002-09-26  2005-02-01           NA #> 183  2002-09-26  2005-03-01           NA #> 184  2002-09-26  2005-04-01           NA #> 185  2002-09-26  2005-05-01           NA #> 186  2002-09-26  2005-06-01           NA #> 187  2002-09-26  2005-07-01           NA #> 188  2002-09-26  2005-08-01           NA #> 189  2002-09-26  2005-09-01           NA #> 190  2002-09-26  2005-10-01           NA #> 191  2002-09-26  2005-11-01           NA #> 192  2002-09-26  2005-12-01           NA #> 193  2002-09-26  2006-01-01           NA #> 194  2002-09-26  2006-02-01           NA #> 195  2002-09-26  2006-03-01           NA #> 196  2002-09-26  2006-04-01           NA #> 197  2002-09-26  2006-05-01           NA #> 198  2002-09-26  2006-06-01           NA #> 199  2002-09-26  2006-07-01           NA #> 200  2002-09-26  2006-08-01           NA #> 201  2002-09-26  2006-09-01           NA #> 202  2002-09-26  2006-10-01           NA #> 203  2002-09-26  2006-11-01           NA #> 204  2002-09-26  2006-12-01           NA #> 205  2002-09-26  2007-01-01           NA #> 206  2002-09-26  2007-02-01           NA #> 207  2002-09-26  2007-03-01           NA #> 208  2002-09-26  2007-04-01           NA #> 209  2002-09-26  2007-05-01           NA #> 210  2002-09-26  2007-06-01           NA #> 211  2002-09-26  2007-07-01           NA #> 212  2002-09-26  2007-08-01           NA #> 213  2002-09-26  2007-09-01           NA #> 214  2002-09-26  2007-10-01           NA #> 215  2002-09-26  2007-11-01           NA #> 216  2002-09-26  2007-12-01           NA #> 217  2002-09-26  2008-01-01           NA #> 218  2002-09-26  2008-02-01           NA #> 219  2002-09-26  2008-03-01           NA #> 220  2002-09-26  2008-04-01           NA #> 221  2002-09-26  2008-05-01           NA #> 222  2002-09-26  2008-06-01           NA #> 223  2002-09-26  2008-07-01           NA #> 224  2002-09-26  2008-08-01           NA #> 225  2002-09-26  2008-09-01           NA #> 226  2002-09-26  2008-10-01           NA #> 227  2002-09-26  2008-11-01           NA #> 228  2002-09-26  2008-12-01           NA #> 229  2002-09-26  2009-01-01           NA #> 230  2002-09-26  2009-02-01           NA #> 231  2002-09-26  2009-03-01           NA #> 232  2002-09-26  2009-04-01           NA #> 233  2002-09-26  2009-05-01           NA #> 234  2002-09-26  2009-06-01           NA #> 235  2002-09-26  2009-07-01           NA #> 236  2002-09-26  2009-08-01           NA #> 237  2002-09-26  2009-09-01           NA #> 238  2002-09-26  2009-10-01           NA #> 239  2002-09-26  2009-11-01           NA #> 240  2002-09-26  2009-12-01           NA #> 241  2004-07-03  2000-01-01   10.9214698 #> 242  2004-07-03  2000-02-01   12.7349749 #> 243  2004-07-03  2000-03-01    9.0860469 #> 244  2004-07-03  2000-04-01   12.3064510 #> 245  2004-07-03  2000-05-01   15.8604818 #> 246  2004-07-03  2000-06-01    9.0804525 #> 247  2004-07-03  2000-07-01   10.6832089 #> 248  2004-07-03  2000-08-01   10.0709207 #> 249  2004-07-03  2000-09-01   11.0510507 #> 250  2004-07-03  2000-10-01   14.6661157 #> 251  2004-07-03  2000-11-01   14.5932565 #> 252  2004-07-03  2000-12-01   15.1046934 #> 253  2004-07-03  2001-01-01   21.4232564 #> 254  2004-07-03  2001-02-01   22.1147497 #> 255  2004-07-03  2001-03-01   17.4514005 #> 256  2004-07-03  2001-04-01   18.8762972 #> 257  2004-07-03  2001-05-01   21.9641544 #> 258  2004-07-03  2001-06-01   15.2178410 #> 259  2004-07-03  2001-07-01   14.7152415 #> 260  2004-07-03  2001-08-01   14.1423599 #> 261  2004-07-03  2001-09-01   13.3719208 #> 262  2004-07-03  2001-10-01   18.3262121 #> 263  2004-07-03  2001-11-01   18.2399710 #> 264  2004-07-03  2001-12-01   16.9835940 #> 265  2004-07-03  2002-01-01   19.2161044 #> 266  2004-07-03  2002-02-01   18.9786297 #> 267  2004-07-03  2002-03-01   18.7039229 #> 268  2004-07-03  2002-04-01   20.3605739 #> 269  2004-07-03  2002-05-01   19.3494747 #> 270  2004-07-03  2002-06-01    6.9329079 #> 271  2004-07-03  2002-07-01    4.8805196 #> 272  2004-07-03  2002-08-01    2.6519799 #> 273  2004-07-03  2002-09-01   -2.7517188 #> 274  2004-07-03  2002-10-01    1.9555179 #> 275  2004-07-03  2002-11-01    3.9597720 #> 276  2004-07-03  2002-12-01   -1.2865092 #> 277  2004-07-03  2003-01-01    1.3301186 #> 278  2004-07-03  2003-02-01   -1.0102306 #> 279  2004-07-03  2003-03-01   -3.9166514 #> 280  2004-07-03  2003-04-01   -7.4006254 #> 281  2004-07-03  2003-05-01   -4.3294627 #> 282  2004-07-03  2003-06-01  -11.6464712 #> 283  2004-07-03  2003-07-01  -17.8554879 #> 284  2004-07-03  2003-08-01  -21.2244433 #> 285  2004-07-03  2003-09-01  -25.8898928 #> 286  2004-07-03  2003-10-01  -19.7957988 #> 287  2004-07-03  2003-11-01  -23.6891496 #> 288  2004-07-03  2003-12-01  -21.0675153 #> 289  2004-07-03  2004-01-01  -19.8261047 #> 290  2004-07-03  2004-02-01  -22.2053743 #> 291  2004-07-03  2004-03-01  -31.8401936 #> 292  2004-07-03  2004-04-01  -32.7073422 #> 293  2004-07-03  2004-05-01  -42.2052966 #> 294  2004-07-03  2004-06-01  -57.9410262 #> 295  2004-07-03  2004-07-01  -57.4800685 #> 296  2004-07-03  2004-08-01           NA #> 297  2004-07-03  2004-09-01           NA #> 298  2004-07-03  2004-10-01           NA #> 299  2004-07-03  2004-11-01           NA #> 300  2004-07-03  2004-12-01           NA #> 301  2004-07-03  2005-01-01           NA #> 302  2004-07-03  2005-02-01           NA #> 303  2004-07-03  2005-03-01           NA #> 304  2004-07-03  2005-04-01           NA #> 305  2004-07-03  2005-05-01           NA #> 306  2004-07-03  2005-06-01           NA #> 307  2004-07-03  2005-07-01           NA #> 308  2004-07-03  2005-08-01           NA #> 309  2004-07-03  2005-09-01           NA #> 310  2004-07-03  2005-10-01           NA #> 311  2004-07-03  2005-11-01           NA #> 312  2004-07-03  2005-12-01           NA #> 313  2004-07-03  2006-01-01           NA #> 314  2004-07-03  2006-02-01           NA #> 315  2004-07-03  2006-03-01           NA #> 316  2004-07-03  2006-04-01           NA #> 317  2004-07-03  2006-05-01           NA #> 318  2004-07-03  2006-06-01           NA #> 319  2004-07-03  2006-07-01           NA #> 320  2004-07-03  2006-08-01           NA #> 321  2004-07-03  2006-09-01           NA #> 322  2004-07-03  2006-10-01           NA #> 323  2004-07-03  2006-11-01           NA #> 324  2004-07-03  2006-12-01           NA #> 325  2004-07-03  2007-01-01           NA #> 326  2004-07-03  2007-02-01           NA #> 327  2004-07-03  2007-03-01           NA #> 328  2004-07-03  2007-04-01           NA #> 329  2004-07-03  2007-05-01           NA #> 330  2004-07-03  2007-06-01           NA #> 331  2004-07-03  2007-07-01           NA #> 332  2004-07-03  2007-08-01           NA #> 333  2004-07-03  2007-09-01           NA #> 334  2004-07-03  2007-10-01           NA #> 335  2004-07-03  2007-11-01           NA #> 336  2004-07-03  2007-12-01           NA #> 337  2004-07-03  2008-01-01           NA #> 338  2004-07-03  2008-02-01           NA #> 339  2004-07-03  2008-03-01           NA #> 340  2004-07-03  2008-04-01           NA #> 341  2004-07-03  2008-05-01           NA #> 342  2004-07-03  2008-06-01           NA #> 343  2004-07-03  2008-07-01           NA #> 344  2004-07-03  2008-08-01           NA #> 345  2004-07-03  2008-09-01           NA #> 346  2004-07-03  2008-10-01           NA #> 347  2004-07-03  2008-11-01           NA #> 348  2004-07-03  2008-12-01           NA #> 349  2004-07-03  2009-01-01           NA #> 350  2004-07-03  2009-02-01           NA #> 351  2004-07-03  2009-03-01           NA #> 352  2004-07-03  2009-04-01           NA #> 353  2004-07-03  2009-05-01           NA #> 354  2004-07-03  2009-06-01           NA #> 355  2004-07-03  2009-07-01           NA #> 356  2004-07-03  2009-08-01           NA #> 357  2004-07-03  2009-09-01           NA #> 358  2004-07-03  2009-10-01           NA #> 359  2004-07-03  2009-11-01           NA #> 360  2004-07-03  2009-12-01           NA #> 361  2004-07-17  2000-01-01   10.1355572 #> 362  2004-07-17  2000-02-01   12.8396877 #> 363  2004-07-17  2000-03-01    9.0501496 #> 364  2004-07-17  2000-04-01   12.3552693 #> 365  2004-07-17  2000-05-01   15.4483874 #> 366  2004-07-17  2000-06-01    9.8883843 #> 367  2004-07-17  2000-07-01   10.6038297 #> 368  2004-07-17  2000-08-01    9.2301429 #> 369  2004-07-17  2000-09-01   10.8218918 #> 370  2004-07-17  2000-10-01   14.6163369 #> 371  2004-07-17  2000-11-01   13.7163540 #> 372  2004-07-17  2000-12-01   14.9811148 #> 373  2004-07-17  2001-01-01   20.7317072 #> 374  2004-07-17  2001-02-01   22.4125002 #> 375  2004-07-17  2001-03-01   17.2320803 #> 376  2004-07-17  2001-04-01   19.5242589 #> 377  2004-07-17  2001-05-01   22.3755609 #> 378  2004-07-17  2001-06-01   15.0825655 #> 379  2004-07-17  2001-07-01   14.6213078 #> 380  2004-07-17  2001-08-01   13.8380694 #> 381  2004-07-17  2001-09-01   12.7085763 #> 382  2004-07-17  2001-10-01   17.9722112 #> 383  2004-07-17  2001-11-01   17.7053016 #> 384  2004-07-17  2001-12-01   16.9133161 #> 385  2004-07-17  2002-01-01   19.7514702 #> 386  2004-07-17  2002-02-01   19.3406429 #> 387  2004-07-17  2002-03-01   17.8250093 #> 388  2004-07-17  2002-04-01   18.7175925 #> 389  2004-07-17  2002-05-01   18.7336433 #> 390  2004-07-17  2002-06-01    7.1468145 #> 391  2004-07-17  2002-07-01    5.5803223 #> 392  2004-07-17  2002-08-01    2.2566007 #> 393  2004-07-17  2002-09-01   -2.3947350 #> 394  2004-07-17  2002-10-01    3.2952196 #> 395  2004-07-17  2002-11-01    2.0214537 #> 396  2004-07-17  2002-12-01    2.1130194 #> 397  2004-07-17  2003-01-01    2.4371070 #> 398  2004-07-17  2003-02-01    0.4708675 #> 399  2004-07-17  2003-03-01   -1.5432002 #> 400  2004-07-17  2003-04-01   -5.4413433 #> 401  2004-07-17  2003-05-01   -2.8100926 #> 402  2004-07-17  2003-06-01  -16.2683991 #> 403  2004-07-17  2003-07-01  -17.1760690 #> 404  2004-07-17  2003-08-01  -22.9934682 #> 405  2004-07-17  2003-09-01  -25.7530945 #> 406  2004-07-17  2003-10-01  -19.8370994 #> 407  2004-07-17  2003-11-01  -26.4109399 #> 408  2004-07-17  2003-12-01  -21.6084594 #> 409  2004-07-17  2004-01-01  -20.2653754 #> 410  2004-07-17  2004-02-01  -24.8956260 #> 411  2004-07-17  2004-03-01  -31.4225229 #> 412  2004-07-17  2004-04-01  -33.2577327 #> 413  2004-07-17  2004-05-01  -40.9051571 #> 414  2004-07-17  2004-06-01  -57.8787073 #> 415  2004-07-17  2004-07-01  -62.9504954 #> 416  2004-07-17  2004-08-01           NA #> 417  2004-07-17  2004-09-01           NA #> 418  2004-07-17  2004-10-01           NA #> 419  2004-07-17  2004-11-01           NA #> 420  2004-07-17  2004-12-01           NA #> 421  2004-07-17  2005-01-01           NA #> 422  2004-07-17  2005-02-01           NA #> 423  2004-07-17  2005-03-01           NA #> 424  2004-07-17  2005-04-01           NA #> 425  2004-07-17  2005-05-01           NA #> 426  2004-07-17  2005-06-01           NA #> 427  2004-07-17  2005-07-01           NA #> 428  2004-07-17  2005-08-01           NA #> 429  2004-07-17  2005-09-01           NA #> 430  2004-07-17  2005-10-01           NA #> 431  2004-07-17  2005-11-01           NA #> 432  2004-07-17  2005-12-01           NA #> 433  2004-07-17  2006-01-01           NA #> 434  2004-07-17  2006-02-01           NA #> 435  2004-07-17  2006-03-01           NA #> 436  2004-07-17  2006-04-01           NA #> 437  2004-07-17  2006-05-01           NA #> 438  2004-07-17  2006-06-01           NA #> 439  2004-07-17  2006-07-01           NA #> 440  2004-07-17  2006-08-01           NA #> 441  2004-07-17  2006-09-01           NA #> 442  2004-07-17  2006-10-01           NA #> 443  2004-07-17  2006-11-01           NA #> 444  2004-07-17  2006-12-01           NA #> 445  2004-07-17  2007-01-01           NA #> 446  2004-07-17  2007-02-01           NA #> 447  2004-07-17  2007-03-01           NA #> 448  2004-07-17  2007-04-01           NA #> 449  2004-07-17  2007-05-01           NA #> 450  2004-07-17  2007-06-01           NA #> 451  2004-07-17  2007-07-01           NA #> 452  2004-07-17  2007-08-01           NA #> 453  2004-07-17  2007-09-01           NA #> 454  2004-07-17  2007-10-01           NA #> 455  2004-07-17  2007-11-01           NA #> 456  2004-07-17  2007-12-01           NA #> 457  2004-07-17  2008-01-01           NA #> 458  2004-07-17  2008-02-01           NA #> 459  2004-07-17  2008-03-01           NA #> 460  2004-07-17  2008-04-01           NA #> 461  2004-07-17  2008-05-01           NA #> 462  2004-07-17  2008-06-01           NA #> 463  2004-07-17  2008-07-01           NA #> 464  2004-07-17  2008-08-01           NA #> 465  2004-07-17  2008-09-01           NA #> 466  2004-07-17  2008-10-01           NA #> 467  2004-07-17  2008-11-01           NA #> 468  2004-07-17  2008-12-01           NA #> 469  2004-07-17  2009-01-01           NA #> 470  2004-07-17  2009-02-01           NA #> 471  2004-07-17  2009-03-01           NA #> 472  2004-07-17  2009-04-01           NA #> 473  2004-07-17  2009-05-01           NA #> 474  2004-07-17  2009-06-01           NA #> 475  2004-07-17  2009-07-01           NA #> 476  2004-07-17  2009-08-01           NA #> 477  2004-07-17  2009-09-01           NA #> 478  2004-07-17  2009-10-01           NA #> 479  2004-07-17  2009-11-01           NA #> 480  2004-07-17  2009-12-01           NA #> 481  2004-07-31  2000-01-01   10.3294383 #> 482  2004-07-31  2000-02-01   13.0364749 #> 483  2004-07-31  2000-03-01    8.8842616 #> 484  2004-07-31  2000-04-01   12.0113923 #> 485  2004-07-31  2000-05-01   15.3785191 #> 486  2004-07-31  2000-06-01    9.6836017 #> 487  2004-07-31  2000-07-01   10.7147578 #> 488  2004-07-31  2000-08-01    9.5122106 #> 489  2004-07-31  2000-09-01   10.8568828 #> 490  2004-07-31  2000-10-01   14.8262450 #> 491  2004-07-31  2000-11-01   14.1787471 #> 492  2004-07-31  2000-12-01   14.4465810 #> 493  2004-07-31  2001-01-01   20.5538361 #> 494  2004-07-31  2001-02-01   22.2641419 #> 495  2004-07-31  2001-03-01   17.1747564 #> 496  2004-07-31  2001-04-01   19.4711522 #> 497  2004-07-31  2001-05-01   22.3848310 #> 498  2004-07-31  2001-06-01   15.2803882 #> 499  2004-07-31  2001-07-01   14.5072671 #> 500  2004-07-31  2001-08-01   13.5805171 #> 501  2004-07-31  2001-09-01   12.4670079 #> 502  2004-07-31  2001-10-01   18.0975306 #> 503  2004-07-31  2001-11-01   17.7062970 #> 504  2004-07-31  2001-12-01   17.0393199 #> 505  2004-07-31  2002-01-01   19.4938250 #> 506  2004-07-31  2002-02-01   19.4195395 #> 507  2004-07-31  2002-03-01   17.6226744 #> 508  2004-07-31  2002-04-01   18.9934616 #> 509  2004-07-31  2002-05-01   18.8574194 #> 510  2004-07-31  2002-06-01    7.3850226 #> 511  2004-07-31  2002-07-01    5.4336310 #> 512  2004-07-31  2002-08-01    2.3260227 #> 513  2004-07-31  2002-09-01   -2.3279117 #> 514  2004-07-31  2002-10-01    2.2801008 #> 515  2004-07-31  2002-11-01    1.8112824 #> 516  2004-07-31  2002-12-01    2.7670326 #> 517  2004-07-31  2003-01-01    2.2021018 #> 518  2004-07-31  2003-02-01    1.5525037 #> 519  2004-07-31  2003-03-01   -3.3585542 #> 520  2004-07-31  2003-04-01   -4.5587819 #> 521  2004-07-31  2003-05-01   -4.4164633 #> 522  2004-07-31  2003-06-01  -13.2845533 #> 523  2004-07-31  2003-07-01  -14.9380630 #> 524  2004-07-31  2003-08-01  -22.1572422 #> 525  2004-07-31  2003-09-01  -25.8779193 #> 526  2004-07-31  2003-10-01  -19.4654021 #> 527  2004-07-31  2003-11-01  -25.0380421 #> 528  2004-07-31  2003-12-01  -21.4376046 #> 529  2004-07-31  2004-01-01  -21.0221360 #> 530  2004-07-31  2004-02-01  -23.7777506 #> 531  2004-07-31  2004-03-01  -29.5271403 #> 532  2004-07-31  2004-04-01  -33.6713484 #> 533  2004-07-31  2004-05-01  -39.8673175 #> 534  2004-07-31  2004-06-01  -55.7967720 #> 535  2004-07-31  2004-07-01  -61.9709773 #> 536  2004-07-31  2004-08-01           NA #> 537  2004-07-31  2004-09-01           NA #> 538  2004-07-31  2004-10-01           NA #> 539  2004-07-31  2004-11-01           NA #> 540  2004-07-31  2004-12-01           NA #> 541  2004-07-31  2005-01-01           NA #> 542  2004-07-31  2005-02-01           NA #> 543  2004-07-31  2005-03-01           NA #> 544  2004-07-31  2005-04-01           NA #> 545  2004-07-31  2005-05-01           NA #> 546  2004-07-31  2005-06-01           NA #> 547  2004-07-31  2005-07-01           NA #> 548  2004-07-31  2005-08-01           NA #> 549  2004-07-31  2005-09-01           NA #> 550  2004-07-31  2005-10-01           NA #> 551  2004-07-31  2005-11-01           NA #> 552  2004-07-31  2005-12-01           NA #> 553  2004-07-31  2006-01-01           NA #> 554  2004-07-31  2006-02-01           NA #> 555  2004-07-31  2006-03-01           NA #> 556  2004-07-31  2006-04-01           NA #> 557  2004-07-31  2006-05-01           NA #> 558  2004-07-31  2006-06-01           NA #> 559  2004-07-31  2006-07-01           NA #> 560  2004-07-31  2006-08-01           NA #> 561  2004-07-31  2006-09-01           NA #> 562  2004-07-31  2006-10-01           NA #> 563  2004-07-31  2006-11-01           NA #> 564  2004-07-31  2006-12-01           NA #> 565  2004-07-31  2007-01-01           NA #> 566  2004-07-31  2007-02-01           NA #> 567  2004-07-31  2007-03-01           NA #> 568  2004-07-31  2007-04-01           NA #> 569  2004-07-31  2007-05-01           NA #> 570  2004-07-31  2007-06-01           NA #> 571  2004-07-31  2007-07-01           NA #> 572  2004-07-31  2007-08-01           NA #> 573  2004-07-31  2007-09-01           NA #> 574  2004-07-31  2007-10-01           NA #> 575  2004-07-31  2007-11-01           NA #> 576  2004-07-31  2007-12-01           NA #> 577  2004-07-31  2008-01-01           NA #> 578  2004-07-31  2008-02-01           NA #> 579  2004-07-31  2008-03-01           NA #> 580  2004-07-31  2008-04-01           NA #> 581  2004-07-31  2008-05-01           NA #> 582  2004-07-31  2008-06-01           NA #> 583  2004-07-31  2008-07-01           NA #> 584  2004-07-31  2008-08-01           NA #> 585  2004-07-31  2008-09-01           NA #> 586  2004-07-31  2008-10-01           NA #> 587  2004-07-31  2008-11-01           NA #> 588  2004-07-31  2008-12-01           NA #> 589  2004-07-31  2009-01-01           NA #> 590  2004-07-31  2009-02-01           NA #> 591  2004-07-31  2009-03-01           NA #> 592  2004-07-31  2009-04-01           NA #> 593  2004-07-31  2009-05-01           NA #> 594  2004-07-31  2009-06-01           NA #> 595  2004-07-31  2009-07-01           NA #> 596  2004-07-31  2009-08-01           NA #> 597  2004-07-31  2009-09-01           NA #> 598  2004-07-31  2009-10-01           NA #> 599  2004-07-31  2009-11-01           NA #> 600  2004-07-31  2009-12-01           NA #> 601  2004-10-10  2000-01-01   10.4431317 #> 602  2004-10-10  2000-02-01   12.8393470 #> 603  2004-10-10  2000-03-01    8.7669936 #> 604  2004-10-10  2000-04-01   12.1711489 #> 605  2004-10-10  2000-05-01   15.5415553 #> 606  2004-10-10  2000-06-01    9.8355924 #> 607  2004-10-10  2000-07-01   10.8134897 #> 608  2004-10-10  2000-08-01    9.4115184 #> 609  2004-10-10  2000-09-01   10.9597119 #> 610  2004-10-10  2000-10-01   14.7390170 #> 611  2004-10-10  2000-11-01   14.0367397 #> 612  2004-10-10  2000-12-01   14.6476676 #> 613  2004-10-10  2001-01-01   20.8788647 #> 614  2004-10-10  2001-02-01   22.3239854 #> 615  2004-10-10  2001-03-01   17.2180950 #> 616  2004-10-10  2001-04-01   19.3504510 #> 617  2004-10-10  2001-05-01   22.2968607 #> 618  2004-10-10  2001-06-01   15.3196162 #> 619  2004-10-10  2001-07-01   14.7306422 #> 620  2004-10-10  2001-08-01   13.5111380 #> 621  2004-10-10  2001-09-01   12.5434735 #> 622  2004-10-10  2001-10-01   17.8394343 #> 623  2004-10-10  2001-11-01   17.5208537 #> 624  2004-10-10  2001-12-01   17.0812533 #> 625  2004-10-10  2002-01-01   19.6291783 #> 626  2004-10-10  2002-02-01   19.4172696 #> 627  2004-10-10  2002-03-01   17.6257675 #> 628  2004-10-10  2002-04-01   18.9948863 #> 629  2004-10-10  2002-05-01   18.7699435 #> 630  2004-10-10  2002-06-01    7.2869942 #> 631  2004-10-10  2002-07-01    5.2785908 #> 632  2004-10-10  2002-08-01    2.4289522 #> 633  2004-10-10  2002-09-01   -2.5928627 #> 634  2004-10-10  2002-10-01    2.4839842 #> 635  2004-10-10  2002-11-01    2.0042835 #> 636  2004-10-10  2002-12-01    1.5408646 #> 637  2004-10-10  2003-01-01    2.5600863 #> 638  2004-10-10  2003-02-01    0.9971737 #> 639  2004-10-10  2003-03-01   -3.8396783 #> 640  2004-10-10  2003-04-01   -4.8416390 #> 641  2004-10-10  2003-05-01   -4.3990518 #> 642  2004-10-10  2003-06-01  -13.2631756 #> 643  2004-10-10  2003-07-01  -15.2435905 #> 644  2004-10-10  2003-08-01  -21.7619862 #> 645  2004-10-10  2003-09-01  -25.7834346 #> 646  2004-10-10  2003-10-01  -18.9137242 #> 647  2004-10-10  2003-11-01  -25.0241802 #> 648  2004-10-10  2003-12-01  -21.7661547 #> 649  2004-10-10  2004-01-01  -20.3787057 #> 650  2004-10-10  2004-02-01  -24.1998888 #> 651  2004-10-10  2004-03-01  -30.6975110 #> 652  2004-10-10  2004-04-01  -33.2738424 #> 653  2004-10-10  2004-05-01  -40.4943676 #> 654  2004-10-10  2004-06-01  -56.9014951 #> 655  2004-10-10  2004-07-01  -62.6831572 #> 656  2004-10-10  2004-08-01  -72.4150156 #> 657  2004-10-10  2004-09-01  -75.4708721 #> 658  2004-10-10  2004-10-01  -65.4979873 #> 659  2004-10-10  2004-11-01           NA #> 660  2004-10-10  2004-12-01           NA #> 661  2004-10-10  2005-01-01           NA #> 662  2004-10-10  2005-02-01           NA #> 663  2004-10-10  2005-03-01           NA #> 664  2004-10-10  2005-04-01           NA #> 665  2004-10-10  2005-05-01           NA #> 666  2004-10-10  2005-06-01           NA #> 667  2004-10-10  2005-07-01           NA #> 668  2004-10-10  2005-08-01           NA #> 669  2004-10-10  2005-09-01           NA #> 670  2004-10-10  2005-10-01           NA #> 671  2004-10-10  2005-11-01           NA #> 672  2004-10-10  2005-12-01           NA #> 673  2004-10-10  2006-01-01           NA #> 674  2004-10-10  2006-02-01           NA #> 675  2004-10-10  2006-03-01           NA #> 676  2004-10-10  2006-04-01           NA #> 677  2004-10-10  2006-05-01           NA #> 678  2004-10-10  2006-06-01           NA #> 679  2004-10-10  2006-07-01           NA #> 680  2004-10-10  2006-08-01           NA #> 681  2004-10-10  2006-09-01           NA #> 682  2004-10-10  2006-10-01           NA #> 683  2004-10-10  2006-11-01           NA #> 684  2004-10-10  2006-12-01           NA #> 685  2004-10-10  2007-01-01           NA #> 686  2004-10-10  2007-02-01           NA #> 687  2004-10-10  2007-03-01           NA #> 688  2004-10-10  2007-04-01           NA #> 689  2004-10-10  2007-05-01           NA #> 690  2004-10-10  2007-06-01           NA #> 691  2004-10-10  2007-07-01           NA #> 692  2004-10-10  2007-08-01           NA #> 693  2004-10-10  2007-09-01           NA #> 694  2004-10-10  2007-10-01           NA #> 695  2004-10-10  2007-11-01           NA #> 696  2004-10-10  2007-12-01           NA #> 697  2004-10-10  2008-01-01           NA #> 698  2004-10-10  2008-02-01           NA #> 699  2004-10-10  2008-03-01           NA #> 700  2004-10-10  2008-04-01           NA #> 701  2004-10-10  2008-05-01           NA #> 702  2004-10-10  2008-06-01           NA #> 703  2004-10-10  2008-07-01           NA #> 704  2004-10-10  2008-08-01           NA #> 705  2004-10-10  2008-09-01           NA #> 706  2004-10-10  2008-10-01           NA #> 707  2004-10-10  2008-11-01           NA #> 708  2004-10-10  2008-12-01           NA #> 709  2004-10-10  2009-01-01           NA #> 710  2004-10-10  2009-02-01           NA #> 711  2004-10-10  2009-03-01           NA #> 712  2004-10-10  2009-04-01           NA #> 713  2004-10-10  2009-05-01           NA #> 714  2004-10-10  2009-06-01           NA #> 715  2004-10-10  2009-07-01           NA #> 716  2004-10-10  2009-08-01           NA #> 717  2004-10-10  2009-09-01           NA #> 718  2004-10-10  2009-10-01           NA #> 719  2004-10-10  2009-11-01           NA #> 720  2004-10-10  2009-12-01           NA #> 721  2006-04-07  2000-01-01   10.3725933 #> 722  2006-04-07  2000-02-01   12.7475662 #> 723  2006-04-07  2000-03-01    8.8169685 #> 724  2006-04-07  2000-04-01   12.1097777 #> 725  2006-04-07  2000-05-01   15.4690155 #> 726  2006-04-07  2000-06-01    9.8437186 #> 727  2006-04-07  2000-07-01   10.7246811 #> 728  2006-04-07  2000-08-01    9.4038156 #> 729  2006-04-07  2000-09-01   10.9153636 #> 730  2006-04-07  2000-10-01   14.6955193 #> 731  2006-04-07  2000-11-01   14.0413837 #> 732  2006-04-07  2000-12-01   14.5819730 #> 733  2006-04-07  2001-01-01   20.8157551 #> 734  2006-04-07  2001-02-01   22.2990417 #> 735  2006-04-07  2001-03-01   17.1609491 #> 736  2006-04-07  2001-04-01   19.3097421 #> 737  2006-04-07  2001-05-01   22.2374642 #> 738  2006-04-07  2001-06-01   15.3146450 #> 739  2006-04-07  2001-07-01   14.8541895 #> 740  2006-04-07  2001-08-01   13.4371849 #> 741  2006-04-07  2001-09-01   12.6684648 #> 742  2006-04-07  2001-10-01   17.8839641 #> 743  2006-04-07  2001-11-01   17.6288387 #> 744  2006-04-07  2001-12-01   17.0682559 #> 745  2006-04-07  2002-01-01   19.6280124 #> 746  2006-04-07  2002-02-01   19.5131228 #> 747  2006-04-07  2002-03-01   17.6850256 #> 748  2006-04-07  2002-04-01   18.9988901 #> 749  2006-04-07  2002-05-01   18.7835795 #> 750  2006-04-07  2002-06-01    7.1918536 #> 751  2006-04-07  2002-07-01    5.3392600 #> 752  2006-04-07  2002-08-01    2.4765867 #> 753  2006-04-07  2002-09-01   -2.4632986 #> 754  2006-04-07  2002-10-01    2.4050721 #> 755  2006-04-07  2002-11-01    1.6891460 #> 756  2006-04-07  2002-12-01    2.2549312 #> 757  2006-04-07  2003-01-01    2.5456932 #> 758  2006-04-07  2003-02-01    0.6854370 #> 759  2006-04-07  2003-03-01   -3.5970741 #> 760  2006-04-07  2003-04-01   -4.8671957 #> 761  2006-04-07  2003-05-01   -4.3544033 #> 762  2006-04-07  2003-06-01  -13.7798346 #> 763  2006-04-07  2003-07-01  -15.4474168 #> 764  2006-04-07  2003-08-01  -21.9862596 #> 765  2006-04-07  2003-09-01  -25.7647039 #> 766  2006-04-07  2003-10-01  -19.2918923 #> 767  2006-04-07  2003-11-01  -24.8650290 #> 768  2006-04-07  2003-12-01  -21.7783285 #> 769  2006-04-07  2004-01-01  -20.5363408 #> 770  2006-04-07  2004-02-01  -24.0089318 #> 771  2006-04-07  2004-03-01  -30.4370040 #> 772  2006-04-07  2004-04-01  -33.7506601 #> 773  2006-04-07  2004-05-01  -40.2848839 #> 774  2006-04-07  2004-06-01  -56.6370949 #> 775  2006-04-07  2004-07-01  -62.6940844 #> 776  2006-04-07  2004-08-01  -70.3847689 #> 777  2006-04-07  2004-09-01  -73.9448541 #> 778  2006-04-07  2004-10-01  -65.6802299 #> 779  2006-04-07  2004-11-01  -71.1602248 #> 780  2006-04-07  2004-12-01  -70.3555780 #> 781  2006-04-07  2005-01-01  -71.1067484 #> 782  2006-04-07  2005-02-01  -67.2585511 #> 783  2006-04-07  2005-03-01  -66.9678122 #> 784  2006-04-07  2005-04-01  -73.9516224 #> 785  2006-04-07  2005-05-01  -76.8908811 #> 786  2006-04-07  2005-06-01  -88.6430721 #> 787  2006-04-07  2005-07-01  -93.9080310 #> 788  2006-04-07  2005-08-01  -99.0917130 #> 789  2006-04-07  2005-09-01 -106.1037575 #> 790  2006-04-07  2005-10-01  -98.5332733 #> 791  2006-04-07  2005-11-01 -102.0428640 #> 792  2006-04-07  2005-12-01  -99.1948756 #> 793  2006-04-07  2006-01-01  -94.3324823 #> 794  2006-04-07  2006-02-01  -93.4732394 #> 795  2006-04-07  2006-03-01  -93.9289962 #> 796  2006-04-07  2006-04-01  -91.7722581 #> 797  2006-04-07  2006-05-01           NA #> 798  2006-04-07  2006-06-01           NA #> 799  2006-04-07  2006-07-01           NA #> 800  2006-04-07  2006-08-01           NA #> 801  2006-04-07  2006-09-01           NA #> 802  2006-04-07  2006-10-01           NA #> 803  2006-04-07  2006-11-01           NA #> 804  2006-04-07  2006-12-01           NA #> 805  2006-04-07  2007-01-01           NA #> 806  2006-04-07  2007-02-01           NA #> 807  2006-04-07  2007-03-01           NA #> 808  2006-04-07  2007-04-01           NA #> 809  2006-04-07  2007-05-01           NA #> 810  2006-04-07  2007-06-01           NA #> 811  2006-04-07  2007-07-01           NA #> 812  2006-04-07  2007-08-01           NA #> 813  2006-04-07  2007-09-01           NA #> 814  2006-04-07  2007-10-01           NA #> 815  2006-04-07  2007-11-01           NA #> 816  2006-04-07  2007-12-01           NA #> 817  2006-04-07  2008-01-01           NA #> 818  2006-04-07  2008-02-01           NA #> 819  2006-04-07  2008-03-01           NA #> 820  2006-04-07  2008-04-01           NA #> 821  2006-04-07  2008-05-01           NA #> 822  2006-04-07  2008-06-01           NA #> 823  2006-04-07  2008-07-01           NA #> 824  2006-04-07  2008-08-01           NA #> 825  2006-04-07  2008-09-01           NA #> 826  2006-04-07  2008-10-01           NA #> 827  2006-04-07  2008-11-01           NA #> 828  2006-04-07  2008-12-01           NA #> 829  2006-04-07  2009-01-01           NA #> 830  2006-04-07  2009-02-01           NA #> 831  2006-04-07  2009-03-01           NA #> 832  2006-04-07  2009-04-01           NA #> 833  2006-04-07  2009-05-01           NA #> 834  2006-04-07  2009-06-01           NA #> 835  2006-04-07  2009-07-01           NA #> 836  2006-04-07  2009-08-01           NA #> 837  2006-04-07  2009-09-01           NA #> 838  2006-04-07  2009-10-01           NA #> 839  2006-04-07  2009-11-01           NA #> 840  2006-04-07  2009-12-01           NA #> 841  2007-10-10  2000-01-01   10.3509293 #> 842  2007-10-10  2000-02-01   12.8353763 #> 843  2007-10-10  2000-03-01    8.8371177 #> 844  2007-10-10  2000-04-01   12.1516888 #> 845  2007-10-10  2000-05-01   15.4575641 #> 846  2007-10-10  2000-06-01    9.7838698 #> 847  2007-10-10  2000-07-01   10.7405470 #> 848  2007-10-10  2000-08-01    9.4328594 #> 849  2007-10-10  2000-09-01   10.8754205 #> 850  2007-10-10  2000-10-01   14.8000335 #> 851  2007-10-10  2000-11-01   14.0422408 #> 852  2007-10-10  2000-12-01   14.6562600 #> 853  2007-10-10  2001-01-01   20.8610032 #> 854  2007-10-10  2001-02-01   22.2932129 #> 855  2007-10-10  2001-03-01   17.1621526 #> 856  2007-10-10  2001-04-01   19.2572243 #> 857  2007-10-10  2001-05-01   22.2116804 #> 858  2007-10-10  2001-06-01   15.3076754 #> 859  2007-10-10  2001-07-01   14.8142683 #> 860  2007-10-10  2001-08-01   13.4567884 #> 861  2007-10-10  2001-09-01   12.5865771 #> 862  2007-10-10  2001-10-01   17.8870443 #> 863  2007-10-10  2001-11-01   17.5778376 #> 864  2007-10-10  2001-12-01   17.0789063 #> 865  2007-10-10  2002-01-01   19.6433220 #> 866  2007-10-10  2002-02-01   19.4736072 #> 867  2007-10-10  2002-03-01   17.6701546 #> 868  2007-10-10  2002-04-01   19.0408014 #> 869  2007-10-10  2002-05-01   18.8621710 #> 870  2007-10-10  2002-06-01    7.2857237 #> 871  2007-10-10  2002-07-01    5.3079193 #> 872  2007-10-10  2002-08-01    2.4711924 #> 873  2007-10-10  2002-09-01   -2.4477696 #> 874  2007-10-10  2002-10-01    2.5802910 #> 875  2007-10-10  2002-11-01    1.8956678 #> 876  2007-10-10  2002-12-01    2.1730201 #> 877  2007-10-10  2003-01-01    2.6361961 #> 878  2007-10-10  2003-02-01    0.8669399 #> 879  2007-10-10  2003-03-01   -3.5693012 #> 880  2007-10-10  2003-04-01   -4.9130026 #> 881  2007-10-10  2003-05-01   -4.6810340 #> 882  2007-10-10  2003-06-01  -13.7547888 #> 883  2007-10-10  2003-07-01  -15.5519743 #> 884  2007-10-10  2003-08-01  -22.0270078 #> 885  2007-10-10  2003-09-01  -25.7077153 #> 886  2007-10-10  2003-10-01  -19.3032342 #> 887  2007-10-10  2003-11-01  -24.8897058 #> 888  2007-10-10  2003-12-01  -21.8860297 #> 889  2007-10-10  2004-01-01  -20.6270051 #> 890  2007-10-10  2004-02-01  -24.1408467 #> 891  2007-10-10  2004-03-01  -30.4567380 #> 892  2007-10-10  2004-04-01  -33.6424616 #> 893  2007-10-10  2004-05-01  -40.3859409 #> 894  2007-10-10  2004-06-01  -56.6991249 #> 895  2007-10-10  2004-07-01  -62.6280727 #> 896  2007-10-10  2004-08-01  -70.2796286 #> 897  2007-10-10  2004-09-01  -73.4960109 #> 898  2007-10-10  2004-10-01  -65.3630509 #> 899  2007-10-10  2004-11-01  -72.7582386 #> 900  2007-10-10  2004-12-01  -68.7334359 #> 901  2007-10-10  2005-01-01  -66.9391204 #> 902  2007-10-10  2005-02-01  -65.3207636 #> 903  2007-10-10  2005-03-01  -71.0672014 #> 904  2007-10-10  2005-04-01  -70.2753174 #> 905  2007-10-10  2005-05-01  -77.8802491 #> 906  2007-10-10  2005-06-01  -90.6724224 #> 907  2007-10-10  2005-07-01  -93.5345298 #> 908  2007-10-10  2005-08-01 -100.0477200 #> 909  2007-10-10  2005-09-01 -106.2795014 #> 910  2007-10-10  2005-10-01  -96.9089367 #> 911  2007-10-10  2005-11-01  -98.6005730 #> 912  2007-10-10  2005-12-01  -99.9706388 #> 913  2007-10-10  2006-01-01  -96.5545690 #> 914  2007-10-10  2006-02-01  -92.4110302 #> 915  2007-10-10  2006-03-01  -93.3909039 #> 916  2007-10-10  2006-04-01  -92.1088983 #> 917  2007-10-10  2006-05-01  -96.7619991 #> 918  2007-10-10  2006-06-01 -112.1748274 #> 919  2007-10-10  2006-07-01 -112.9711918 #> 920  2007-10-10  2006-08-01 -123.7893066 #> 921  2007-10-10  2006-09-01 -128.0842193 #> 922  2007-10-10  2006-10-01 -112.7371810 #> 923  2007-10-10  2006-11-01 -117.0558343 #> 924  2007-10-10  2006-12-01 -107.2367191 #> 925  2007-10-10  2007-01-01 -102.2639969 #> 926  2007-10-10  2007-02-01  -98.1273758 #> 927  2007-10-10  2007-03-01 -103.7841133 #> 928  2007-10-10  2007-04-01 -100.4612808 #> 929  2007-10-10  2007-05-01 -110.9081187 #> 930  2007-10-10  2007-06-01 -124.2313674 #> 931  2007-10-10  2007-07-01 -129.2329525 #> 932  2007-10-10  2007-08-01 -125.5752769 #> 933  2007-10-10  2007-09-01 -128.0753215 #> 934  2007-10-10  2007-10-01 -121.4610575 #> 935  2007-10-10  2007-11-01           NA #> 936  2007-10-10  2007-12-01           NA #> 937  2007-10-10  2008-01-01           NA #> 938  2007-10-10  2008-02-01           NA #> 939  2007-10-10  2008-03-01           NA #> 940  2007-10-10  2008-04-01           NA #> 941  2007-10-10  2008-05-01           NA #> 942  2007-10-10  2008-06-01           NA #> 943  2007-10-10  2008-07-01           NA #> 944  2007-10-10  2008-08-01           NA #> 945  2007-10-10  2008-09-01           NA #> 946  2007-10-10  2008-10-01           NA #> 947  2007-10-10  2008-11-01           NA #> 948  2007-10-10  2008-12-01           NA #> 949  2007-10-10  2009-01-01           NA #> 950  2007-10-10  2009-02-01           NA #> 951  2007-10-10  2009-03-01           NA #> 952  2007-10-10  2009-04-01           NA #> 953  2007-10-10  2009-05-01           NA #> 954  2007-10-10  2009-06-01           NA #> 955  2007-10-10  2009-07-01           NA #> 956  2007-10-10  2009-08-01           NA #> 957  2007-10-10  2009-09-01           NA #> 958  2007-10-10  2009-10-01           NA #> 959  2007-10-10  2009-11-01           NA #> 960  2007-10-10  2009-12-01           NA #> 961  2008-06-12  2000-01-01   10.3771641 #> 962  2008-06-12  2000-02-01   12.7974085 #> 963  2008-06-12  2000-03-01    8.8286109 #> 964  2008-06-12  2000-04-01   12.1237437 #> 965  2008-06-12  2000-05-01   15.4594249 #> 966  2008-06-12  2000-06-01    9.7902606 #> 967  2008-06-12  2000-07-01   10.7224110 #> 968  2008-06-12  2000-08-01    9.4171392 #> 969  2008-06-12  2000-09-01   10.9132885 #> 970  2008-06-12  2000-10-01   14.7744892 #> 971  2008-06-12  2000-11-01   14.0643514 #> 972  2008-06-12  2000-12-01   14.6450395 #> 973  2008-06-12  2001-01-01   20.8528970 #> 974  2008-06-12  2001-02-01   22.3026511 #> 975  2008-06-12  2001-03-01   17.1531660 #> 976  2008-06-12  2001-04-01   19.2645159 #> 977  2008-06-12  2001-05-01   22.2074078 #> 978  2008-06-12  2001-06-01   15.3270006 #> 979  2008-06-12  2001-07-01   14.7882317 #> 980  2008-06-12  2001-08-01   13.4772872 #> 981  2008-06-12  2001-09-01   12.6129704 #> 982  2008-06-12  2001-10-01   17.8824642 #> 983  2008-06-12  2001-11-01   17.6196402 #> 984  2008-06-12  2001-12-01   17.0926804 #> 985  2008-06-12  2002-01-01   19.6397420 #> 986  2008-06-12  2002-02-01   19.4682449 #> 987  2008-06-12  2002-03-01   17.6450793 #> 988  2008-06-12  2002-04-01   19.0279756 #> 989  2008-06-12  2002-05-01   18.8364300 #> 990  2008-06-12  2002-06-01    7.2495884 #> 991  2008-06-12  2002-07-01    5.2946972 #> 992  2008-06-12  2002-08-01    2.4348599 #> 993  2008-06-12  2002-09-01   -2.3928204 #> 994  2008-06-12  2002-10-01    2.4713751 #> 995  2008-06-12  2002-11-01    1.8470126 #> 996  2008-06-12  2002-12-01    2.1708783 #> 997  2008-06-12  2003-01-01    2.5534814 #> 998  2008-06-12  2003-02-01    0.8686342 #> 999  2008-06-12  2003-03-01   -3.6957574 #> 1000 2008-06-12  2003-04-01   -4.8994767 #> 1001 2008-06-12  2003-05-01   -4.6048272 #> 1002 2008-06-12  2003-06-01  -13.7835232 #> 1003 2008-06-12  2003-07-01  -15.5485622 #> 1004 2008-06-12  2003-08-01  -21.9194626 #> 1005 2008-06-12  2003-09-01  -25.7573394 #> 1006 2008-06-12  2003-10-01  -19.3738986 #> 1007 2008-06-12  2003-11-01  -24.8314145 #> 1008 2008-06-12  2003-12-01  -21.8748615 #> 1009 2008-06-12  2004-01-01  -20.5982652 #> 1010 2008-06-12  2004-02-01  -24.1611274 #> 1011 2008-06-12  2004-03-01  -30.4483984 #> 1012 2008-06-12  2004-04-01  -33.6403807 #> 1013 2008-06-12  2004-05-01  -40.3703339 #> 1014 2008-06-12  2004-06-01  -56.6781334 #> 1015 2008-06-12  2004-07-01  -62.6724816 #> 1016 2008-06-12  2004-08-01  -69.4713750 #> 1017 2008-06-12  2004-09-01  -73.4699079 #> 1018 2008-06-12  2004-10-01  -65.3603874 #> 1019 2008-06-12  2004-11-01  -72.5138462 #> 1020 2008-06-12  2004-12-01  -70.6040937 #> 1021 2008-06-12  2005-01-01  -66.4432903 #> 1022 2008-06-12  2005-02-01  -65.3845345 #> 1023 2008-06-12  2005-03-01  -71.3665968 #> 1024 2008-06-12  2005-04-01  -71.8295164 #> 1025 2008-06-12  2005-05-01  -77.6101705 #> 1026 2008-06-12  2005-06-01  -89.7696541 #> 1027 2008-06-12  2005-07-01  -93.8658810 #> 1028 2008-06-12  2005-08-01 -100.0537546 #> 1029 2008-06-12  2005-09-01 -106.8912334 #> 1030 2008-06-12  2005-10-01  -98.4226533 #> 1031 2008-06-12  2005-11-01 -100.5573251 #> 1032 2008-06-12  2005-12-01 -100.6422178 #> 1033 2008-06-12  2006-01-01  -95.8269509 #> 1034 2008-06-12  2006-02-01  -91.3129413 #> 1035 2008-06-12  2006-03-01  -93.6271759 #> 1036 2008-06-12  2006-04-01  -91.2594792 #> 1037 2008-06-12  2006-05-01  -97.9178871 #> 1038 2008-06-12  2006-06-01 -112.5467542 #> 1039 2008-06-12  2006-07-01 -114.8444644 #> 1040 2008-06-12  2006-08-01 -120.4745234 #> 1041 2008-06-12  2006-09-01 -127.8121736 #> 1042 2008-06-12  2006-10-01 -116.5716347 #> 1043 2008-06-12  2006-11-01 -113.8887682 #> 1044 2008-06-12  2006-12-01 -106.0527561 #> 1045 2008-06-12  2007-01-01 -101.4566003 #> 1046 2008-06-12  2007-02-01 -100.1735452 #> 1047 2008-06-12  2007-03-01 -105.4514633 #> 1048 2008-06-12  2007-04-01 -100.2110089 #> 1049 2008-06-12  2007-05-01 -108.1114920 #> 1050 2008-06-12  2007-06-01 -122.9234854 #> 1051 2008-06-12  2007-07-01 -128.5730185 #> 1052 2008-06-12  2007-08-01 -125.1023197 #> 1053 2008-06-12  2007-09-01 -130.7293334 #> 1054 2008-06-12  2007-10-01 -117.5066535 #> 1055 2008-06-12  2007-11-01 -121.8126130 #> 1056 2008-06-12  2007-12-01 -118.7579245 #> 1057 2008-06-12  2008-01-01 -122.1530114 #> 1058 2008-06-12  2008-02-01 -117.4338660 #> 1059 2008-06-12  2008-03-01 -117.0593573 #> 1060 2008-06-12  2008-04-01 -112.9414120 #> 1061 2008-06-12  2008-05-01 -124.7204015 #> 1062 2008-06-12  2008-06-01 -137.8478194 #> 1063 2008-06-12  2008-07-01           NA #> 1064 2008-06-12  2008-08-01           NA #> 1065 2008-06-12  2008-09-01           NA #> 1066 2008-06-12  2008-10-01           NA #> 1067 2008-06-12  2008-11-01           NA #> 1068 2008-06-12  2008-12-01           NA #> 1069 2008-06-12  2009-01-01           NA #> 1070 2008-06-12  2009-02-01           NA #> 1071 2008-06-12  2009-03-01           NA #> 1072 2008-06-12  2009-04-01           NA #> 1073 2008-06-12  2009-05-01           NA #> 1074 2008-06-12  2009-06-01           NA #> 1075 2008-06-12  2009-07-01           NA #> 1076 2008-06-12  2009-08-01           NA #> 1077 2008-06-12  2009-09-01           NA #> 1078 2008-06-12  2009-10-01           NA #> 1079 2008-06-12  2009-11-01           NA #> 1080 2008-06-12  2009-12-01           NA #> 1081 2009-04-28  2000-01-01   10.3715750 #> 1082 2009-04-28  2000-02-01   12.8069231 #> 1083 2009-04-28  2000-03-01    8.8269791 #> 1084 2009-04-28  2000-04-01   12.1307211 #> 1085 2009-04-28  2000-05-01   15.4686928 #> 1086 2009-04-28  2000-06-01    9.7957175 #> 1087 2009-04-28  2000-07-01   10.7267050 #> 1088 2009-04-28  2000-08-01    9.4076268 #> 1089 2009-04-28  2000-09-01   10.9140388 #> 1090 2009-04-28  2000-10-01   14.7768890 #> 1091 2009-04-28  2000-11-01   14.0482489 #> 1092 2009-04-28  2000-12-01   14.6425646 #> 1093 2009-04-28  2001-01-01   20.8458419 #> 1094 2009-04-28  2001-02-01   22.3028343 #> 1095 2009-04-28  2001-03-01   17.1534660 #> 1096 2009-04-28  2001-04-01   19.2718252 #> 1097 2009-04-28  2001-05-01   22.2179778 #> 1098 2009-04-28  2001-06-01   15.3170772 #> 1099 2009-04-28  2001-07-01   14.7892693 #> 1100 2009-04-28  2001-08-01   13.4647334 #> 1101 2009-04-28  2001-09-01   12.6217198 #> 1102 2009-04-28  2001-10-01   17.8802924 #> 1103 2009-04-28  2001-11-01   17.5995194 #> 1104 2009-04-28  2001-12-01   17.0765960 #> 1105 2009-04-28  2002-01-01   19.6299636 #> 1106 2009-04-28  2002-02-01   19.4681831 #> 1107 2009-04-28  2002-03-01   17.6386501 #> 1108 2009-04-28  2002-04-01   19.0280675 #> 1109 2009-04-28  2002-05-01   18.8409246 #> 1110 2009-04-28  2002-06-01    7.2619826 #> 1111 2009-04-28  2002-07-01    5.2901010 #> 1112 2009-04-28  2002-08-01    2.4419328 #> 1113 2009-04-28  2002-09-01   -2.4126168 #> 1114 2009-04-28  2002-10-01    2.4483855 #> 1115 2009-04-28  2002-11-01    1.8138486 #> 1116 2009-04-28  2002-12-01    2.1690572 #> 1117 2009-04-28  2003-01-01    2.5768652 #> 1118 2009-04-28  2003-02-01    0.8211350 #> 1119 2009-04-28  2003-03-01   -3.6375789 #> 1120 2009-04-28  2003-04-01   -4.8832214 #> 1121 2009-04-28  2003-05-01   -4.6235799 #> 1122 2009-04-28  2003-06-01  -13.7657464 #> 1123 2009-04-28  2003-07-01  -15.5324252 #> 1124 2009-04-28  2003-08-01  -21.9281596 #> 1125 2009-04-28  2003-09-01  -25.7083711 #> 1126 2009-04-28  2003-10-01  -19.3903531 #> 1127 2009-04-28  2003-11-01  -24.8665828 #> 1128 2009-04-28  2003-12-01  -21.9158120 #> 1129 2009-04-28  2004-01-01  -20.6049301 #> 1130 2009-04-28  2004-02-01  -24.1790428 #> 1131 2009-04-28  2004-03-01  -30.4264272 #> 1132 2009-04-28  2004-04-01  -33.6018846 #> 1133 2009-04-28  2004-05-01  -40.3461416 #> 1134 2009-04-28  2004-06-01  -56.7232562 #> 1135 2009-04-28  2004-07-01  -62.6912808 #> 1136 2009-04-28  2004-08-01  -69.2802968 #> 1137 2009-04-28  2004-09-01  -73.4819748 #> 1138 2009-04-28  2004-10-01  -65.4494817 #> 1139 2009-04-28  2004-11-01  -71.0254676 #> 1140 2009-04-28  2004-12-01  -70.5316649 #> 1141 2009-04-28  2005-01-01  -67.4376074 #> 1142 2009-04-28  2005-02-01  -65.5605567 #> 1143 2009-04-28  2005-03-01  -71.3437163 #> 1144 2009-04-28  2005-04-01  -71.0093199 #> 1145 2009-04-28  2005-05-01  -78.0010914 #> 1146 2009-04-28  2005-06-01  -90.3911866 #> 1147 2009-04-28  2005-07-01  -93.7926759 #> 1148 2009-04-28  2005-08-01  -99.9500941 #> 1149 2009-04-28  2005-09-01 -107.2639514 #> 1150 2009-04-28  2005-10-01  -98.3593337 #> 1151 2009-04-28  2005-11-01 -100.7128363 #> 1152 2009-04-28  2005-12-01 -100.4186993 #> 1153 2009-04-28  2006-01-01  -95.7786884 #> 1154 2009-04-28  2006-02-01  -91.4082858 #> 1155 2009-04-28  2006-03-01  -92.8496096 #> 1156 2009-04-28  2006-04-01  -91.1644831 #> 1157 2009-04-28  2006-05-01  -99.6816092 #> 1158 2009-04-28  2006-06-01 -111.7402986 #> 1159 2009-04-28  2006-07-01 -115.3484864 #> 1160 2009-04-28  2006-08-01 -118.6878097 #> 1161 2009-04-28  2006-09-01 -128.0800399 #> 1162 2009-04-28  2006-10-01 -116.4874778 #> 1163 2009-04-28  2006-11-01 -114.6740137 #> 1164 2009-04-28  2006-12-01 -108.8100644 #> 1165 2009-04-28  2007-01-01 -103.7211770 #> 1166 2009-04-28  2007-02-01  -99.9732835 #> 1167 2009-04-28  2007-03-01 -104.5671910 #> 1168 2009-04-28  2007-04-01  -99.8850075 #> 1169 2009-04-28  2007-05-01 -107.4651559 #> 1170 2009-04-28  2007-06-01 -123.3177350 #> 1171 2009-04-28  2007-07-01 -127.1943054 #> 1172 2009-04-28  2007-08-01 -124.8255560 #> 1173 2009-04-28  2007-09-01 -129.7047417 #> 1174 2009-04-28  2007-10-01 -119.1852034 #> 1175 2009-04-28  2007-11-01 -119.4325609 #> 1176 2009-04-28  2007-12-01 -120.3795016 #> 1177 2009-04-28  2008-01-01 -122.5052931 #> 1178 2009-04-28  2008-02-01 -114.4122077 #> 1179 2009-04-28  2008-03-01 -117.8181620 #> 1180 2009-04-28  2008-04-01 -112.3559250 #> 1181 2009-04-28  2008-05-01 -122.4813180 #> 1182 2009-04-28  2008-06-01 -138.2878306 #> 1183 2009-04-28  2008-07-01 -151.3608156 #> 1184 2009-04-28  2008-08-01 -152.3365517 #> 1185 2009-04-28  2008-09-01 -158.3229361 #> 1186 2009-04-28  2008-10-01 -146.0831685 #> 1187 2009-04-28  2008-11-01 -151.8292869 #> 1188 2009-04-28  2008-12-01 -149.4863288 #> 1189 2009-04-28  2009-01-01 -143.8903727 #> 1190 2009-04-28  2009-02-01 -144.0680364 #> 1191 2009-04-28  2009-03-01 -150.1292125 #> 1192 2009-04-28  2009-04-01 -146.4796966 #> 1193 2009-04-28  2009-05-01           NA #> 1194 2009-04-28  2009-06-01           NA #> 1195 2009-04-28  2009-07-01           NA #> 1196 2009-04-28  2009-08-01           NA #> 1197 2009-04-28  2009-09-01           NA #> 1198 2009-04-28  2009-10-01           NA #> 1199 2009-04-28  2009-11-01           NA #> 1200 2009-04-28  2009-12-01           NA simulate_long(periodicity = 4L, n_period = 5L * 4L) #>       rev_date time_period  obs_values #> 1   2013-01-09  2012-01-01  6.31843478 #> 2   2013-01-09  2012-04-01 10.55055156 #> 3   2013-01-09  2012-07-01  7.41925975 #> 4   2013-01-09  2012-10-01 10.88954160 #> 5   2013-01-09  2013-01-01  3.86598406 #> 6   2013-01-09  2013-04-01          NA #> 7   2013-01-09  2013-07-01          NA #> 8   2013-01-09  2013-10-01          NA #> 9   2013-01-09  2014-01-01          NA #> 10  2013-01-09  2014-04-01          NA #> 11  2013-01-09  2014-07-01          NA #> 12  2013-01-09  2014-10-01          NA #> 13  2013-01-09  2015-01-01          NA #> 14  2013-01-09  2015-04-01          NA #> 15  2013-01-09  2015-07-01          NA #> 16  2013-01-09  2015-10-01          NA #> 17  2013-01-09  2016-01-01          NA #> 18  2013-01-09  2016-04-01          NA #> 19  2013-01-09  2016-07-01          NA #> 20  2013-01-09  2016-10-01          NA #> 21  2013-01-15  2012-01-01  5.73656830 #> 22  2013-01-15  2012-04-01  8.34419926 #> 23  2013-01-15  2012-07-01  7.95287006 #> 24  2013-01-15  2012-10-01  8.00412210 #> 25  2013-01-15  2013-01-01  2.58492748 #> 26  2013-01-15  2013-04-01          NA #> 27  2013-01-15  2013-07-01          NA #> 28  2013-01-15  2013-10-01          NA #> 29  2013-01-15  2014-01-01          NA #> 30  2013-01-15  2014-04-01          NA #> 31  2013-01-15  2014-07-01          NA #> 32  2013-01-15  2014-10-01          NA #> 33  2013-01-15  2015-01-01          NA #> 34  2013-01-15  2015-04-01          NA #> 35  2013-01-15  2015-07-01          NA #> 36  2013-01-15  2015-10-01          NA #> 37  2013-01-15  2016-01-01          NA #> 38  2013-01-15  2016-04-01          NA #> 39  2013-01-15  2016-07-01          NA #> 40  2013-01-15  2016-10-01          NA #> 41  2014-03-03  2012-01-01  6.73606612 #> 42  2014-03-03  2012-04-01  7.29834811 #> 43  2014-03-03  2012-07-01  8.89127527 #> 44  2014-03-03  2012-10-01  7.27145809 #> 45  2014-03-03  2013-01-01  3.94658635 #> 46  2014-03-03  2013-04-01  6.98525593 #> 47  2014-03-03  2013-07-01  7.06247564 #> 48  2014-03-03  2013-10-01  3.05920358 #> 49  2014-03-03  2014-01-01 -1.31379870 #> 50  2014-03-03  2014-04-01          NA #> 51  2014-03-03  2014-07-01          NA #> 52  2014-03-03  2014-10-01          NA #> 53  2014-03-03  2015-01-01          NA #> 54  2014-03-03  2015-04-01          NA #> 55  2014-03-03  2015-07-01          NA #> 56  2014-03-03  2015-10-01          NA #> 57  2014-03-03  2016-01-01          NA #> 58  2014-03-03  2016-04-01          NA #> 59  2014-03-03  2016-07-01          NA #> 60  2014-03-03  2016-10-01          NA #> 61  2014-03-22  2012-01-01  7.17592098 #> 62  2014-03-22  2012-04-01  8.03945147 #> 63  2014-03-22  2012-07-01  8.53561263 #> 64  2014-03-22  2012-10-01  7.54121155 #> 65  2014-03-22  2013-01-01  3.98911919 #> 66  2014-03-22  2013-04-01  7.04323099 #> 67  2014-03-22  2013-07-01  6.80479150 #> 68  2014-03-22  2013-10-01  2.33999817 #> 69  2014-03-22  2014-01-01  0.31607811 #> 70  2014-03-22  2014-04-01          NA #> 71  2014-03-22  2014-07-01          NA #> 72  2014-03-22  2014-10-01          NA #> 73  2014-03-22  2015-01-01          NA #> 74  2014-03-22  2015-04-01          NA #> 75  2014-03-22  2015-07-01          NA #> 76  2014-03-22  2015-10-01          NA #> 77  2014-03-22  2016-01-01          NA #> 78  2014-03-22  2016-04-01          NA #> 79  2014-03-22  2016-07-01          NA #> 80  2014-03-22  2016-10-01          NA #> 81  2014-05-06  2012-01-01  7.09891509 #> 82  2014-05-06  2012-04-01  7.88525062 #> 83  2014-05-06  2012-07-01  8.46269786 #> 84  2014-05-06  2012-10-01  7.47265549 #> 85  2014-05-06  2013-01-01  3.45274327 #> 86  2014-05-06  2013-04-01  6.93909780 #> 87  2014-05-06  2013-07-01  7.68895897 #> 88  2014-05-06  2013-10-01  3.64320255 #> 89  2014-05-06  2014-01-01  0.61965150 #> 90  2014-05-06  2014-04-01  7.16602572 #> 91  2014-05-06  2014-07-01          NA #> 92  2014-05-06  2014-10-01          NA #> 93  2014-05-06  2015-01-01          NA #> 94  2014-05-06  2015-04-01          NA #> 95  2014-05-06  2015-07-01          NA #> 96  2014-05-06  2015-10-01          NA #> 97  2014-05-06  2016-01-01          NA #> 98  2014-05-06  2016-04-01          NA #> 99  2014-05-06  2016-07-01          NA #> 100 2014-05-06  2016-10-01          NA #> 101 2014-10-08  2012-01-01  7.00951879 #> 102 2014-10-08  2012-04-01  7.88153116 #> 103 2014-10-08  2012-07-01  8.38040725 #> 104 2014-10-08  2012-10-01  7.65793846 #> 105 2014-10-08  2013-01-01  3.63665151 #> 106 2014-10-08  2013-04-01  6.60194786 #> 107 2014-10-08  2013-07-01  7.54169093 #> 108 2014-10-08  2013-10-01  3.77935991 #> 109 2014-10-08  2014-01-01  0.08690303 #> 110 2014-10-08  2014-04-01  8.51443662 #> 111 2014-10-08  2014-07-01  7.56751631 #> 112 2014-10-08  2014-10-01  2.11597666 #> 113 2014-10-08  2015-01-01          NA #> 114 2014-10-08  2015-04-01          NA #> 115 2014-10-08  2015-07-01          NA #> 116 2014-10-08  2015-10-01          NA #> 117 2014-10-08  2016-01-01          NA #> 118 2014-10-08  2016-04-01          NA #> 119 2014-10-08  2016-07-01          NA #> 120 2014-10-08  2016-10-01          NA #> 121 2015-11-27  2012-01-01  6.98730612 #> 122 2015-11-27  2012-04-01  7.92845747 #> 123 2015-11-27  2012-07-01  8.39163518 #> 124 2015-11-27  2012-10-01  7.59252145 #> 125 2015-11-27  2013-01-01  3.73968716 #> 126 2015-11-27  2013-04-01  6.52322511 #> 127 2015-11-27  2013-07-01  7.35919922 #> 128 2015-11-27  2013-10-01  4.29927482 #> 129 2015-11-27  2014-01-01 -0.31242278 #> 130 2015-11-27  2014-04-01  6.68118914 #> 131 2015-11-27  2014-07-01  9.89532658 #> 132 2015-11-27  2014-10-01  0.59643681 #> 133 2015-11-27  2015-01-01  0.31342751 #> 134 2015-11-27  2015-04-01  5.82695137 #> 135 2015-11-27  2015-07-01  0.82664265 #> 136 2015-11-27  2015-10-01 -1.80720087 #> 137 2015-11-27  2016-01-01          NA #> 138 2015-11-27  2016-04-01          NA #> 139 2015-11-27  2016-07-01          NA #> 140 2015-11-27  2016-10-01          NA #> 141 2015-12-15  2012-01-01  6.96543088 #> 142 2015-12-15  2012-04-01  7.89782144 #> 143 2015-12-15  2012-07-01  8.35661806 #> 144 2015-12-15  2012-10-01  7.53416003 #> 145 2015-12-15  2013-01-01  3.68696415 #> 146 2015-12-15  2013-04-01  6.66101394 #> 147 2015-12-15  2013-07-01  7.46105233 #> 148 2015-12-15  2013-10-01  4.14099941 #> 149 2015-12-15  2014-01-01 -0.15880770 #> 150 2015-12-15  2014-04-01  7.06305765 #> 151 2015-12-15  2014-07-01  8.82519083 #> 152 2015-12-15  2014-10-01 -0.09319947 #> 153 2015-12-15  2015-01-01 -0.74069348 #> 154 2015-12-15  2015-04-01  4.11135635 #> 155 2015-12-15  2015-07-01  3.77016120 #> 156 2015-12-15  2015-10-01 -1.74805321 #> 157 2015-12-15  2016-01-01          NA #> 158 2015-12-15  2016-04-01          NA #> 159 2015-12-15  2016-07-01          NA #> 160 2015-12-15  2016-10-01          NA #> 161 2016-08-15  2012-01-01  6.95886378 #> 162 2016-08-15  2012-04-01  7.91607806 #> 163 2016-08-15  2012-07-01  8.36546306 #> 164 2016-08-15  2012-10-01  7.55086828 #> 165 2016-08-15  2013-01-01  3.67956866 #> 166 2016-08-15  2013-04-01  6.51454146 #> 167 2016-08-15  2013-07-01  7.41472354 #> 168 2016-08-15  2013-10-01  4.18635578 #> 169 2016-08-15  2014-01-01 -0.26842219 #> 170 2016-08-15  2014-04-01  6.96646220 #> 171 2016-08-15  2014-07-01  8.65818529 #> 172 2016-08-15  2014-10-01  0.14716499 #> 173 2016-08-15  2015-01-01 -2.10172454 #> 174 2016-08-15  2015-04-01  4.77667035 #> 175 2016-08-15  2015-07-01  2.97212791 #> 176 2016-08-15  2015-10-01 -2.82120402 #> 177 2016-08-15  2016-01-01 -0.95548607 #> 178 2016-08-15  2016-04-01  7.03960810 #> 179 2016-08-15  2016-07-01  7.11337347 #> 180 2016-08-15  2016-10-01          NA #> 181 2017-02-24  2012-01-01  6.95487556 #> 182 2017-02-24  2012-04-01  7.91145727 #> 183 2017-02-24  2012-07-01  8.36131289 #> 184 2017-02-24  2012-10-01  7.54709958 #> 185 2017-02-24  2013-01-01  3.68507923 #> 186 2017-02-24  2013-04-01  6.54760499 #> 187 2017-02-24  2013-07-01  7.44586358 #> 188 2017-02-24  2013-10-01  4.14506907 #> 189 2017-02-24  2014-01-01 -0.24970748 #> 190 2017-02-24  2014-04-01  7.05432793 #> 191 2017-02-24  2014-07-01  8.99080787 #> 192 2017-02-24  2014-10-01  0.24411245 #> 193 2017-02-24  2015-01-01 -1.71307567 #> 194 2017-02-24  2015-04-01  4.20516152 #> 195 2017-02-24  2015-07-01  3.23643122 #> 196 2017-02-24  2015-10-01 -2.67724168 #> 197 2017-02-24  2016-01-01 -0.85093495 #> 198 2017-02-24  2016-04-01  3.93762099 #> 199 2017-02-24  2016-07-01  5.93299990 #> 200 2017-02-24  2016-10-01 -1.40067085"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/slope_and_drift.html","id":null,"dir":"Reference","previous_headings":"","what":"Slope and Drift — slope_and_drift","title":"Slope and Drift — slope_and_drift","text":"Linear regression model latter vintage (L) preliminary vintage (P)","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/slope_and_drift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Slope and Drift — slope_and_drift","text":"","code":"slope_and_drift(vintages.view, gap = 1, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/slope_and_drift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Slope and Drift — slope_and_drift","text":"vintages.view mts object. Vertical diagonal view create_vintages() output gap Integer. Gap consider vintages. Default 1 means revisions calculated tested vintages consecutively. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/slope_and_drift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Slope and Drift — slope_and_drift","text":"","code":"## Simulated data df_long <- simulate_long(     n_period = 10L * 4L,     n_revision = 5L,     periodicity = 4L,     start_period = as.Date(\"2010-01-01\") )  ## Create vintage and test vintages <- create_vintages(df_long, periodicity = 4L) slope_and_drift(vintages$diagonal_view) #>             N        R2          F intercept.estimate intercept.stderr #> Release[2] 29 0.9673622   800.2609        -0.05024430       0.49972382 #> Release[3] 26 0.9934013  3613.0849        -0.20741016       0.23863861 #> Release[4] 17 0.9975699  6157.6368         0.09638763       0.15471222 #> Release[5] 14 0.9992632 16273.6670        -0.02415571       0.07536499 #>            intercept.pvalue slope.estimate slope.stderr slope.pvalue   skewness #> Release[2]        0.9206552      0.9646644  0.034100477    0.3092913 -0.3201805 #> Release[3]        0.3933802      1.0153181  0.016891298    0.3734955 -0.6204077 #> Release[4]        0.5426334      1.0085757  0.012852910    0.5147672 -0.3461895 #> Release[5]        0.7540896      0.9977879  0.007821599    0.7821391 -0.4237412 #>               kurtosis JarqueBera.value JarqueBera.pvalue BreuschPagan.R2 #> Release[2]  1.65425844        3.6710722         0.1595280     0.005020713 #> Release[3] -0.54736518        1.9158664         0.3836851     0.017143671 #> Release[4] -1.12674266        1.1659584         0.5582328     0.030389940 #> Release[5]  0.02378062        0.3893457         0.8231039     0.045686235 #>            BreuschPagan.value BreuschPagan.pvalue    White.R2 White.value #> Release[2]          0.1362433           0.7149235 0.005063403   0.1468387 #> Release[3]          0.4186249           0.5237646 0.022056451   0.5734677 #> Release[4]          0.4701365           0.5033846 0.175903458   2.9903588 #> Release[5]          0.5744807           0.4631095 0.062790198   0.8790628 #>            White.pvalue      arch.R2   arch.value arch.pvalue #> Release[2]    0.9292111 4.112498e-02 1.1514993912   0.2832355 #> Release[3]    0.7507115 2.457650e-02 0.6144125850   0.4331312 #> Release[4]    0.2242084 2.726273e-05 0.0004362036   0.9833370 #> Release[5]    0.6443383 1.239053e-02 0.1610769357   0.6881669"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/summary.rjd3rev_revisions.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function for objects of class ","title":"Summary function for objects of class ","text":"Summary function objects class \"rjd3rev_revisions\"","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/summary.rjd3rev_revisions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function for objects of class ","text":"","code":"# S3 method for class 'rjd3rev_revisions' summary(object, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/summary.rjd3rev_revisions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function for objects of class ","text":"object object class \"rjd3rev_revisions\". ... arguments passed methods.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/summary.rjd3rev_rslts.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function for objects of class rjd3rev_rslts — summary.rjd3rev_rslts","title":"Summary function for objects of class rjd3rev_rslts — summary.rjd3rev_rslts","text":"Summary function objects class rjd3rev_rslts","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/summary.rjd3rev_rslts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function for objects of class rjd3rev_rslts — summary.rjd3rev_rslts","text":"","code":"# S3 method for class 'rjd3rev_rslts' summary(object, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/summary.rjd3rev_rslts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function for objects of class rjd3rev_rslts — summary.rjd3rev_rslts","text":"object object class rjd3rev_rslts ... arguments passed methods.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/summary.rjd3rev_vintages.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function for objects of class ","title":"Summary function for objects of class ","text":"Summary function objects class \"rjd3rev_vintages\"","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/summary.rjd3rev_vintages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function for objects of class ","text":"","code":"# S3 method for class 'rjd3rev_vintages' summary(object, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/summary.rjd3rev_vintages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function for objects of class ","text":"object object class \"rjd3rev_vintages\". ... arguments passed methods.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/theil.html","id":null,"dir":"Reference","previous_headings":"","what":"Theil's Inequality Coefficient U1 — theil","title":"Theil's Inequality Coefficient U1 — theil","text":"Theil's Inequality Coefficient U1","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/theil.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theil's Inequality Coefficient U1 — theil","text":"","code":"theil(vintages.view, gap = 1, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/theil.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theil's Inequality Coefficient U1 — theil","text":"vintages.view mts object. Vertical diagonal view create_vintages() output gap Integer. Gap consider vintages. Default 1 means revisions calculated tested vintages consecutively. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/theil.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theil's Inequality Coefficient U1 — theil","text":"","code":"## Simulated data df_long <- simulate_long(     n_period = 10L * 4L,     n_revision = 5L,     periodicity = 4L,     start_period = as.Date(\"2010-01-01\") )  ## Create vintage and test vintages <- create_vintages(df_long, periodicity = 4) theil(vintages$diagonal_view) #> [1] 0.021428696 0.011783207 0.012742746 0.005162731"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/theil2.html","id":null,"dir":"Reference","previous_headings":"","what":"Theil's Inequality Coefficient U2 — theil2","title":"Theil's Inequality Coefficient U2 — theil2","text":"Theil's Inequality Coefficient U2","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/theil2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theil's Inequality Coefficient U2 — theil2","text":"","code":"theil2(vintages.view, gap = 1, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/theil2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theil's Inequality Coefficient U2 — theil2","text":"vintages.view mts object. Vertical diagonal view create_vintages() output gap Integer. Gap consider vintages. Default 1 means revisions calculated tested vintages consecutively.. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/theil2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theil's Inequality Coefficient U2 — theil2","text":"","code":"## Simulated data df_long <- simulate_long(     n_period = 10L * 4L,     n_revision = 5L,     periodicity = 4L,     start_period = as.Date(\"2010-01-01\") )  ## Create vintage and test vintages <- create_vintages(df_long, periodicity = 4) theil2(vintages$diagonal_view) #> [1] 0.4287468 0.2363685 0.2901566 0.1333634"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/unitroot.html","id":null,"dir":"Reference","previous_headings":"","what":"Unit root test — unitroot","title":"Unit root test — unitroot","text":"Unit root test","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/unitroot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unit root test — unitroot","text":"","code":"unitroot(vintages.view, adfk = 1, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/unitroot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unit root test — unitroot","text":"vintages.view mts object. Vertical diagonal view create_vintages() output adfk Number lags consider Augmented Dicky-Fuller (ADF) test na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/unitroot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unit root test — unitroot","text":"","code":"## Simulated data df_long <- simulate_long(     n_period = 10L * 4L,     n_revision = 5L,     periodicity = 4L,     start_period = as.Date(\"2010-01-01\") )  ## Create vintage and test vintages <- create_vintages(df_long, periodicity = 4L) unitroot(vintages$diagonal_view) #>             DF.value  DF.stderr DF.statistic DF.pvalue ADF.value ADF.stderr #> Release[1] 1.0491162 0.01648251    2.9798966 0.9987734 1.0662772 0.01870631 #> Release[2] 1.0491314 0.01633034    3.0085939 0.9988617 1.0639701 0.01875555 #> Release[3] 1.1910554 0.10272592    1.8598560 0.9807798 1.2326557 0.12573059 #> Release[4] 1.1001894 0.10897018    0.9194202 0.8992175 1.1030365 0.14110775 #> Release[5] 0.7598796 0.21041337   -1.1411841 0.2199462 0.6528083 0.22748838 #>            ADF.statistic ADF.pvalue  DFCT.value DFCT.stderr DFCT.statistic #> Release[1]     3.5430421  0.9997117  0.58128423   0.1169602      -3.579985 #> Release[2]     3.4107298  0.9995933  0.62082593   0.1091145      -3.475010 #> Release[3]     1.8504305  0.9803418  0.50731414   0.2453539      -2.008062 #> Release[4]     0.7301971  0.8657564  0.40935599   0.2120400      -2.785530 #> Release[5]    -1.5261955  0.1169120 -0.09202792   0.3186005      -3.427577 #>            DFCT.pvalue  PP.value  PP.stderr PP.statistic PP.pvalue #> Release[1]  0.04769455 1.0491162 0.01648251    3.3253850 0.9995018 #> Release[2]  0.05921582 1.0491314 0.01633034    3.1890951 0.9992890 #> Release[3]  0.58758861 1.1910554 0.10272592    2.0712118 0.9871453 #> Release[4]  0.22648473 1.1001894 0.10897018    0.8587343 0.8892932 #> Release[5]  0.07907824 0.7598796 0.21041337   -1.0818545 0.2394408"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/vecm.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector error correction model (VECM) — vecm","title":"Vector error correction model (VECM) — vecm","text":"Can lead better understanding nature nonstationary process among different component series.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/vecm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector error correction model (VECM) — vecm","text":"","code":"vecm(   vintages.view,   lag = 2,   model = c(\"none\", \"cnt\", \"trend\"),   na.zero = FALSE )"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/vecm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector error correction model (VECM) — vecm","text":"vintages.view mts object. Vertical diagonal view create_vintages() output lag Number lags model Character. Must \"none\" (default), \"cnt\" \"trend\". na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/vecm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector error correction model (VECM) — vecm","text":"","code":"## Simulated data df_long <- simulate_long(     n_period = 10L * 4L,     n_revision = 5L,     periodicity = 4L,     start_period = as.Date(\"2010-01-01\") )  ## Create vintage and test vintages <- create_vintages(df_long, periodicity = 4L) vecm(vintages$diagonal_view) #>                               trace(2)  trace(1)       max(2)    max(1) #> [Release[1]]_[Release[2]] 1.4286791458  8.858379 1.4286791458  7.429699 #> [Release[1]]_[Release[3]] 0.5428190889 10.893543 0.5428190889 10.350724 #> [Release[1]]_[Release[4]] 0.0005238129  8.465250 0.0005238129  8.464726 #> [Release[1]]_[Release[5]] 2.6867420341 10.647578 2.6867420341  7.960836 #> [Release[2]]_[Release[3]] 0.3124980437 13.397866 0.3124980437 13.085368 #> [Release[2]]_[Release[4]] 0.3521536785  8.441270 0.3521536785  8.089117 #> [Release[2]]_[Release[5]] 3.3047529721 14.434638 3.3047529721 11.129885 #> [Release[3]]_[Release[4]] 0.1064864061 12.889706 0.1064864061 12.783219 #> [Release[3]]_[Release[5]] 3.7993895881 13.610848 3.7993895881  9.811458 #> [Release[4]]_[Release[5]] 8.5750654272 29.572238 8.5750654272 20.997172"}]
